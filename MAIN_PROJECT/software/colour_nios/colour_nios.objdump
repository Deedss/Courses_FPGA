
colour_nios.elf:     file format elf32-littlenios2
colour_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000608 memsz 0x00000608 flags r-x
    LOAD off    0x00001628 vaddr 0x00008628 paddr 0x00008910 align 2**12
         filesz 0x000002e8 memsz 0x000002e8 flags rw-
    LOAD off    0x00001bf8 vaddr 0x00008bf8 paddr 0x00008bf8 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001910  2**0
                  CONTENTS
  2 .text         000005b8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000085d8  000085d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e8  00008628  00008910  00001628  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000024  00008bf8  00008bf8  00001bf8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008c1c  00008c1c  00001910  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000200  00000000  00000000  00001938  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001b43  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bcc  00000000  00000000  0000367b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000bfa  00000000  00000000  00004247  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002a0  00000000  00000000  00004e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000afb  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000761  00000000  00000000  00005bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006340  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00006350  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007552  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00007555  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007561  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007562  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00007563  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000756e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00007579  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00007584  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000041  00000000  00000000  00007588  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c49  00000000  00000000  000075c9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00057e9f  00000000  00000000  0000c212  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000085d8 l    d  .rodata	00000000 .rodata
00008628 l    d  .rwdata	00000000 .rwdata
00008bf8 l    d  .bss	00000000 .bss
00008c1c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../colour_nios_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008870 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000853c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00008470 g     F .text	0000002c alt_main
00008910 g       *ABS*	00000000 __flash_rwdata_start
00008080 g     F .text	00000060 grayScale
0000849c g     F .text	00000038 alt_putstr
000085b4 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008c18 g     O .bss	00000004 errno
00008c10 g     O .bss	00000004 alt_argv
000108f4 g       *ABS*	00000000 _gp
0000889c g     O .rwdata	00000030 alt_fd_list
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000082d4 g     F .text	00000064 .hidden __udivsi3
000088f8 g     O .rwdata	00000004 alt_max_fd
0000864c g     O .rwdata	00000024 sobel_h
00008c1c g       *ABS*	00000000 __bss_end
00008bf8 g     O .bss	00000004 SWITCHES
00008068 g     F .text	0000000c greenFilter
000088cc g     O .rwdata	00000028 alt_dev_null
00008538 g     F .text	00000004 alt_dcache_flush_all
00008bfc g     O .bss	00000004 B
00008910 g       *ABS*	00000000 __ram_rwdata_end
000088fc g     O .rwdata	00000008 alt_dev_list
00008628 g       *ABS*	00000000 __ram_rodata_end
000088f4 g     O .rwdata	00000004 jtag_uart_0
00008338 g     F .text	00000058 .hidden __umodsi3
00008c1c g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008504 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000084f4 g     F .text	00000010 alt_sys_init
00008670 g     O .rwdata	00000200 buffer
00008628 g       *ABS*	00000000 __ram_rwdata_start
000085d8 g       *ABS*	00000000 __ram_rodata_start
00008c00 g     O .bss	00000004 G
00008074 g     F .text	0000000c blueFilter
00008c1c g       *ABS*	00000000 __alt_stack_base
0000805c g     F .text	0000000c redFilter
00008544 g     F .text	0000006c alt_dev_llist_insert
00008c04 g     O .bss	00000002 sd_fileh
00008bf8 g       *ABS*	00000000 __bss_start
000080e4 g     F .text	000000f8 main
00008c0c g     O .bss	00000004 alt_envp
0000890c g     O .rwdata	00000004 alt_errno
000081dc g     F .text	00000084 .hidden __divsi3
000085d8 g       *ABS*	00000000 __flash_rodata_start
000084d4 g     F .text	00000020 alt_irq_init
00008c08 g     O .bss	00000004 R
00008c14 g     O .bss	00000004 alt_argc
000080e0 g     F .text	00000004 Sobel
00008904 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008910 g       *ABS*	00000000 _edata
00008c1c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008260 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000085bc g     F .text	0000001c strlen
00008628 g     O .rwdata	00000024 sobel_v
000085b0 g     F .text	00000004 alt_icache_flush_all
00008390 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6823d14 	ori	gp,gp,2292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a2fe14 	ori	r2,r2,35832

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e30714 	ori	r3,r3,35868

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7750>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00083900 	call	8390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00084700 	call	8470 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7764>

0000805c <redFilter>:
    805c:	20000015 	stw	zero,0(r4)
    8060:	28000015 	stw	zero,0(r5)
    8064:	f800283a 	ret

00008068 <greenFilter>:
    8068:	20000015 	stw	zero,0(r4)
    806c:	28000015 	stw	zero,0(r5)
    8070:	f800283a 	ret

00008074 <blueFilter>:
	*B = 0;
	return;
}

void blueFilter(uint *R, uint *G){
	*R = 0;
    8074:	20000015 	stw	zero,0(r4)
	*G = 0;
    8078:	28000015 	stw	zero,0(r5)
    807c:	f800283a 	ret

00008080 <grayScale>:
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8080:	defffc04 	addi	sp,sp,-16
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    8084:	28800017 	ldw	r2,0(r5)
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8088:	dc000015 	stw	r16,0(sp)
    808c:	2021883a 	mov	r16,r4
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    8090:	31000017 	ldw	r4,0(r6)
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8094:	dc400115 	stw	r17,4(sp)
    8098:	2823883a 	mov	r17,r5
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    809c:	2085883a 	add	r2,r4,r2
    80a0:	81000017 	ldw	r4,0(r16)
    80a4:	014000c4 	movi	r5,3
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    80a8:	dc800215 	stw	r18,8(sp)
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    80ac:	1109883a 	add	r4,r2,r4
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    80b0:	3025883a 	mov	r18,r6
    80b4:	dfc00315 	stw	ra,12(sp)
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    80b8:	00082d40 	call	82d4 <__udivsi3>
    80bc:	90800015 	stw	r2,0(r18)
    80c0:	88800015 	stw	r2,0(r17)
    80c4:	80800015 	stw	r2,0(r16)
	/* Calculating by Luminosity */
//	*R = 0.2989 * *R;
//  *G = 0.5870 * *G;
//	*B = 0.1140 * *B;
	return;
}
    80c8:	dfc00317 	ldw	ra,12(sp)
    80cc:	dc800217 	ldw	r18,8(sp)
    80d0:	dc400117 	ldw	r17,4(sp)
    80d4:	dc000017 	ldw	r16,0(sp)
    80d8:	dec00404 	addi	sp,sp,16
    80dc:	f800283a 	ret

000080e0 <Sobel>:

void Sobel(int image[640][480], int out[640][480]){
    80e0:	f800283a 	ret

000080e4 <main>:
	return;
}


int main()
{
    80e4:	defffb04 	addi	sp,sp,-20
  alt_putstr("Hello from Nios II!\n");
    80e8:	01000074 	movhi	r4,1
	return;
}


int main()
{
    80ec:	dcc00315 	stw	r19,12(sp)
    80f0:	dc800215 	stw	r18,8(sp)
    80f4:	dc400115 	stw	r17,4(sp)
    80f8:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    80fc:	21217604 	addi	r4,r4,-31272
  /* Event loop never exits. */

  while (1)
  {
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    8100:	04000074 	movhi	r16,1
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    8104:	04400074 	movhi	r17,1
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    8108:	04800074 	movhi	r18,1
	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    810c:	04c00074 	movhi	r19,1
	return;
}


int main()
{
    8110:	dfc00415 	stw	ra,16(sp)
  alt_putstr("Hello from Nios II!\n");
  /* Event loop never exits. */

  while (1)
  {
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    8114:	84050004 	addi	r16,r16,5120
}


int main()
{
  alt_putstr("Hello from Nios II!\n");
    8118:	000849c0 	call	849c <alt_putstr>
  /* Event loop never exits. */

  while (1)
  {
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    811c:	8c450404 	addi	r17,r17,5136
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    8120:	94850804 	addi	r18,r18,5152
	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8124:	9cc50c04 	addi	r19,r19,5168
  alt_putstr("Hello from Nios II!\n");
  /* Event loop never exits. */

  while (1)
  {
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    8128:	80800037 	ldwio	r2,0(r16)
    812c:	d0a0c515 	stw	r2,-31980(gp)
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    8130:	88800037 	ldwio	r2,0(r17)
    8134:	d0a0c315 	stw	r2,-31988(gp)
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    8138:	90800037 	ldwio	r2,0(r18)
    813c:	d0a0c215 	stw	r2,-31992(gp)
	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8140:	98800037 	ldwio	r2,0(r19)

	if(R >= 0 && G >= 0 && B >= 0){
		if (SWITCHES == 1){
    8144:	00c00044 	movi	r3,1
  while (1)
  {
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8148:	d0a0c115 	stw	r2,-31996(gp)

	if(R >= 0 && G >= 0 && B >= 0){
		if (SWITCHES == 1){
    814c:	10c0021e 	bne	r2,r3,8158 <main+0x74>

/***
 * FUNCTIONS TO USE
 */
void redFilter(uint *G, uint *B){
	*G = 0;
    8150:	d020c315 	stw	zero,-31988(gp)
    8154:	00000306 	br	8164 <main+0x80>

	if(R >= 0 && G >= 0 && B >= 0){
		if (SWITCHES == 1){
			redFilter(&G, &B);
		}
		else if (SWITCHES == 2){
    8158:	00c00084 	movi	r3,2
    815c:	10c0031e 	bne	r2,r3,816c <main+0x88>
	*B = 0;
	return;
}

void greenFilter(uint *R, uint *B){
	*R = 0;
    8160:	d020c515 	stw	zero,-31980(gp)
	*B = 0;
    8164:	d020c215 	stw	zero,-31992(gp)
    8168:	00000b06 	br	8198 <main+0xb4>
			redFilter(&G, &B);
		}
		else if (SWITCHES == 2){
			greenFilter(&R, &B);
		}
		else if (SWITCHES == 4){
    816c:	00c00104 	movi	r3,4
    8170:	10c0031e 	bne	r2,r3,8180 <main+0x9c>
	*B = 0;
	return;
}

void blueFilter(uint *R, uint *G){
	*R = 0;
    8174:	d020c515 	stw	zero,-31980(gp)
	*G = 0;
    8178:	d020c315 	stw	zero,-31988(gp)
    817c:	00000606 	br	8198 <main+0xb4>
			greenFilter(&R, &B);
		}
		else if (SWITCHES == 4){
			blueFilter(&R, &G);
		}
		else if (SWITCHES == 8){
    8180:	00c00204 	movi	r3,8
    8184:	10c0041e 	bne	r2,r3,8198 <main+0xb4>
			grayScale(&R, &G, &B);
    8188:	d1a0c204 	addi	r6,gp,-31992
    818c:	d160c304 	addi	r5,gp,-31988
    8190:	d120c504 	addi	r4,gp,-31980
    8194:	00080800 	call	8080 <grayScale>
		}
		else if (SWITCHES == 16){
			// SOBEL
		}
		IOWR_ALTERA_AVALON_PIO_DATA(RED_BASE, R);
    8198:	d0e0c517 	ldw	r3,-31980(gp)
    819c:	00800074 	movhi	r2,1
    81a0:	10850004 	addi	r2,r2,5120
    81a4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_BASE, G);
    81a8:	d0e0c317 	ldw	r3,-31988(gp)
    81ac:	00800074 	movhi	r2,1
    81b0:	10850404 	addi	r2,r2,5136
    81b4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(BLUE_BASE, B);
    81b8:	d0e0c217 	ldw	r3,-31992(gp)
    81bc:	00800074 	movhi	r2,1
    81c0:	10850804 	addi	r2,r2,5152
    81c4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SW_BASE, SWITCHES);
    81c8:	d0e0c117 	ldw	r3,-31996(gp)
    81cc:	00800074 	movhi	r2,1
    81d0:	10850c04 	addi	r2,r2,5168
    81d4:	10c00035 	stwio	r3,0(r2)
	}
  }
    81d8:	003fd306 	br	8128 <_gp+0xffff7834>

000081dc <__divsi3>:
    81dc:	20001b16 	blt	r4,zero,824c <__divsi3+0x70>
    81e0:	000f883a 	mov	r7,zero
    81e4:	28001616 	blt	r5,zero,8240 <__divsi3+0x64>
    81e8:	200d883a 	mov	r6,r4
    81ec:	29001a2e 	bgeu	r5,r4,8258 <__divsi3+0x7c>
    81f0:	00800804 	movi	r2,32
    81f4:	00c00044 	movi	r3,1
    81f8:	00000106 	br	8200 <__divsi3+0x24>
    81fc:	10000d26 	beq	r2,zero,8234 <__divsi3+0x58>
    8200:	294b883a 	add	r5,r5,r5
    8204:	10bfffc4 	addi	r2,r2,-1
    8208:	18c7883a 	add	r3,r3,r3
    820c:	293ffb36 	bltu	r5,r4,81fc <_gp+0xffff7908>
    8210:	0005883a 	mov	r2,zero
    8214:	18000726 	beq	r3,zero,8234 <__divsi3+0x58>
    8218:	0005883a 	mov	r2,zero
    821c:	31400236 	bltu	r6,r5,8228 <__divsi3+0x4c>
    8220:	314dc83a 	sub	r6,r6,r5
    8224:	10c4b03a 	or	r2,r2,r3
    8228:	1806d07a 	srli	r3,r3,1
    822c:	280ad07a 	srli	r5,r5,1
    8230:	183ffa1e 	bne	r3,zero,821c <_gp+0xffff7928>
    8234:	38000126 	beq	r7,zero,823c <__divsi3+0x60>
    8238:	0085c83a 	sub	r2,zero,r2
    823c:	f800283a 	ret
    8240:	014bc83a 	sub	r5,zero,r5
    8244:	39c0005c 	xori	r7,r7,1
    8248:	003fe706 	br	81e8 <_gp+0xffff78f4>
    824c:	0109c83a 	sub	r4,zero,r4
    8250:	01c00044 	movi	r7,1
    8254:	003fe306 	br	81e4 <_gp+0xffff78f0>
    8258:	00c00044 	movi	r3,1
    825c:	003fee06 	br	8218 <_gp+0xffff7924>

00008260 <__modsi3>:
    8260:	20001716 	blt	r4,zero,82c0 <__modsi3+0x60>
    8264:	000f883a 	mov	r7,zero
    8268:	2005883a 	mov	r2,r4
    826c:	28001216 	blt	r5,zero,82b8 <__modsi3+0x58>
    8270:	2900162e 	bgeu	r5,r4,82cc <__modsi3+0x6c>
    8274:	01800804 	movi	r6,32
    8278:	00c00044 	movi	r3,1
    827c:	00000106 	br	8284 <__modsi3+0x24>
    8280:	30000a26 	beq	r6,zero,82ac <__modsi3+0x4c>
    8284:	294b883a 	add	r5,r5,r5
    8288:	31bfffc4 	addi	r6,r6,-1
    828c:	18c7883a 	add	r3,r3,r3
    8290:	293ffb36 	bltu	r5,r4,8280 <_gp+0xffff798c>
    8294:	18000526 	beq	r3,zero,82ac <__modsi3+0x4c>
    8298:	1806d07a 	srli	r3,r3,1
    829c:	11400136 	bltu	r2,r5,82a4 <__modsi3+0x44>
    82a0:	1145c83a 	sub	r2,r2,r5
    82a4:	280ad07a 	srli	r5,r5,1
    82a8:	183ffb1e 	bne	r3,zero,8298 <_gp+0xffff79a4>
    82ac:	38000126 	beq	r7,zero,82b4 <__modsi3+0x54>
    82b0:	0085c83a 	sub	r2,zero,r2
    82b4:	f800283a 	ret
    82b8:	014bc83a 	sub	r5,zero,r5
    82bc:	003fec06 	br	8270 <_gp+0xffff797c>
    82c0:	0109c83a 	sub	r4,zero,r4
    82c4:	01c00044 	movi	r7,1
    82c8:	003fe706 	br	8268 <_gp+0xffff7974>
    82cc:	00c00044 	movi	r3,1
    82d0:	003ff106 	br	8298 <_gp+0xffff79a4>

000082d4 <__udivsi3>:
    82d4:	200d883a 	mov	r6,r4
    82d8:	2900152e 	bgeu	r5,r4,8330 <__udivsi3+0x5c>
    82dc:	28001416 	blt	r5,zero,8330 <__udivsi3+0x5c>
    82e0:	00800804 	movi	r2,32
    82e4:	00c00044 	movi	r3,1
    82e8:	00000206 	br	82f4 <__udivsi3+0x20>
    82ec:	10000e26 	beq	r2,zero,8328 <__udivsi3+0x54>
    82f0:	28000516 	blt	r5,zero,8308 <__udivsi3+0x34>
    82f4:	294b883a 	add	r5,r5,r5
    82f8:	10bfffc4 	addi	r2,r2,-1
    82fc:	18c7883a 	add	r3,r3,r3
    8300:	293ffa36 	bltu	r5,r4,82ec <_gp+0xffff79f8>
    8304:	18000826 	beq	r3,zero,8328 <__udivsi3+0x54>
    8308:	0005883a 	mov	r2,zero
    830c:	31400236 	bltu	r6,r5,8318 <__udivsi3+0x44>
    8310:	314dc83a 	sub	r6,r6,r5
    8314:	10c4b03a 	or	r2,r2,r3
    8318:	1806d07a 	srli	r3,r3,1
    831c:	280ad07a 	srli	r5,r5,1
    8320:	183ffa1e 	bne	r3,zero,830c <_gp+0xffff7a18>
    8324:	f800283a 	ret
    8328:	0005883a 	mov	r2,zero
    832c:	f800283a 	ret
    8330:	00c00044 	movi	r3,1
    8334:	003ff406 	br	8308 <_gp+0xffff7a14>

00008338 <__umodsi3>:
    8338:	2005883a 	mov	r2,r4
    833c:	2900122e 	bgeu	r5,r4,8388 <__umodsi3+0x50>
    8340:	28001116 	blt	r5,zero,8388 <__umodsi3+0x50>
    8344:	01800804 	movi	r6,32
    8348:	00c00044 	movi	r3,1
    834c:	00000206 	br	8358 <__umodsi3+0x20>
    8350:	30000c26 	beq	r6,zero,8384 <__umodsi3+0x4c>
    8354:	28000516 	blt	r5,zero,836c <__umodsi3+0x34>
    8358:	294b883a 	add	r5,r5,r5
    835c:	31bfffc4 	addi	r6,r6,-1
    8360:	18c7883a 	add	r3,r3,r3
    8364:	293ffa36 	bltu	r5,r4,8350 <_gp+0xffff7a5c>
    8368:	18000626 	beq	r3,zero,8384 <__umodsi3+0x4c>
    836c:	1806d07a 	srli	r3,r3,1
    8370:	11400136 	bltu	r2,r5,8378 <__umodsi3+0x40>
    8374:	1145c83a 	sub	r2,r2,r5
    8378:	280ad07a 	srli	r5,r5,1
    837c:	183ffb1e 	bne	r3,zero,836c <_gp+0xffff7a78>
    8380:	f800283a 	ret
    8384:	f800283a 	ret
    8388:	00c00044 	movi	r3,1
    838c:	003ff706 	br	836c <_gp+0xffff7a78>

00008390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8390:	deffff04 	addi	sp,sp,-4
    8394:	01000074 	movhi	r4,1
    8398:	01400074 	movhi	r5,1
    839c:	dfc00015 	stw	ra,0(sp)
    83a0:	21218a04 	addi	r4,r4,-31192
    83a4:	29624404 	addi	r5,r5,-30448

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    83a8:	2140061e 	bne	r4,r5,83c4 <alt_load+0x34>
    83ac:	01000074 	movhi	r4,1
    83b0:	01400074 	movhi	r5,1
    83b4:	21200804 	addi	r4,r4,-32736
    83b8:	29600804 	addi	r5,r5,-32736
    83bc:	2140121e 	bne	r4,r5,8408 <alt_load+0x78>
    83c0:	00000b06 	br	83f0 <alt_load+0x60>
    83c4:	00c00074 	movhi	r3,1
    83c8:	18e24404 	addi	r3,r3,-30448
    83cc:	1907c83a 	sub	r3,r3,r4
    83d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    83d4:	10fff526 	beq	r2,r3,83ac <_gp+0xffff7ab8>
    {
      *to++ = *from++;
    83d8:	114f883a 	add	r7,r2,r5
    83dc:	39c00017 	ldw	r7,0(r7)
    83e0:	110d883a 	add	r6,r2,r4
    83e4:	10800104 	addi	r2,r2,4
    83e8:	31c00015 	stw	r7,0(r6)
    83ec:	003ff906 	br	83d4 <_gp+0xffff7ae0>
    83f0:	01000074 	movhi	r4,1
    83f4:	01400074 	movhi	r5,1
    83f8:	21217604 	addi	r4,r4,-31272
    83fc:	29617604 	addi	r5,r5,-31272

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8400:	2140101e 	bne	r4,r5,8444 <alt_load+0xb4>
    8404:	00000b06 	br	8434 <alt_load+0xa4>
    8408:	00c00074 	movhi	r3,1
    840c:	18e00804 	addi	r3,r3,-32736
    8410:	1907c83a 	sub	r3,r3,r4
    8414:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8418:	10fff526 	beq	r2,r3,83f0 <_gp+0xffff7afc>
    {
      *to++ = *from++;
    841c:	114f883a 	add	r7,r2,r5
    8420:	39c00017 	ldw	r7,0(r7)
    8424:	110d883a 	add	r6,r2,r4
    8428:	10800104 	addi	r2,r2,4
    842c:	31c00015 	stw	r7,0(r6)
    8430:	003ff906 	br	8418 <_gp+0xffff7b24>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8434:	00085380 	call	8538 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8438:	dfc00017 	ldw	ra,0(sp)
    843c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8440:	00085b01 	jmpi	85b0 <alt_icache_flush_all>
    8444:	00c00074 	movhi	r3,1
    8448:	18e18a04 	addi	r3,r3,-31192
    844c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8450:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8454:	18bff726 	beq	r3,r2,8434 <_gp+0xffff7b40>
    {
      *to++ = *from++;
    8458:	114f883a 	add	r7,r2,r5
    845c:	39c00017 	ldw	r7,0(r7)
    8460:	110d883a 	add	r6,r2,r4
    8464:	10800104 	addi	r2,r2,4
    8468:	31c00015 	stw	r7,0(r6)
    846c:	003ff906 	br	8454 <_gp+0xffff7b60>

00008470 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8470:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8474:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8478:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    847c:	00084d40 	call	84d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8480:	00084f40 	call	84f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8484:	d1a0c617 	ldw	r6,-31976(gp)
    8488:	d160c717 	ldw	r5,-31972(gp)
    848c:	d120c817 	ldw	r4,-31968(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8490:	dfc00017 	ldw	ra,0(sp)
    8494:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8498:	00080e41 	jmpi	80e4 <main>

0000849c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    849c:	defffe04 	addi	sp,sp,-8
    84a0:	dc000015 	stw	r16,0(sp)
    84a4:	dfc00115 	stw	ra,4(sp)
    84a8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    84ac:	00085bc0 	call	85bc <strlen>
    84b0:	01000074 	movhi	r4,1
    84b4:	000f883a 	mov	r7,zero
    84b8:	100d883a 	mov	r6,r2
    84bc:	800b883a 	mov	r5,r16
    84c0:	21223d04 	addi	r4,r4,-30476
#else
    return fputs(str, stdout);
#endif
#endif
}
    84c4:	dfc00117 	ldw	ra,4(sp)
    84c8:	dc000017 	ldw	r16,0(sp)
    84cc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    84d0:	00085041 	jmpi	8504 <altera_avalon_jtag_uart_write>

000084d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    84d4:	deffff04 	addi	sp,sp,-4
    84d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    84dc:	00085b40 	call	85b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    84e0:	00800044 	movi	r2,1
    84e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    84e8:	dfc00017 	ldw	ra,0(sp)
    84ec:	dec00104 	addi	sp,sp,4
    84f0:	f800283a 	ret

000084f4 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    84f4:	01000074 	movhi	r4,1
    84f8:	d1600204 	addi	r5,gp,-32760
    84fc:	21221c04 	addi	r4,r4,-30608
    8500:	00085441 	jmpi	8544 <alt_dev_llist_insert>

00008504 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8504:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8508:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    850c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8510:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8514:	2980072e 	bgeu	r5,r6,8534 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8518:	38c00037 	ldwio	r3,0(r7)
    851c:	18ffffec 	andhi	r3,r3,65535
    8520:	183ffc26 	beq	r3,zero,8514 <_gp+0xffff7c20>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8524:	28c00007 	ldb	r3,0(r5)
    8528:	20c00035 	stwio	r3,0(r4)
    852c:	29400044 	addi	r5,r5,1
    8530:	003ff806 	br	8514 <_gp+0xffff7c20>

  return count;
}
    8534:	f800283a 	ret

00008538 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8538:	f800283a 	ret

0000853c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    853c:	3005883a 	mov	r2,r6
    8540:	f800283a 	ret

00008544 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8544:	20000226 	beq	r4,zero,8550 <alt_dev_llist_insert+0xc>
    8548:	20800217 	ldw	r2,8(r4)
    854c:	1000101e 	bne	r2,zero,8590 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8550:	d0a00617 	ldw	r2,-32744(gp)
    8554:	10000926 	beq	r2,zero,857c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8558:	deffff04 	addi	sp,sp,-4
    855c:	dfc00015 	stw	ra,0(sp)
    8560:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    8564:	00c00584 	movi	r3,22
    8568:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    856c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    8570:	dfc00017 	ldw	ra,0(sp)
    8574:	dec00104 	addi	sp,sp,4
    8578:	f800283a 	ret
    857c:	d0a0c904 	addi	r2,gp,-31964
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    8580:	00c00584 	movi	r3,22
    8584:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8588:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    858c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    8590:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8594:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    8598:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    859c:	28800017 	ldw	r2,0(r5)
    85a0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    85a4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    85a8:	0005883a 	mov	r2,zero
    85ac:	f800283a 	ret

000085b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    85b0:	f800283a 	ret

000085b4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    85b4:	000170fa 	wrctl	ienable,zero
    85b8:	f800283a 	ret

000085bc <strlen>:
    85bc:	2005883a 	mov	r2,r4
    85c0:	10c00007 	ldb	r3,0(r2)
    85c4:	18000226 	beq	r3,zero,85d0 <strlen+0x14>
    85c8:	10800044 	addi	r2,r2,1
    85cc:	003ffc06 	br	85c0 <_gp+0xffff7ccc>
    85d0:	1105c83a 	sub	r2,r2,r4
    85d4:	f800283a 	ret
