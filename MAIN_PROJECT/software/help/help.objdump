
help.elf:     file format elf32-littlenios2
help.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005e84 memsz 0x00005e84 flags r-x
    LOAD off    0x00006ea4 vaddr 0x0000dea4 paddr 0x0000e1ec align 2**12
         filesz 0x00000348 memsz 0x00000348 flags rw-
    LOAD off    0x00007534 vaddr 0x0000e534 paddr 0x0000e534 align 2**12
         filesz 0x00000000 memsz 0x0000006c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000071ec  2**0
                  CONTENTS
  2 .text         000057dc  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006a8  0000d7fc  0000d7fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000348  0000dea4  0000e1ec  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000006c  0000e534  0000e534  00007534  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000e5a0  0000e5a0  000071ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006c8  00000000  00000000  00007210  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d640  00000000  00000000  000078d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041fd  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004bf0  00000000  00000000  00019115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001208  00000000  00000000  0001dd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a2f  00000000  00000000  0001ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008347  00000000  00000000  0002193f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00029c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000808  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002c64e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002c651  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002c65d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002c65e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0002c65f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0002c66a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0002c675  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0002c680  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  0002c684  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c49  00000000  00000000  0002c6be  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006e757  00000000  00000000  00031307  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000d7fc l    d  .rodata	00000000 .rodata
0000dea4 l    d  .rwdata	00000000 .rwdata
0000e534 l    d  .bss	00000000 .bss
0000e5a0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../help_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
00000000 l    df *ABS*	00000000 crc16.c
0000d80e l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
0000da0e l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
0000e568 l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000c5d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0000cb8c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 ctype_.c
0000dd21 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000e0ec l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000e1d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0000d544 g     F .text	0000002c alt_main
00008218 g     F .text	00000028 Fat_FileBrowseBegin
0000e1ec g       *ABS*	00000000 __flash_rwdata_start
00009d70 g     F .text	00000058 SDLIB_WriteBlock512
0000e5a0 g       *ABS*	00000000 __alt_heap_start
0000c408 g     F .text	0000004c printf
0000a97c g     F .text	000000e0 SD_CMD24
00008318 g     F .text	000002a0 Fat_FileBrowseNext
0000ac38 g     F .text	00000440 .hidden __divsf3
000095e0 g     F .text	00000008 SDHAL_IsSupport4Bits
00009464 g     F .text	00000024 crc7_byte
00008c7c g     F .text	00000060 fatIsValidDir
0000d390 g     F .text	00000060 memmove
00008080 g     F .text	00000060 grayScale
0000d7f4 g     F .text	00000008 altera_nios2_gen2_irq_init
0000d2e8 g     F .text	000000a8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
000096d4 g     F .text	000000e0 SDHAL_GetResponse
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e550 g     O .bss	00000004 errno
00008d80 g     F .text	00000104 fatNextCluster
0000e558 g     O .bss	00000004 alt_argv
000161cc g       *ABS*	00000000 _gp
0000d6a8 g     F .text	00000004 usleep
0000c148 g     F .text	00000028 memcpy
000089e4 g     F .text	0000007c Fat_FileExist
0000a004 g     F .text	00000108 SD_CMD2
0000c120 g     F .text	00000014 malloc
0000c3cc g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ab54 g     F .text	00000064 .hidden __udivsi3
0000a7b0 g     F .text	000000ec SD_ACMD42
0000d1fc g     F .text	00000034 vsnprintf
0000a500 g     F .text	000000d8 SD_CMD7
0000c454 g     F .text	00000050 _sbrk_r
0000a5d8 g     F .text	000000e0 SD_CMD16
0000a3f4 g     F .text	00000020 ArrayToU32
00009200 g     F .text	00000190 fatMount
0000be04 g     F .text	00000110 .hidden __extendsfdf2
00008cdc g     F .text	0000000c fatIsUnusedDir
0000dec8 g     O .rwdata	00000024 sobel_h
0000e1d0 g     O .rwdata	00000004 _global_impure_ptr
0000e5a0 g       *ABS*	00000000 __bss_end
0000d5f0 g     F .text	000000b8 alt_tick
0000e534 g     O .bss	00000004 SWITCHES
00008b88 g     F .text	0000000c SD_ReadBlock512
00008068 g     F .text	0000000c greenFilter
00008600 g     F .text	000000c4 Fat_FileOpen
0000d5bc g     F .text	00000034 alt_alarm_stop
00008f94 g     F .text	00000154 fatDelClusterList
00009630 g     F .text	0000007c SDHAL_SendCmd
0000d7ec g     F .text	00000004 alt_dcache_flush_all
0000e538 g     O .bss	00000004 B
000097b4 g     F .text	00000298 SDHAL_ReadData
0000e1ec g       *ABS*	00000000 __ram_rwdata_end
000081d0 g     F .text	00000010 Fat_Mount
0000d6ac g     F .text	00000060 write
0000dea4 g       *ABS*	00000000 __ram_rodata_end
0000e1e4 g     O .rwdata	00000004 jtag_uart_0
000094c4 g     F .text	0000004c myprintf
0000abb8 g     F .text	00000058 .hidden __umodsi3
0000e5a0 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000c0bc g     F .text	00000064 .hidden __clzsi2
0000d730 g     F .text	00000034 altera_avalon_jtag_uart_write
000089d8 g     F .text	0000000c Fat_FileClose
000085b8 g     F .text	00000048 Fat_FileCount
0000cbf8 g     F .text	0000052c ___vfprintf_internal_r
0000c4a4 g     F .text	00000064 _sprintf_r
0000c190 g     F .text	000000e4 _free_r
00008020 g     F .text	0000003c _start
0000e564 g     O .bss	00000004 _alt_tick_rate
0000e560 g     O .bss	00000004 _alt_nticks
00009dd0 g     F .text	00000064 SD_CMD0
0000d72c g     F .text	00000004 alt_sys_init
0000deec g     O .rwdata	00000200 buffer
000096ac g     F .text	00000028 SDHAL_DummyClock
000086c4 g     F .text	00000018 Fat_FileSize
0000941c g     F .text	00000048 crc16
00009dc8 g     F .text	00000004 SD_Init
0000ac10 g     F .text	00000028 .hidden __mulsi3
0000dea4 g       *ABS*	00000000 __ram_rwdata_start
0000d7fc g       *ABS*	00000000 __ram_rodata_start
0000c580 g     F .text	00000058 strcasecmp
0000e53c g     O .bss	00000004 G
0000d764 g     F .text	00000088 alt_busy_sleep
00008074 g     F .text	0000000c blueFilter
000086dc g     F .text	00000290 Fat_FileRead
0000e5a0 g       *ABS*	00000000 __alt_stack_base
00009158 g     F .text	000000a8 fatFindUnusedDirectory
000095e8 g     F .text	00000048 SDHAL_Init
0000805c g     F .text	0000000c redFilter
0000d140 g     F .text	000000bc _vsnprintf_r
0000b598 g     F .text	0000086c .hidden __muldf3
00008a60 g     F .text	00000128 Fat_SpeedTest
0000d570 g     F .text	0000004c sbrk
0000c644 g     F .text	0000052c ___svfprintf_internal_r
0000e540 g     O .bss	00000002 sd_fileh
0000d230 g     F .text	000000b8 __sfvwrite_small_dev
000090e8 g     F .text	00000070 fatFindDirectory
0000e534 g       *ABS*	00000000 __bss_start
0000c170 g     F .text	00000020 memset
000080e4 g     F .text	000000ec main
00008d14 g     F .text	0000006c fatReadSecter
0000e554 g     O .bss	00000004 alt_envp
00009510 g     F .text	00000068 myprintf_hexarray
00008ce8 g     F .text	00000004 fatDump
00010000 g       *ABS*	00000000 __alt_heap_limit
0000bf14 g     F .text	000001a8 .hidden __truncdfsf2
0000c274 g     F .text	00000158 _malloc_r
0000a3f0 g     F .text	00000004 SD_WriteData
0000e1e8 g     O .rwdata	00000004 alt_errno
00008c68 g     F .text	00000004 fatDumpDate
00009488 g     F .text	00000038 crc7
0000896c g     F .text	0000006c Fat_FileSeek
0000aa5c g     F .text	00000084 .hidden __divsi3
0000a6b8 g     F .text	000000f8 SD_ACMD6
0000b078 g     F .text	00000430 .hidden __mulsf3
00008b94 g     F .text	0000000c SD_WriteBlock512
0000d7fc g       *ABS*	00000000 __flash_rodata_start
00008cec g     F .text	00000028 fatArray2Value
00009dcc g     F .text	00000004 SD_IsSupport4Bits
00008bfc g     F .text	0000006c fat32ClusterType
0000d70c g     F .text	00000020 alt_irq_init
0000c508 g     F .text	00000078 sprintf
0000db20 g     O .rodata	00000100 .hidden __clz_tab
000094c0 g     F .text	00000004 debug_output
0000e544 g     O .bss	00000004 R
00009f24 g     F .text	000000e0 SD_ACMD41
0000d40c g     F .text	00000058 _write_r
00009e34 g     F .text	000000f0 SD_CMD8
00008274 g     F .text	000000a4 fatComposeShortFilename
0000e1d4 g     O .rwdata	00000004 _impure_ptr
0000e55c g     O .bss	00000004 alt_argc
000081ec g     F .text	0000002c Fat_Type
00009578 g     F .text	00000068 myprintf_dwordarray
00008ba0 g     F .text	0000005c fat16ClusterType
000080e0 g     F .text	00000004 Sobel
0000a414 g     F .text	000000ec SD_CMD55
0000cb70 g     F .text	0000001c __vfprintf_internal_unused
0000a2fc g     F .text	000000f0 SD_CMD10
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008240 g     F .text	00000034 fatSameLongFilename
0000e1ec g       *ABS*	00000000 _edata
00008c6c g     F .text	00000004 fatDumpTime
0000e5a0 g       *ABS*	00000000 _end
0000a20c g     F .text	000000f0 SD_CMD9
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009390 g     F .text	0000008c fatMountSdcard
0000b4a8 g     F .text	000000f0 .hidden __floatunsisf
0000aae0 g     F .text	00000074 .hidden __modsi3
0000e1cc g     O .rwdata	00000004 __ctype_ptr__
00010000 g       *ABS*	00000000 __alt_data_end
00009b2c g     F .text	000001ec SDLIB_Init
0000dc20 g     O .rodata	00000101 _ctype_
0000a89c g     F .text	000000e0 SD_CMD17
0000800c g       .entry	00000000 _exit
0000d3f0 g     F .text	0000001c strlen
0000e548 g     O .bss	00000004 __malloc_sbrk_start
0000dea4 g     O .rwdata	00000024 sobel_v
0000d7f0 g     F .text	00000004 alt_icache_flush_all
0000e54c g     O .bss	00000004 __malloc_free_list
00009a4c g     F .text	000000e0 SDHAL_WriteData
0000d124 g     F .text	0000001c __vfprintf_internal
00008e84 g     F .text	00000110 fatFindUnusedCluster
0000e1dc g     O .rwdata	00000008 alt_alarm_list
0000a3ec g     F .text	00000004 SD_ReadData
000081e0 g     F .text	0000000c Fat_Unmount
0000d464 g     F .text	000000e0 alt_load
0000c134 g     F .text	00000014 free
00008c70 g     F .text	0000000c fatIsLastDir
0000a10c g     F .text	00000100 SD_CMD3
00009d18 g     F .text	00000058 SDLIB_ReadBlock512



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6987314 	ori	gp,gp,25036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b94d14 	ori	r2,r2,58676

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f96814 	ori	r3,r3,58784

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff1e78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000d4640 	call	d464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000d5440 	call	d544 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff1e8c>

0000805c <redFilter>:
    805c:	20000015 	stw	zero,0(r4)
    8060:	28000015 	stw	zero,0(r5)
    8064:	f800283a 	ret

00008068 <greenFilter>:
    8068:	20000015 	stw	zero,0(r4)
    806c:	28000015 	stw	zero,0(r5)
    8070:	f800283a 	ret

00008074 <blueFilter>:
	*B = 0;
	return;
}

void blueFilter(uint *R, uint *G){
	*R = 0;
    8074:	20000015 	stw	zero,0(r4)
	*G = 0;
    8078:	28000015 	stw	zero,0(r5)
    807c:	f800283a 	ret

00008080 <grayScale>:
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8080:	defffc04 	addi	sp,sp,-16
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    8084:	28800017 	ldw	r2,0(r5)
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8088:	dc000015 	stw	r16,0(sp)
    808c:	2021883a 	mov	r16,r4
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    8090:	31000017 	ldw	r4,0(r6)
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    8094:	dc400115 	stw	r17,4(sp)
    8098:	2823883a 	mov	r17,r5
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    809c:	2085883a 	add	r2,r4,r2
    80a0:	81000017 	ldw	r4,0(r16)
    80a4:	014000c4 	movi	r5,3
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    80a8:	dc800215 	stw	r18,8(sp)
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    80ac:	1109883a 	add	r4,r2,r4
	*R = 0;
	*G = 0;
	return;
}

void grayScale(uint *R, uint *G, uint *B){
    80b0:	3025883a 	mov	r18,r6
    80b4:	dfc00315 	stw	ra,12(sp)
	/**
	 * GRAYSCALE is calculated by forming a weighted sum of the Red, Green, and Blue colour and dividing it by 3
	 * This value then replaces the old RGB value;	 *
	 */
	// Calculating Average Gray
	*R = *G = *B = (*R + *B + *G) / 3;
    80b8:	000ab540 	call	ab54 <__udivsi3>
    80bc:	90800015 	stw	r2,0(r18)
    80c0:	88800015 	stw	r2,0(r17)
    80c4:	80800015 	stw	r2,0(r16)
	/* Calculating by Luminosity */
//	*R = 0.2989 * *R;
//  *G = 0.5870 * *G;
//	*B = 0.1140 * *B;
	return;
}
    80c8:	dfc00317 	ldw	ra,12(sp)
    80cc:	dc800217 	ldw	r18,8(sp)
    80d0:	dc400117 	ldw	r17,4(sp)
    80d4:	dc000017 	ldw	r16,0(sp)
    80d8:	dec00404 	addi	sp,sp,16
    80dc:	f800283a 	ret

000080e0 <Sobel>:

void Sobel(int image[640][480], int out[640][480]){
    80e0:	f800283a 	ret

000080e4 <main>:
//    return bSuccess;
//}


int main()
{
    80e4:	defffb04 	addi	sp,sp,-20
    80e8:	dcc00315 	stw	r19,12(sp)
    80ec:	dc800215 	stw	r18,8(sp)
    80f0:	dc400115 	stw	r17,4(sp)
    80f4:	dc000015 	stw	r16,0(sp)
    FAT_HANDLE hFat;

    while (1)
      {
    	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    80f8:	04400074 	movhi	r17,1
{
    FAT_HANDLE hFat;

    while (1)
      {
    	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    80fc:	04000074 	movhi	r16,1
    	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    8100:	04800074 	movhi	r18,1
    	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8104:	04c00074 	movhi	r19,1
//    return bSuccess;
//}


int main()
{
    8108:	dfc00415 	stw	ra,16(sp)
    FAT_HANDLE hFat;

    while (1)
      {
    	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    810c:	84041004 	addi	r16,r16,4160
    	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    8110:	8c441404 	addi	r17,r17,4176
    	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    8114:	94841804 	addi	r18,r18,4192
    	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8118:	9cc41c04 	addi	r19,r19,4208
{
    FAT_HANDLE hFat;

    while (1)
      {
    	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    811c:	80800037 	ldwio	r2,0(r16)
    8120:	d0a0de15 	stw	r2,-31880(gp)
    	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    8124:	88800037 	ldwio	r2,0(r17)
    8128:	d0a0dc15 	stw	r2,-31888(gp)
    	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    812c:	90800037 	ldwio	r2,0(r18)
    8130:	d0a0db15 	stw	r2,-31892(gp)
    	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    8134:	98800037 	ldwio	r2,0(r19)

    	if(R >= 0 && G >= 0 && B >= 0){
    		if (SWITCHES == 1){
    8138:	00c00044 	movi	r3,1
    while (1)
      {
    	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    	SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    813c:	d0a0da15 	stw	r2,-31896(gp)

    	if(R >= 0 && G >= 0 && B >= 0){
    		if (SWITCHES == 1){
    8140:	10c0021e 	bne	r2,r3,814c <main+0x68>

/***
 * FUNCTIONS TO USE
 */
void redFilter(uint *G, uint *B){
	*G = 0;
    8144:	d020dc15 	stw	zero,-31888(gp)
    8148:	00000306 	br	8158 <main+0x74>

    	if(R >= 0 && G >= 0 && B >= 0){
    		if (SWITCHES == 1){
    			redFilter(&G, &B);
    		}
    		else if (SWITCHES == 2){
    814c:	00c00084 	movi	r3,2
    8150:	10c0031e 	bne	r2,r3,8160 <main+0x7c>
	*B = 0;
	return;
}

void greenFilter(uint *R, uint *B){
	*R = 0;
    8154:	d020de15 	stw	zero,-31880(gp)
	*B = 0;
    8158:	d020db15 	stw	zero,-31892(gp)
    815c:	00000b06 	br	818c <main+0xa8>
    			redFilter(&G, &B);
    		}
    		else if (SWITCHES == 2){
    			greenFilter(&R, &B);
    		}
    		else if (SWITCHES == 4){
    8160:	00c00104 	movi	r3,4
    8164:	10c0031e 	bne	r2,r3,8174 <main+0x90>
	*B = 0;
	return;
}

void blueFilter(uint *R, uint *G){
	*R = 0;
    8168:	d020de15 	stw	zero,-31880(gp)
	*G = 0;
    816c:	d020dc15 	stw	zero,-31888(gp)
    8170:	00000606 	br	818c <main+0xa8>
    			greenFilter(&R, &B);
    		}
    		else if (SWITCHES == 4){
    			blueFilter(&R, &G);
    		}
    		else if (SWITCHES == 8){
    8174:	00c00204 	movi	r3,8
    8178:	10c0041e 	bne	r2,r3,818c <main+0xa8>
    			grayScale(&R, &G, &B);
    817c:	d1a0db04 	addi	r6,gp,-31892
    8180:	d160dc04 	addi	r5,gp,-31888
    8184:	d120de04 	addi	r4,gp,-31880
    8188:	00080800 	call	8080 <grayScale>
    		}
    		else if (SWITCHES == 16){
    			// SOBEL
    		}
    		IOWR_ALTERA_AVALON_PIO_DATA(RED_BASE, R);
    818c:	d0e0de17 	ldw	r3,-31880(gp)
    8190:	00800074 	movhi	r2,1
    8194:	10841004 	addi	r2,r2,4160
    8198:	10c00035 	stwio	r3,0(r2)
    		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_BASE, G);
    819c:	d0e0dc17 	ldw	r3,-31888(gp)
    81a0:	00800074 	movhi	r2,1
    81a4:	10841404 	addi	r2,r2,4176
    81a8:	10c00035 	stwio	r3,0(r2)
    		IOWR_ALTERA_AVALON_PIO_DATA(BLUE_BASE, B);
    81ac:	d0e0db17 	ldw	r3,-31892(gp)
    81b0:	00800074 	movhi	r2,1
    81b4:	10841804 	addi	r2,r2,4192
    81b8:	10c00035 	stwio	r3,0(r2)
    		IOWR_ALTERA_AVALON_PIO_DATA(SW_BASE, SWITCHES);
    81bc:	d0e0da17 	ldw	r3,-31896(gp)
    81c0:	00800074 	movhi	r2,1
    81c4:	10841c04 	addi	r2,r2,4208
    81c8:	10c00035 	stwio	r3,0(r2)
//				printf("sd card not mounted, pls check for proper partition/n");
//			}
//		}


    }
    81cc:	003fd306 	br	811c <_gp+0xffff1f50>

000081d0 <Fat_Mount>:
FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
    
    if (FatDevice == FAT_SD_CARD){
    81d0:	2000011e 	bne	r4,zero,81d8 <Fat_Mount+0x8>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
    81d4:	00093901 	jmpi	9390 <fatMountSdcard>
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
        
}
    81d8:	0005883a 	mov	r2,zero
    81dc:	f800283a 	ret

000081e0 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
    81e0:	20000126 	beq	r4,zero,81e8 <Fat_Unmount+0x8>
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
    
    free(pVol);  
    81e4:	000c1341 	jmpi	c134 <free>
    81e8:	f800283a 	ret

000081ec <Fat_Type>:
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    if (pVol){
    81ec:	20000626 	beq	r4,zero,8208 <Fat_Type+0x1c>
        if (pVol->Partition_Type == PARTITION_FAT16)
    81f0:	20800317 	ldw	r2,12(r4)
    81f4:	00c00184 	movi	r3,6
    81f8:	10c00526 	beq	r2,r3,8210 <Fat_Type+0x24>
            Type = FAT_FAT16;
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
    81fc:	108002e0 	cmpeqi	r2,r2,11
    8200:	1004907a 	slli	r2,r2,1
    8204:	f800283a 	ret
    free(pVol);  
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    8208:	0005883a 	mov	r2,zero
    820c:	f800283a 	ret
    if (pVol){
        if (pVol->Partition_Type == PARTITION_FAT16)
            Type = FAT_FAT16;
    8210:	00800044 	movi	r2,1
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
    }
    return Type;        
}
    8214:	f800283a 	ret

00008218 <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
    8218:	20000726 	beq	r4,zero,8238 <Fat_FileBrowseBegin+0x20>
        return FALSE;
    if (!pVol->bMount)
    821c:	20800417 	ldw	r2,16(r4)
    8220:	10000626 	beq	r2,zero,823c <Fat_FileBrowseBegin+0x24>
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
    8224:	00bfffc4 	movi	r2,-1
    8228:	28800015 	stw	r2,0(r5)
    pFatBrowseHandle->hFat = hFat;
    822c:	29000115 	stw	r4,4(r5)
    return TRUE;
    8230:	00800044 	movi	r2,1
    8234:	f800283a 	ret
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    8238:	0005883a 	mov	r2,zero
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}
    823c:	f800283a 	ret

00008240 <fatSameLongFilename>:
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
    8240:	20c0000b 	ldhu	r3,0(r4)
    8244:	18000726 	beq	r3,zero,8264 <fatSameLongFilename+0x24>
        if (*p1 != *p2){
    8248:	2880000b 	ldhu	r2,0(r5)
            bSame = FALSE;
        }
        p1++;
    824c:	21000084 	addi	r4,r4,2
        p2++;
    8250:	29400084 	addi	r5,r5,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
    8254:	10bfffcc 	andi	r2,r2,65535
    8258:	18bff926 	beq	r3,r2,8240 <_gp+0xffff2074>
    825c:	0005883a 	mov	r2,zero
        p2++;
        
    }
    
    return bSame;
}
    8260:	f800283a 	ret
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
    8264:	2880000b 	ldhu	r2,0(r5)
    8268:	103ff71e 	bne	r2,zero,8248 <_gp+0xffff207c>
    826c:	00800044 	movi	r2,1
    8270:	f800283a 	ret

00008274 <fatComposeShortFilename>:
    
    return bSame;
}


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    8274:	280d883a 	mov	r6,r5
    int i,nPos=0;
    8278:	0005883a 	mov	r2,zero
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
    827c:	023ff7c4 	movi	r8,-33
    8280:	02400204 	movi	r9,8
    8284:	2087883a 	add	r3,r4,r2
    8288:	19c00003 	ldbu	r7,0(r3)
    828c:	3a06703a 	and	r3,r7,r8
    8290:	18c03fcc 	andi	r3,r3,255
    8294:	18c0201c 	xori	r3,r3,128
    8298:	18ffe004 	addi	r3,r3,-128
    829c:	18000426 	beq	r3,zero,82b0 <fatComposeShortFilename+0x3c>
        szFilename[nPos++] = pDir->Name[i++];
    82a0:	31c00005 	stb	r7,0(r6)
    82a4:	10800044 	addi	r2,r2,1
    82a8:	31800044 	addi	r6,r6,1

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
    82ac:	127ff51e 	bne	r2,r9,8284 <_gp+0xffff20b8>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
    82b0:	20c002c3 	ldbu	r3,11(r4)
    82b4:	18c00c0c 	andi	r3,r3,48
    82b8:	18001426 	beq	r3,zero,830c <fatComposeShortFilename+0x98>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
    82bc:	2887883a 	add	r3,r5,r2
    82c0:	01800b84 	movi	r6,46
    82c4:	19800005 	stb	r6,0(r3)
    82c8:	21000204 	addi	r4,r4,8
    82cc:	10c00044 	addi	r3,r2,1
    82d0:	12400104 	addi	r9,r2,4
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
    82d4:	023ff7c4 	movi	r8,-33
    82d8:	21c00003 	ldbu	r7,0(r4)
    82dc:	1805883a 	mov	r2,r3
    82e0:	3a0c703a 	and	r6,r7,r8
    82e4:	31803fcc 	andi	r6,r6,255
    82e8:	3180201c 	xori	r6,r6,128
    82ec:	31bfe004 	addi	r6,r6,-128
    82f0:	30000626 	beq	r6,zero,830c <fatComposeShortFilename+0x98>
    82f4:	18800044 	addi	r2,r3,1
            szFilename[nPos++] = pDir->Extension[i++];
    82f8:	28c7883a 	add	r3,r5,r3
    82fc:	19c00005 	stb	r7,0(r3)
    8300:	21000044 	addi	r4,r4,1
    8304:	1007883a 	mov	r3,r2
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
    8308:	127ff31e 	bne	r2,r9,82d8 <_gp+0xffff210c>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
    830c:	2885883a 	add	r2,r5,r2
    8310:	10000005 	stb	zero,0(r2)
    8314:	f800283a 	ret

00008318 <Fat_FileBrowseNext>:
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
    8318:	defff604 	addi	sp,sp,-40
    831c:	dd800615 	stw	r22,24(sp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
    8320:	25800117 	ldw	r22,4(r4)
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
    8324:	dfc00915 	stw	ra,36(sp)
    8328:	df000815 	stw	fp,32(sp)
    832c:	ddc00715 	stw	r23,28(sp)
    8330:	dd400515 	stw	r21,20(sp)
    8334:	dd000415 	stw	r20,16(sp)
    8338:	dcc00315 	stw	r19,12(sp)
    833c:	dc800215 	stw	r18,8(sp)
    8340:	dc400115 	stw	r17,4(sp)
    8344:	dc000015 	stw	r16,0(sp)
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
    
    if (!pVol)
    8348:	b000021e 	bne	r22,zero,8354 <Fat_FileBrowseNext+0x3c>
        return FALSE;    
    834c:	0005883a 	mov	r2,zero
    8350:	00008d06 	br	8588 <Fat_FileBrowseNext+0x270>
    
    if (!pVol->bMount)
    8354:	b0800417 	ldw	r2,16(r22)
    8358:	103ffc26 	beq	r2,zero,834c <_gp+0xffff2180>
    835c:	2823883a 	mov	r17,r5
    8360:	202b883a 	mov	r21,r4
    8364:	0025883a 	mov	r18,zero
    8368:	0027883a 	mov	r19,zero
        if (!pDir)
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
    836c:	05c003c4 	movi	r23,15
    8370:	070003c4 	movi	fp,15
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
    8374:	a9400017 	ldw	r5,0(r21)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
    8378:	b009883a 	mov	r4,r22
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
    837c:	29400044 	addi	r5,r5,1
    8380:	a9400015 	stw	r5,0(r21)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
    8384:	00090e80 	call	90e8 <fatFindDirectory>
    8388:	1021883a 	mov	r16,r2
        if (!pDir)
    838c:	10007626 	beq	r2,zero,8568 <Fat_FileBrowseNext+0x250>
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
    8390:	1009883a 	mov	r4,r2
    8394:	0008c7c0 	call	8c7c <fatIsValidDir>
    8398:	10007126 	beq	r2,zero,8560 <Fat_FileBrowseNext+0x248>
    839c:	8009883a 	mov	r4,r16
    83a0:	0008cdc0 	call	8cdc <fatIsUnusedDir>
    83a4:	10006e1e 	bne	r2,zero,8560 <Fat_FileBrowseNext+0x248>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
    83a8:	808002c3 	ldbu	r2,11(r16)
    83ac:	108003cc 	andi	r2,r2,15
    83b0:	1700251e 	bne	r2,fp,8448 <Fat_FileBrowseNext+0x130>
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
                        bError = TRUE;
                    }else{                        
                        // check order
                        if (OrderValue == 0){
    83b4:	90000c1e 	bne	r18,zero,83e8 <Fat_FileBrowseNext+0xd0>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
    83b8:	9800041e 	bne	r19,zero,83cc <Fat_FileBrowseNext+0xb4>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
    83bc:	84800003 	ldbu	r18,0(r16)
    83c0:	0029883a 	mov	r20,zero
    83c4:	94800fcc 	andi	r18,r18,63
    83c8:	00000106 	br	83d0 <Fat_FileBrowseNext+0xb8>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
                                bError = TRUE;
    83cc:	05000044 	movi	r20,1
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
    83d0:	01804004 	movi	r6,256
    83d4:	000b883a 	mov	r5,zero
    83d8:	8809883a 	mov	r4,r17
    83dc:	000c1700 	call	c170 <memset>
                                bError = TRUE;
                        }
                    }
                    
                    //                        
                    if (!bError){
    83e0:	a0000426 	beq	r20,zero,83f4 <Fat_FileBrowseNext+0xdc>
    83e4:	00006006 	br	8568 <Fat_FileBrowseNext+0x250>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
    83e8:	80800003 	ldbu	r2,0(r16)
    83ec:	10800fcc 	andi	r2,r2,63
    83f0:	90805d1e 	bne	r18,r2,8568 <Fat_FileBrowseNext+0x250>
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
    83f4:	94bfffc4 	addi	r18,r18,-1
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
    83f8:	01400684 	movi	r5,26
    83fc:	9009883a 	mov	r4,r18
    8400:	000ac100 	call	ac10 <__mulsi3>
    8404:	01800284 	movi	r6,10
    8408:	81400044 	addi	r5,r16,1
    840c:	8889883a 	add	r4,r17,r2
    8410:	1027883a 	mov	r19,r2
    8414:	000c1480 	call	c148 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
    8418:	99000284 	addi	r4,r19,10
    841c:	01800304 	movi	r6,12
    8420:	81400384 	addi	r5,r16,14
    8424:	8909883a 	add	r4,r17,r4
    8428:	000c1480 	call	c148 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
    842c:	99000584 	addi	r4,r19,22
    8430:	01800104 	movi	r6,4
    8434:	81400704 	addi	r5,r16,28
    8438:	8909883a 	add	r4,r17,r4
    843c:	000c1480 	call	c148 <memcpy>
                    }
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
    8440:	04c00044 	movi	r19,1
    8444:	00004606 	br	8560 <Fat_FileBrowseNext+0x248>
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
                    }                        
                }else{
                    if (bLongFilename){
    8448:	98000626 	beq	r19,zero,8464 <Fat_FileBrowseNext+0x14c>
                        pFileContext->Attribute = ATTR_LONG_NAME;
    844c:	8dc04505 	stb	r23,276(r17)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
    8450:	808002c3 	ldbu	r2,11(r16)
    8454:	04c00044 	movi	r19,1
    8458:	10800c0c 	andi	r2,r2,48
    845c:	10004426 	beq	r2,zero,8570 <Fat_FileBrowseNext+0x258>
    8460:	00000306 	br	8470 <Fat_FileBrowseNext+0x158>
                            bError = TRUE;
                        else    
                            bFind = TRUE;
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
    8464:	880b883a 	mov	r5,r17
    8468:	8009883a 	mov	r4,r16
    846c:	00082740 	call	8274 <fatComposeShortFilename>
                        bFind = TRUE;
                    }
                    
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
    8470:	8cc04015 	stw	r19,256(r17)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
    8474:	808002c3 	ldbu	r2,11(r16)
    8478:	1004d17a 	srli	r2,r2,5
    847c:	1080004c 	andi	r2,r2,1
    8480:	88804115 	stw	r2,260(r17)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
    8484:	808002c3 	ldbu	r2,11(r16)
    8488:	1004d13a 	srli	r2,r2,4
    848c:	1080004c 	andi	r2,r2,1
    8490:	88804215 	stw	r2,264(r17)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
    8494:	808002c3 	ldbu	r2,11(r16)
    8498:	1004d0fa 	srli	r2,r2,3
    849c:	1080004c 	andi	r2,r2,1
    84a0:	88804315 	stw	r2,268(r17)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
    84a4:	a8800017 	ldw	r2,0(r21)
    84a8:	88804415 	stw	r2,272(r17)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
    84ac:	808002c3 	ldbu	r2,11(r16)
    84b0:	88804505 	stb	r2,276(r17)
                        pFileContext->CreateTime = pDir->CreateTime;
    84b4:	808003c3 	ldbu	r2,15(r16)
    84b8:	80c00383 	ldbu	r3,14(r16)
    84bc:	1004923a 	slli	r2,r2,8
    84c0:	10c4b03a 	or	r2,r2,r3
    84c4:	8880458d 	sth	r2,278(r17)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
    84c8:	808004c3 	ldbu	r2,19(r16)
    84cc:	80c00483 	ldbu	r3,18(r16)
    84d0:	1004923a 	slli	r2,r2,8
    84d4:	10c4b03a 	or	r2,r2,r3
    84d8:	8880468d 	sth	r2,282(r17)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
    84dc:	80800543 	ldbu	r2,21(r16)
    84e0:	80c00503 	ldbu	r3,20(r16)
    84e4:	1004923a 	slli	r2,r2,8
    84e8:	10c4b03a 	or	r2,r2,r3
    84ec:	8880470d 	sth	r2,284(r17)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
    84f0:	808005c3 	ldbu	r2,23(r16)
    84f4:	80c00583 	ldbu	r3,22(r16)
    84f8:	1004923a 	slli	r2,r2,8
    84fc:	10c4b03a 	or	r2,r2,r3
    8500:	8880478d 	sth	r2,286(r17)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
    8504:	80800643 	ldbu	r2,25(r16)
    8508:	80c00603 	ldbu	r3,24(r16)
    850c:	1004923a 	slli	r2,r2,8
    8510:	10c4b03a 	or	r2,r2,r3
    8514:	8880480d 	sth	r2,288(r17)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
    8518:	808006c3 	ldbu	r2,27(r16)
    851c:	80c00683 	ldbu	r3,26(r16)
    8520:	1004923a 	slli	r2,r2,8
    8524:	10c4b03a 	or	r2,r2,r3
    8528:	8880488d 	sth	r2,290(r17)
                        pFileContext->FileSize = pDir->FileSize;
    852c:	80c00743 	ldbu	r3,29(r16)
    8530:	80800783 	ldbu	r2,30(r16)
    8534:	81400703 	ldbu	r5,28(r16)
    8538:	1806923a 	slli	r3,r3,8
    853c:	1004943a 	slli	r2,r2,16
    8540:	1948b03a 	or	r4,r3,r5
    8544:	1106b03a 	or	r3,r2,r4
    8548:	808007c3 	ldbu	r2,31(r16)
    854c:	1004963a 	slli	r2,r2,24
    8550:	10c4b03a 	or	r2,r2,r3
    8554:	88804915 	stw	r2,292(r17)
    8558:	00800044 	movi	r2,1
    855c:	00000a06 	br	8588 <Fat_FileBrowseNext+0x270>
    8560:	0029883a 	mov	r20,zero
    8564:	00000306 	br	8574 <Fat_FileBrowseNext+0x25c>
    8568:	05000044 	movi	r20,1
    856c:	00000106 	br	8574 <Fat_FileBrowseNext+0x25c>
                    }                        
                }else{
                    if (bLongFilename){
                        pFileContext->Attribute = ATTR_LONG_NAME;
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
                            bError = TRUE;
    8570:	9829883a 	mov	r20,r19
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
    8574:	8009883a 	mov	r4,r16
    8578:	0008c700 	call	8c70 <fatIsLastDir>
    857c:	103f731e 	bne	r2,zero,834c <_gp+0xffff2180>
    8580:	a03f7c26 	beq	r20,zero,8374 <_gp+0xffff21a8>
    8584:	003f7106 	br	834c <_gp+0xffff2180>
    
    return bFind;
    
}
    8588:	dfc00917 	ldw	ra,36(sp)
    858c:	df000817 	ldw	fp,32(sp)
    8590:	ddc00717 	ldw	r23,28(sp)
    8594:	dd800617 	ldw	r22,24(sp)
    8598:	dd400517 	ldw	r21,20(sp)
    859c:	dd000417 	ldw	r20,16(sp)
    85a0:	dcc00317 	ldw	r19,12(sp)
    85a4:	dc800217 	ldw	r18,8(sp)
    85a8:	dc400117 	ldw	r17,4(sp)
    85ac:	dc000017 	ldw	r16,0(sp)
    85b0:	dec00a04 	addi	sp,sp,40
    85b4:	f800283a 	ret

000085b8 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
    85b8:	deffb204 	addi	sp,sp,-312
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    85bc:	d9404a04 	addi	r5,sp,296
    return bFind;
    
}


unsigned int Fat_FileCount(FAT_HANDLE Fat){
    85c0:	dc004c15 	stw	r16,304(sp)
    85c4:	dfc04d15 	stw	ra,308(sp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    85c8:	00082180 	call	8218 <Fat_FileBrowseBegin>
    85cc:	0021883a 	mov	r16,zero
    85d0:	10000626 	beq	r2,zero,85ec <Fat_FileCount+0x34>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
    85d4:	d80b883a 	mov	r5,sp
    85d8:	d9004a04 	addi	r4,sp,296
    85dc:	00083180 	call	8318 <Fat_FileBrowseNext>
    85e0:	10000226 	beq	r2,zero,85ec <Fat_FileCount+0x34>
            nCount++;
    85e4:	84000044 	addi	r16,r16,1
    85e8:	003ffa06 	br	85d4 <_gp+0xffff2408>
    }
    
    return nCount;
}
    85ec:	8005883a 	mov	r2,r16
    85f0:	dfc04d17 	ldw	ra,308(sp)
    85f4:	dc004c17 	ldw	r16,304(sp)
    85f8:	dec04e04 	addi	sp,sp,312
    85fc:	f800283a 	ret

00008600 <Fat_FileOpen>:
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    8600:	deffb004 	addi	sp,sp,-320
    8604:	dc004c15 	stw	r16,304(sp)
    8608:	2821883a 	mov	r16,r5
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    860c:	d9404a04 	addi	r5,sp,296
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    8610:	dc804e15 	stw	r18,312(sp)
    8614:	dfc04f15 	stw	ra,316(sp)
    8618:	dc404d15 	stw	r17,308(sp)
    861c:	2025883a 	mov	r18,r4
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    8620:	00082180 	call	8218 <Fat_FileBrowseBegin>
    8624:	1000081e 	bne	r2,zero,8648 <Fat_FileOpen+0x48>
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    8628:	0021883a 	mov	r16,zero
    862c:	00001e06 	br	86a8 <Fat_FileOpen+0xa8>
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
    8630:	d8804017 	ldw	r2,256(sp)
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8634:	800b883a 	mov	r5,r16
    8638:	d809883a 	mov	r4,sp
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
    863c:	10000726 	beq	r2,zero,865c <Fat_FileOpen+0x5c>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8640:	00082400 	call	8240 <fatSameLongFilename>
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
    8644:	1000081e 	bne	r2,zero,8668 <Fat_FileOpen+0x68>
    8648:	d80b883a 	mov	r5,sp
    864c:	d9004a04 	addi	r4,sp,296
    8650:	00083180 	call	8318 <Fat_FileBrowseNext>
    8654:	103ff61e 	bne	r2,zero,8630 <_gp+0xffff2464>
    8658:	003ff306 	br	8628 <_gp+0xffff245c>
            if (FileContext.bLongFilename){
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
    865c:	000c5800 	call	c580 <strcasecmp>
    FAT_FILE_INFO *pFile = 0;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8660:	1005003a 	cmpeq	r2,r2,zero
    8664:	003ff706 	br	8644 <_gp+0xffff2478>
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
            pFile = malloc(sizeof(FAT_FILE_INFO));
    8668:	01005004 	movi	r4,320
    866c:	000c1200 	call	c120 <malloc>
    8670:	1021883a 	mov	r16,r2
            if (pFile){
    8674:	10000c26 	beq	r2,zero,86a8 <Fat_FileOpen+0xa8>
                pFile->OpenAttribute = FILE_OPEN_READ; 
    8678:	04400044 	movi	r17,1
    867c:	84400115 	stw	r17,4(r16)
                pFile->SeekPos = 0;
    8680:	80000215 	stw	zero,8(r16)
                pFile->Directory = FileContext;
    8684:	01804a04 	movi	r6,296
    8688:	d80b883a 	mov	r5,sp
    868c:	81000504 	addi	r4,r16,20
    8690:	000c1480 	call	c148 <memcpy>
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
    8694:	d880488b 	ldhu	r2,290(sp)
            pFile = malloc(sizeof(FAT_FILE_INFO));
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
    8698:	84400015 	stw	r17,0(r16)
                pFile->Cluster = FileContext.FirstLogicalCluster;
                pFile->ClusterSeq = 0;
    869c:	80000415 	stw	zero,16(r16)
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
    86a0:	80800315 	stw	r2,12(r16)
                pFile->ClusterSeq = 0;
                pFile->Fat = Fat;
    86a4:	84804f15 	stw	r18,316(r16)
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
}
    86a8:	8005883a 	mov	r2,r16
    86ac:	dfc04f17 	ldw	ra,316(sp)
    86b0:	dc804e17 	ldw	r18,312(sp)
    86b4:	dc404d17 	ldw	r17,308(sp)
    86b8:	dc004c17 	ldw	r16,304(sp)
    86bc:	dec05004 	addi	sp,sp,320
    86c0:	f800283a 	ret

000086c4 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (f->IsOpened)
    86c4:	20800017 	ldw	r2,0(r4)
    86c8:	10000226 	beq	r2,zero,86d4 <Fat_FileSize+0x10>
        return f->Directory.FileSize;
    86cc:	20804e17 	ldw	r2,312(r4)
    86d0:	f800283a 	ret
    return 0;        
    86d4:	0005883a 	mov	r2,zero
}
    86d8:	f800283a 	ret

000086dc <Fat_FileRead>:
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
    86dc:	2000a126 	beq	r4,zero,8964 <Fat_FileRead+0x288>
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
    86e0:	defff304 	addi	sp,sp,-52
    86e4:	dc000315 	stw	r16,12(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
    86e8:	24004f17 	ldw	r16,316(r4)
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
    86ec:	dfc00c15 	stw	ra,48(sp)
    86f0:	df000b15 	stw	fp,44(sp)
    86f4:	ddc00a15 	stw	r23,40(sp)
    86f8:	dd800915 	stw	r22,36(sp)
    86fc:	dd400815 	stw	r21,32(sp)
    8700:	dd000715 	stw	r20,28(sp)
    8704:	dcc00615 	stw	r19,24(sp)
    8708:	dc800515 	stw	r18,20(sp)
    870c:	dc400415 	stw	r17,16(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
    8710:	80008726 	beq	r16,zero,8930 <Fat_FileRead+0x254>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
    8714:	20800017 	ldw	r2,0(r4)
    8718:	10008326 	beq	r2,zero,8928 <Fat_FileRead+0x24c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    871c:	85000c17 	ldw	r20,48(r16)
    8720:	d9800015 	stw	r6,0(sp)
    8724:	d9400115 	stw	r5,4(sp)
    Pos = f->SeekPos;
    if (BytesPerCluster == 32768){
    8728:	00a00014 	movui	r2,32768
    872c:	2039883a 	mov	fp,r4
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
    8730:	24800217 	ldw	r18,8(r4)
    8734:	25800417 	ldw	r22,16(r4)
    if (BytesPerCluster == 32768){
    8738:	a080031e 	bne	r20,r2,8748 <Fat_FileRead+0x6c>
        nClusterSeq = Pos >> 15;
    873c:	902ed3fa 	srli	r23,r18,15
        Pos -= (f->ClusterSeq << 15);
    8740:	b00693fa 	slli	r3,r22,15
    8744:	00000406 	br	8758 <Fat_FileRead+0x7c>
    }else if (BytesPerCluster == 16384){
    8748:	00900004 	movi	r2,16384
    874c:	a080041e 	bne	r20,r2,8760 <Fat_FileRead+0x84>
        nClusterSeq = Pos >> 14;
    8750:	902ed3ba 	srli	r23,r18,14
        Pos -= (f->ClusterSeq << 14);
    8754:	b00693ba 	slli	r3,r22,14
    8758:	90e3c83a 	sub	r17,r18,r3
    875c:	00000d06 	br	8794 <Fat_FileRead+0xb8>
    }else if (BytesPerCluster == 2048){
    8760:	00820004 	movi	r2,2048
    8764:	a080031e 	bne	r20,r2,8774 <Fat_FileRead+0x98>
        nClusterSeq = Pos >> 11;
    8768:	902ed2fa 	srli	r23,r18,11
        Pos -= (f->ClusterSeq << 11);
    876c:	b00692fa 	slli	r3,r22,11
    8770:	003ff906 	br	8758 <_gp+0xffff258c>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
    8774:	a00b883a 	mov	r5,r20
    8778:	9009883a 	mov	r4,r18
    877c:	000ab540 	call	ab54 <__udivsi3>
        Pos -= f->ClusterSeq*BytesPerCluster;
    8780:	b00b883a 	mov	r5,r22
    8784:	a009883a 	mov	r4,r20
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
        nClusterSeq = Pos >> 11;
        Pos -= (f->ClusterSeq << 11);
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
    8788:	102f883a 	mov	r23,r2
        Pos -= f->ClusterSeq*BytesPerCluster;
    878c:	000ac100 	call	ac10 <__mulsi3>
    8790:	90a3c83a 	sub	r17,r18,r2
    }    
        
       
    Cluster = f->Cluster;
    8794:	e4c00317 	ldw	r19,12(fp)
    8798:	05400044 	movi	r21,1
    if (nClusterSeq != f->ClusterSeq){
    879c:	bd800d1e 	bne	r23,r22,87d4 <Fat_FileRead+0xf8>
    87a0:	00000d06 	br	87d8 <Fat_FileRead+0xfc>
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
    87a4:	a8000c26 	beq	r21,zero,87d8 <Fat_FileRead+0xfc>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
    87a8:	980b883a 	mov	r5,r19
    87ac:	8009883a 	mov	r4,r16
    87b0:	0008d800 	call	8d80 <fatNextCluster>
            if (NextCluster == 0){
    87b4:	10000b26 	beq	r2,zero,87e4 <Fat_FileRead+0x108>
    87b8:	1027883a 	mov	r19,r2
    87bc:	05400044 	movi	r21,1
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
            f->Cluster = Cluster;
            f->ClusterSeq++; 
    87c0:	e0800417 	ldw	r2,16(fp)
                bSuccess = FALSE;
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
    87c4:	8d23c83a 	sub	r17,r17,r20
            f->Cluster = Cluster;
    87c8:	e4c00315 	stw	r19,12(fp)
            f->ClusterSeq++; 
    87cc:	10800044 	addi	r2,r2,1
    87d0:	e0800415 	stw	r2,16(fp)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
    87d4:	8d3ff32e 	bgeu	r17,r20,87a4 <_gp+0xffff25d8>
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
            NextCluster = fatNextCluster(pVol, Cluster); 
            if (NextCluster == 0){
    87d8:	002d883a 	mov	r22,zero
    87dc:	85c01004 	addi	r23,r16,64
    87e0:	00001006 	br	8824 <Fat_FileRead+0x148>
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
            if (NextCluster == 0){
                bSuccess = FALSE;
    87e4:	002b883a 	mov	r21,zero
    87e8:	003ff506 	br	87c0 <_gp+0xffff25f4>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
    87ec:	a8005026 	beq	r21,zero,8930 <Fat_FileRead+0x254>
        if (pVol->BPB_SecPerCluster == 32)
    87f0:	81400717 	ldw	r5,28(r16)
    87f4:	00800804 	movi	r2,32
    87f8:	993fff84 	addi	r4,r19,-2
    87fc:	84800f17 	ldw	r18,60(r16)
    8800:	28800b1e 	bne	r5,r2,8830 <Fat_FileRead+0x154>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    8804:	2008917a 	slli	r4,r4,5
    8808:	24a5883a 	add	r18,r4,r18
                            Pos = 0;
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
                        nReadCount += nCopyCount;
                        if (Pos > 0)
                            Pos = 0;
    880c:	9029883a 	mov	r20,r18
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
    8810:	81000717 	ldw	r4,28(r16)
    8814:	a485c83a 	sub	r2,r20,r18
    8818:	d8c00017 	ldw	r3,0(sp)
    881c:	11002e2e 	bgeu	r2,r4,88d8 <Fat_FileRead+0x1fc>
    8820:	b0c00a36 	bltu	r22,r3,884c <Fat_FileRead+0x170>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
    8824:	d8c00017 	ldw	r3,0(sp)
    8828:	b0fff036 	bltu	r22,r3,87ec <_gp+0xffff2620>
    882c:	00003706 	br	890c <Fat_FileRead+0x230>
        if (pVol->BPB_SecPerCluster == 32)
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
    8830:	00c01004 	movi	r3,64
    8834:	28c0021e 	bne	r5,r3,8840 <Fat_FileRead+0x164>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    8838:	200891ba 	slli	r4,r4,6
    883c:	003ff206 	br	8808 <_gp+0xffff263c>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    8840:	000ac100 	call	ac10 <__mulsi3>
    8844:	14a5883a 	add	r18,r2,r18
    8848:	003ff006 	br	880c <_gp+0xffff2640>
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
    884c:	a8002326 	beq	r21,zero,88dc <Fat_FileRead+0x200>
            if (Pos >= pVol->BPB_BytsPerSec){
    8850:	80800617 	ldw	r2,24(r16)
    8854:	88800236 	bltu	r17,r2,8860 <Fat_FileRead+0x184>
                Pos -= pVol->BPB_BytsPerSec;
    8858:	88a3c83a 	sub	r17,r17,r2
    885c:	00001c06 	br	88d0 <Fat_FileRead+0x1f4>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
    8860:	a00b883a 	mov	r5,r20
    8864:	8009883a 	mov	r4,r16
    8868:	0008d140 	call	8d14 <fatReadSecter>
    886c:	102b883a 	mov	r21,r2
                
                if (bSuccess){
    8870:	10001726 	beq	r2,zero,88d0 <Fat_FileRead+0x1f4>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
    8874:	82000617 	ldw	r8,24(r16)
                    if (Pos)
    8878:	88000126 	beq	r17,zero,8880 <Fat_FileRead+0x1a4>
                        nCopyCount -= Pos;
    887c:	4451c83a 	sub	r8,r8,r17
                    if (nCopyCount > (nBufferSize-nReadCount))
    8880:	d8c00017 	ldw	r3,0(sp)
    8884:	1d85c83a 	sub	r2,r3,r22
    8888:	1200012e 	bgeu	r2,r8,8890 <Fat_FileRead+0x1b4>
                        nCopyCount = nBufferSize-nReadCount;
    888c:	1011883a 	mov	r8,r2
    8890:	d8c00117 	ldw	r3,4(sp)
                    if (nCopyCount == 512){
    8894:	00808004 	movi	r2,512
    8898:	1d89883a 	add	r4,r3,r22
    889c:	4080051e 	bne	r8,r2,88b4 <Fat_FileRead+0x1d8>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
    88a0:	100d883a 	mov	r6,r2
    88a4:	b80b883a 	mov	r5,r23
    88a8:	000c1480 	call	c148 <memcpy>
                        nReadCount += nCopyCount;
    88ac:	b5808004 	addi	r22,r22,512
    88b0:	00000606 	br	88cc <Fat_FileRead+0x1f0>
                        if (Pos > 0)
                            Pos = 0;
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
    88b4:	400d883a 	mov	r6,r8
    88b8:	bc4b883a 	add	r5,r23,r17
    88bc:	da000215 	stw	r8,8(sp)
    88c0:	000c1480 	call	c148 <memcpy>
                        nReadCount += nCopyCount;
    88c4:	da000217 	ldw	r8,8(sp)
    88c8:	b22d883a 	add	r22,r22,r8
                        if (Pos > 0)
                            Pos = 0;
    88cc:	0023883a 	mov	r17,zero
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
    88d0:	a5000044 	addi	r20,r20,1
    88d4:	003fce06 	br	8810 <_gp+0xffff2644>
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
    88d8:	b0ffd22e 	bgeu	r22,r3,8824 <_gp+0xffff2658>
            NextCluster = fatNextCluster(pVol, Cluster); 
    88dc:	980b883a 	mov	r5,r19
    88e0:	8009883a 	mov	r4,r16
    88e4:	0008d800 	call	8d80 <fatNextCluster>
            if (NextCluster == 0){
    88e8:	10000226 	beq	r2,zero,88f4 <Fat_FileRead+0x218>
    88ec:	1027883a 	mov	r19,r2
    88f0:	00000106 	br	88f8 <Fat_FileRead+0x21c>
                bSuccess = FALSE;
    88f4:	002b883a 	mov	r21,zero
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
            }else{
                Cluster = NextCluster;
            }    
            //    
            f->ClusterSeq++; 
    88f8:	e0800417 	ldw	r2,16(fp)
            f->Cluster = Cluster;
    88fc:	e4c00315 	stw	r19,12(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
            }else{
                Cluster = NextCluster;
            }    
            //    
            f->ClusterSeq++; 
    8900:	10800044 	addi	r2,r2,1
    8904:	e0800415 	stw	r2,16(fp)
    8908:	003fc606 	br	8824 <_gp+0xffff2658>
            f->Cluster = Cluster;
        }                    
    }
    
    if (bSuccess){
    890c:	a8000826 	beq	r21,zero,8930 <Fat_FileRead+0x254>
        f->SeekPos += nBufferSize;
    8910:	e1800217 	ldw	r6,8(fp)
    8914:	d8c00017 	ldw	r3,0(sp)
    8918:	a805883a 	mov	r2,r21
    891c:	30e3883a 	add	r17,r6,r3
    8920:	e4400215 	stw	r17,8(fp)
    8924:	00000306 	br	8934 <Fat_FileRead+0x258>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    8928:	00800044 	movi	r2,1
    892c:	00000106 	br	8934 <Fat_FileRead+0x258>
    8930:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
    8934:	dfc00c17 	ldw	ra,48(sp)
    8938:	df000b17 	ldw	fp,44(sp)
    893c:	ddc00a17 	ldw	r23,40(sp)
    8940:	dd800917 	ldw	r22,36(sp)
    8944:	dd400817 	ldw	r21,32(sp)
    8948:	dd000717 	ldw	r20,28(sp)
    894c:	dcc00617 	ldw	r19,24(sp)
    8950:	dc800517 	ldw	r18,20(sp)
    8954:	dc400417 	ldw	r17,16(sp)
    8958:	dc000317 	ldw	r16,12(sp)
    895c:	dec00d04 	addi	sp,sp,52
    8960:	f800283a 	ret
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
        return FALSE;
    8964:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
    8968:	f800283a 	ret

0000896c <Fat_FileSeek>:
bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
    896c:	20001826 	beq	r4,zero,89d0 <Fat_FileSeek+0x64>
    8970:	20804f17 	ldw	r2,316(r4)
    8974:	10001626 	beq	r2,zero,89d0 <Fat_FileSeek+0x64>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened)
    8978:	20800017 	ldw	r2,0(r4)
    897c:	10001526 	beq	r2,zero,89d4 <Fat_FileSeek+0x68>
        return FALSE;
        
    switch(SeekPos){
    8980:	00800044 	movi	r2,1
    8984:	28800626 	beq	r5,r2,89a0 <Fat_FileSeek+0x34>
    8988:	28000a26 	beq	r5,zero,89b4 <Fat_FileSeek+0x48>
    898c:	00c00084 	movi	r3,2
    8990:	28c00a1e 	bne	r5,r3,89bc <Fat_FileSeek+0x50>
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
    8994:	20c04e17 	ldw	r3,312(r4)
    8998:	198d883a 	add	r6,r3,r6
    899c:	00000506 	br	89b4 <Fat_FileSeek+0x48>
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
    89a0:	20800217 	ldw	r2,8(r4)
    89a4:	118d883a 	add	r6,r2,r6
    89a8:	21800215 	stw	r6,8(r4)


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
    89ac:	2805883a 	mov	r2,r5
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
    89b0:	00000306 	br	89c0 <Fat_FileSeek+0x54>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
    89b4:	21800215 	stw	r6,8(r4)
            break;
    89b8:	00000106 	br	89c0 <Fat_FileSeek+0x54>
        default:
            bSuccess = FALSE;
    89bc:	0005883a 	mov	r2,zero
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    89c0:	20c04d8b 	ldhu	r3,310(r4)
    f->ClusterSeq = 0;
    89c4:	20000415 	stw	zero,16(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    89c8:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
    89cc:	f800283a 	ret
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
        return FALSE;
    89d0:	0005883a 	mov	r2,zero
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
    
    return bSuccess;
    
}
    89d4:	f800283a 	ret

000089d8 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (!f)
    89d8:	20000126 	beq	r4,zero,89e0 <Fat_FileClose+0x8>
        return;
        
    free(f);        
    89dc:	000c1341 	jmpi	c134 <free>
    89e0:	f800283a 	ret

000089e4 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    89e4:	deffb004 	addi	sp,sp,-320
    89e8:	dc004d15 	stw	r16,308(sp)
    89ec:	2821883a 	mov	r16,r5
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    89f0:	d9404a04 	addi	r5,sp,296





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    89f4:	dc404e15 	stw	r17,312(sp)
    89f8:	dfc04f15 	stw	ra,316(sp)
    89fc:	2023883a 	mov	r17,r4
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
    8a00:	00082180 	call	8218 <Fat_FileBrowseBegin>
    8a04:	10001126 	beq	r2,zero,8a4c <Fat_FileExist+0x68>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
    8a08:	d80b883a 	mov	r5,sp
    8a0c:	d9004a04 	addi	r4,sp,296
    8a10:	00083180 	call	8318 <Fat_FileBrowseNext>
    8a14:	10000926 	beq	r2,zero,8a3c <Fat_FileExist+0x58>
            if (FileContext.bLongFilename){
    8a18:	d8804017 	ldw	r2,256(sp)
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8a1c:	800b883a 	mov	r5,r16
    8a20:	d809883a 	mov	r4,sp
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
    8a24:	10000226 	beq	r2,zero,8a30 <Fat_FileExist+0x4c>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8a28:	00082400 	call	8240 <fatSameLongFilename>
    8a2c:	00000206 	br	8a38 <Fat_FileExist+0x54>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
    8a30:	000c5800 	call	c580 <strcasecmp>
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
    8a34:	1005003a 	cmpeq	r2,r2,zero
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
    8a38:	103ff326 	beq	r2,zero,8a08 <_gp+0xffff283c>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
    8a3c:	8809883a 	mov	r4,r17
    8a40:	d8804c15 	stw	r2,304(sp)
    8a44:	00089d80 	call	89d8 <Fat_FileClose>
    8a48:	d8804c17 	ldw	r2,304(sp)
    }
    return bFind;            
}    
    8a4c:	dfc04f17 	ldw	ra,316(sp)
    8a50:	dc404e17 	ldw	r17,312(sp)
    8a54:	dc004d17 	ldw	r16,308(sp)
    8a58:	dec05004 	addi	sp,sp,320
    8a5c:	f800283a 	ret

00008a60 <Fat_SpeedTest>:
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    float fMegaBytePerSec = 0;
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
    8a60:	20004726 	beq	r4,zero,8b80 <Fat_SpeedTest+0x120>
    free(f);        
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    8a64:	deff7a04 	addi	sp,sp,-536
    8a68:	dc008015 	stw	r16,512(sp)
    8a6c:	2021883a 	mov	r16,r4
    8a70:	2809883a 	mov	r4,r5
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    8a74:	0140fa04 	movi	r5,1000
    free(f);        
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    8a78:	dfc08515 	stw	ra,532(sp)
    8a7c:	dcc08315 	stw	r19,524(sp)
    8a80:	dc808215 	stw	r18,520(sp)
    8a84:	dc408115 	stw	r17,516(sp)
    8a88:	dd008415 	stw	r20,528(sp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    8a8c:	000ac100 	call	ac10 <__mulsi3>
    8a90:	d160e617 	ldw	r5,-31848(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    8a94:	d4e0e517 	ldw	r19,-31852(gp)
    8a98:	d4a0e517 	ldw	r18,-31852(gp)
    8a9c:	1009883a 	mov	r4,r2
    8aa0:	000ab540 	call	ab54 <__udivsi3>
    8aa4:	14a5883a 	add	r18,r2,r18


float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    bool bSuccess = TRUE;
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    8aa8:	0023883a 	mov	r17,zero
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    bool bSuccess = TRUE;
    8aac:	00800044 	movi	r2,1
    8ab0:	d0e0e517 	ldw	r3,-31852(gp)
    8ab4:	8828927a 	slli	r20,r17,9
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
    8ab8:	1c800a2e 	bgeu	r3,r18,8ae4 <Fat_SpeedTest+0x84>
    8abc:	1000021e 	bne	r2,zero,8ac8 <Fat_SpeedTest+0x68>
    int nSecter = 0;
    float fMegaBytePerSec = 0;
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    8ac0:	0005883a 	mov	r2,zero
    8ac4:	00002606 	br	8b60 <Fat_SpeedTest+0x100>
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
    8ac8:	80800117 	ldw	r2,4(r16)
    8acc:	81000017 	ldw	r4,0(r16)
    8ad0:	880b883a 	mov	r5,r17
    8ad4:	d80d883a 	mov	r6,sp
    8ad8:	103ee83a 	callr	r2
        nSecter++;
    8adc:	8c400044 	addi	r17,r17,1
    8ae0:	003ff306 	br	8ab0 <_gp+0xffff28e4>
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
    8ae4:	103ff626 	beq	r2,zero,8ac0 <_gp+0xffff28f4>
        time_elapsed = alt_nticks() - time_start;
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
    8ae8:	d120e617 	ldw	r4,-31848(gp)
    8aec:	d460e517 	ldw	r17,-31852(gp)
    8af0:	000b4a80 	call	b4a8 <__floatunsisf>
    8af4:	a009883a 	mov	r4,r20
    8af8:	1021883a 	mov	r16,r2
    8afc:	000b4a80 	call	b4a8 <__floatunsisf>
    8b00:	100b883a 	mov	r5,r2
    8b04:	8009883a 	mov	r4,r16
    8b08:	000b0780 	call	b078 <__mulsf3>
    8b0c:	8cc9c83a 	sub	r4,r17,r19
    8b10:	1021883a 	mov	r16,r2
    8b14:	000b4a80 	call	b4a8 <__floatunsisf>
    8b18:	100b883a 	mov	r5,r2
    8b1c:	8009883a 	mov	r4,r16
    8b20:	000ac380 	call	ac38 <__divsf3>
    8b24:	1009883a 	mov	r4,r2
    8b28:	000be040 	call	be04 <__extendsfdf2>
    8b2c:	000d883a 	mov	r6,zero
    8b30:	01cfd434 	movhi	r7,16208
    8b34:	1009883a 	mov	r4,r2
    8b38:	180b883a 	mov	r5,r3
    8b3c:	000b5980 	call	b598 <__muldf3>
    8b40:	1009883a 	mov	r4,r2
    8b44:	180b883a 	mov	r5,r3
    8b48:	000d883a 	mov	r6,zero
    8b4c:	01cfd434 	movhi	r7,16208
    8b50:	000b5980 	call	b598 <__muldf3>
    8b54:	1009883a 	mov	r4,r2
    8b58:	180b883a 	mov	r5,r3
    8b5c:	000bf140 	call	bf14 <__truncdfsf2>
    }        
    return fMegaBytePerSec;
    
   
}
    8b60:	dfc08517 	ldw	ra,532(sp)
    8b64:	dd008417 	ldw	r20,528(sp)
    8b68:	dcc08317 	ldw	r19,524(sp)
    8b6c:	dc808217 	ldw	r18,520(sp)
    8b70:	dc408117 	ldw	r17,516(sp)
    8b74:	dc008017 	ldw	r16,512(sp)
    8b78:	dec08604 	addi	sp,sp,536
    8b7c:	f800283a 	ret
    int nSecter = 0;
    float fMegaBytePerSec = 0;
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    8b80:	0005883a 	mov	r2,zero
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
    }        
    return fMegaBytePerSec;
    
   
}
    8b84:	f800283a 	ret

00008b88 <SD_ReadBlock512>:
}

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    8b88:	2809883a 	mov	r4,r5
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
    8b8c:	300b883a 	mov	r5,r6
    8b90:	0009d181 	jmpi	9d18 <SDLIB_ReadBlock512>

00008b94 <SD_WriteBlock512>:
}

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    8b94:	2809883a 	mov	r4,r5
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
    8b98:	300b883a 	mov	r5,r6
    8b9c:	0009d701 	jmpi	9d70 <SDLIB_WriteBlock512>

00008ba0 <fat16ClusterType>:



CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    8ba0:	213fffcc 	andi	r4,r4,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
    8ba4:	20ffffc4 	addi	r3,r4,-1
    8ba8:	017ffb94 	movui	r5,65518
    8bac:	28c00b2e 	bgeu	r5,r3,8bdc <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
    8bb0:	017ffdd4 	movui	r5,65527
    8bb4:	29000b36 	bltu	r5,r4,8be4 <fat16ClusterType+0x44>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
    8bb8:	20000c26 	beq	r4,zero,8bec <fat16ClusterType+0x4c>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
    8bbc:	00fffff4 	movhi	r3,65535
    8bc0:	18c00404 	addi	r3,r3,16
    8bc4:	20c7883a 	add	r3,r4,r3
    8bc8:	01800184 	movi	r6,6
    8bcc:	30c0092e 	bgeu	r6,r3,8bf4 <fat16ClusterType+0x54>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFF7)
    8bd0:	2140091e 	bne	r4,r5,8bf8 <fat16ClusterType+0x58>
        Type = CLUSTER_BAD;
    8bd4:	00800084 	movi	r2,2
    8bd8:	f800283a 	ret
CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
        Type = CLUSTER_NEXT_INFILE;
    8bdc:	00800104 	movi	r2,4
    8be0:	f800283a 	ret
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    8be4:	008000c4 	movi	r2,3
    8be8:	f800283a 	ret
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
    8bec:	0005883a 	mov	r2,zero
    8bf0:	f800283a 	ret
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
        Type = CLUSTER_RESERVED;
    8bf4:	00800044 	movi	r2,1
    else if (Fat == 0xFFF7)
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
    8bf8:	f800283a 	ret

00008bfc <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    8bfc:	00c40034 	movhi	r3,4096
    8c00:	18ffffc4 	addi	r3,r3,-1
    8c04:	20c8703a 	and	r4,r4,r3
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
    8c08:	01440034 	movhi	r5,4096
    8c0c:	20ffffc4 	addi	r3,r4,-1
    8c10:	297ffb84 	addi	r5,r5,-18
    8c14:	28c00c2e 	bgeu	r5,r3,8c48 <fat32ClusterType+0x4c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
    8c18:	01440034 	movhi	r5,4096
    8c1c:	297ffdc4 	addi	r5,r5,-9
    8c20:	29000b36 	bltu	r5,r4,8c50 <fat32ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
    8c24:	20000c26 	beq	r4,zero,8c58 <fat32ClusterType+0x5c>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
    8c28:	00fc0034 	movhi	r3,61440
    8c2c:	18c00404 	addi	r3,r3,16
    8c30:	20c7883a 	add	r3,r4,r3
    8c34:	01800184 	movi	r6,6
    8c38:	30c0092e 	bgeu	r6,r3,8c60 <fat32ClusterType+0x64>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFFFFF7)
    8c3c:	2140091e 	bne	r4,r5,8c64 <fat32ClusterType+0x68>
        Type = CLUSTER_BAD;
    8c40:	00800084 	movi	r2,2
    8c44:	f800283a 	ret
CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    8c48:	00800104 	movi	r2,4
    8c4c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    8c50:	008000c4 	movi	r2,3
    8c54:	f800283a 	ret
    else if (Fat == (alt_u32)0x00)
        Type = CLUSTER_UNUSED;
    8c58:	0005883a 	mov	r2,zero
    8c5c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
        Type = CLUSTER_RESERVED;
    8c60:	00800044 	movi	r2,1
    else if (Fat == 0xFFFFFF7)
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
    8c64:	f800283a 	ret

00008c68 <fatDumpDate>:
    8c68:	f800283a 	ret

00008c6c <fatDumpTime>:
    Month = ((Date >> 5) & 0xF);
    Day = ((Date >> 0) & 0x1F);
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}

void fatDumpTime(unsigned short Date){
    8c6c:	f800283a 	ret

00008c70 <fatIsLastDir>:
    M = ((Date >> 5) & 0x3F);
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    8c70:	20800007 	ldb	r2,0(r4)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
        return TRUE;
    return FALSE;        
}
    8c74:	1005003a 	cmpeq	r2,r2,zero
    8c78:	f800283a 	ret

00008c7c <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
    8c7c:	defff904 	addi	sp,sp,-28
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    8c80:	01400074 	movhi	r5,1
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
    8c84:	dc000515 	stw	r16,20(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    8c88:	01800444 	movi	r6,17
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
    8c8c:	2021883a 	mov	r16,r4
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    8c90:	2975ff04 	addi	r5,r5,-10244
    8c94:	d809883a 	mov	r4,sp
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
    8c98:	dfc00615 	stw	ra,24(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    8c9c:	000c1480 	call	c148 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
    8ca0:	0005883a 	mov	r2,zero
    8ca4:	01000444 	movi	r4,17
        if (pDir->Name[0] == szTest[i]){
    8ca8:	d887883a 	add	r3,sp,r2
    8cac:	81400007 	ldb	r5,0(r16)
    8cb0:	18c00007 	ldb	r3,0(r3)
    8cb4:	28c00426 	beq	r5,r3,8cc8 <fatIsValidDir+0x4c>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
    8cb8:	10800044 	addi	r2,r2,1
    8cbc:	113ffa1e 	bne	r2,r4,8ca8 <_gp+0xffff2adc>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
    8cc0:	00800044 	movi	r2,1
    8cc4:	00000106 	br	8ccc <fatIsValidDir+0x50>
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
    8cc8:	0005883a 	mov	r2,zero
        }
    }    
    return TRUE;
    
}
    8ccc:	dfc00617 	ldw	ra,24(sp)
    8cd0:	dc000517 	ldw	r16,20(sp)
    8cd4:	dec00704 	addi	sp,sp,28
    8cd8:	f800283a 	ret

00008cdc <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    8cdc:	20800007 	ldb	r2,0(r4)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
        return TRUE;
    return FALSE; 
}
    8ce0:	10bff960 	cmpeqi	r2,r2,-27
    8ce4:	f800283a 	ret

00008ce8 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
    8ce8:	f800283a 	ret

00008cec <fatArray2Value>:
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    8cec:	28ffffc4 	addi	r3,r5,-1
    8cf0:	20c9883a 	add	r4,r4,r3
    8cf4:	214bc83a 	sub	r5,r4,r5
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
    8cf8:	21400526 	beq	r4,r5,8d10 <fatArray2Value+0x24>
        nValue <<= 8;
        nValue |= *pMSB--;
    8cfc:	20c00003 	ldbu	r3,0(r4)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
    8d00:	1004923a 	slli	r2,r2,8
    8d04:	213fffc4 	addi	r4,r4,-1
        nValue |= *pMSB--;
    8d08:	1884b03a 	or	r2,r3,r2
    8d0c:	003ffa06 	br	8cf8 <_gp+0xffff2b2c>
        
    }
    
    return nValue;
}
    8d10:	f800283a 	ret

00008d14 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    if (nSecter != pVol->Secter_Index){
    8d14:	20c09017 	ldw	r3,576(r4)
    8d18:	19401226 	beq	r3,r5,8d64 <fatReadSecter+0x50>
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    8d1c:	defffd04 	addi	sp,sp,-12
    8d20:	dc000015 	stw	r16,0(sp)
    bool bSuccess = TRUE;
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
    8d24:	20800117 	ldw	r2,4(r4)
    8d28:	2021883a 	mov	r16,r4
    8d2c:	21801004 	addi	r6,r4,64
    8d30:	21000017 	ldw	r4,0(r4)
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    8d34:	dc400115 	stw	r17,4(sp)
    8d38:	dfc00215 	stw	ra,8(sp)
    8d3c:	2823883a 	mov	r17,r5
    bool bSuccess = TRUE;
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
    8d40:	103ee83a 	callr	r2
    8d44:	1000041e 	bne	r2,zero,8d58 <fatReadSecter+0x44>
            pVol->Secter_Index = -1;
    8d48:	00bfffc4 	movi	r2,-1
    8d4c:	80809015 	stw	r2,576(r16)
            bSuccess = FALSE;
    8d50:	0005883a 	mov	r2,zero
    8d54:	00000506 	br	8d6c <fatReadSecter+0x58>
        }else{
            pVol->Secter_Index = nSecter;
    8d58:	84409015 	stw	r17,576(r16)
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    8d5c:	00800044 	movi	r2,1
    8d60:	00000206 	br	8d6c <fatReadSecter+0x58>
    8d64:	00800044 	movi	r2,1
    8d68:	f800283a 	ret
        }else{
            pVol->Secter_Index = nSecter;
        }
    }
    return bSuccess;          
}     
    8d6c:	dfc00217 	ldw	ra,8(sp)
    8d70:	dc400117 	ldw	r17,4(sp)
    8d74:	dc000017 	ldw	r16,0(sp)
    8d78:	dec00304 	addi	sp,sp,12
    8d7c:	f800283a 	ret

00008d80 <fatNextCluster>:
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8d80:	20c00317 	ldw	r3,12(r4)
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
    8d84:	defffa04 	addi	sp,sp,-24
    8d88:	dcc00315 	stw	r19,12(sp)
    8d8c:	dc000015 	stw	r16,0(sp)
    8d90:	dfc00515 	stw	ra,20(sp)
    8d94:	dd000415 	stw	r20,16(sp)
    8d98:	dc800215 	stw	r18,8(sp)
    8d9c:	dc400115 	stw	r17,4(sp)
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8da0:	008002c4 	movi	r2,11
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
    8da4:	2021883a 	mov	r16,r4
    8da8:	2827883a 	mov	r19,r5
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8dac:	18800226 	beq	r3,r2,8db8 <fatNextCluster+0x38>
    8db0:	04800084 	movi	r18,2
    8db4:	00000106 	br	8dbc <fatNextCluster+0x3c>
    8db8:	04800104 	movi	r18,4
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    8dbc:	85000617 	ldw	r20,24(r16)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
    8dc0:	980b883a 	mov	r5,r19
    8dc4:	9009883a 	mov	r4,r18
    8dc8:	000ac100 	call	ac10 <__mulsi3>
    8dcc:	a00b883a 	mov	r5,r20
    8dd0:	1009883a 	mov	r4,r2
    8dd4:	000ab540 	call	ab54 <__udivsi3>
    8dd8:	81400d17 	ldw	r5,52(r16)
    8ddc:	8009883a 	mov	r4,r16
    8de0:	114b883a 	add	r5,r2,r5
    8de4:	0008d140 	call	8d14 <fatReadSecter>
    8de8:	10001d26 	beq	r2,zero,8e60 <fatNextCluster+0xe0>
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    8dec:	900b883a 	mov	r5,r18
    8df0:	a009883a 	mov	r4,r20
    8df4:	000ab540 	call	ab54 <__udivsi3>
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
    8df8:	80c00317 	ldw	r3,12(r16)
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    8dfc:	100b883a 	mov	r5,r2
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
    8e00:	008002c4 	movi	r2,11
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    8e04:	9809883a 	mov	r4,r19
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
    8e08:	1880091e 	bne	r3,r2,8e30 <fatNextCluster+0xb0>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    8e0c:	000abb80 	call	abb8 <__umodsi3>
    8e10:	900b883a 	mov	r5,r18
    8e14:	1009883a 	mov	r4,r2
    8e18:	000ac100 	call	ac10 <__mulsi3>
    8e1c:	8085883a 	add	r2,r16,r2
    8e20:	14401017 	ldw	r17,64(r2)
            ClusterType = fat32ClusterType(NextCluster);
    8e24:	8809883a 	mov	r4,r17
    8e28:	0008bfc0 	call	8bfc <fat32ClusterType>
    8e2c:	00000806 	br	8e50 <fatNextCluster+0xd0>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    8e30:	000abb80 	call	abb8 <__umodsi3>
    8e34:	1009883a 	mov	r4,r2
    8e38:	900b883a 	mov	r5,r18
    8e3c:	000ac100 	call	ac10 <__mulsi3>
    8e40:	8085883a 	add	r2,r16,r2
    8e44:	1440100b 	ldhu	r17,64(r2)
            ClusterType = fat16ClusterType(NextCluster);
    8e48:	8809883a 	mov	r4,r17
    8e4c:	0008ba00 	call	8ba0 <fat16ClusterType>
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
    8e50:	10bfff44 	addi	r2,r2,-3
    8e54:	00c00044 	movi	r3,1
    8e58:	1880012e 	bgeu	r3,r2,8e60 <fatNextCluster+0xe0>
            NextCluster = 0;  // invalid cluster
    8e5c:	0023883a 	mov	r17,zero
    return NextCluster;

#endif    
    
    return NextCluster;
}
    8e60:	8805883a 	mov	r2,r17
    8e64:	dfc00517 	ldw	ra,20(sp)
    8e68:	dd000417 	ldw	r20,16(sp)
    8e6c:	dcc00317 	ldw	r19,12(sp)
    8e70:	dc800217 	ldw	r18,8(sp)
    8e74:	dc400117 	ldw	r17,4(sp)
    8e78:	dc000017 	ldw	r16,0(sp)
    8e7c:	dec00604 	addi	sp,sp,24
    8e80:	f800283a 	ret

00008e84 <fatFindUnusedCluster>:
alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8e84:	20c00317 	ldw	r3,12(r4)
#endif    
    
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    8e88:	defff704 	addi	sp,sp,-36
    8e8c:	dc000015 	stw	r16,0(sp)
    8e90:	dfc00815 	stw	ra,32(sp)
    8e94:	ddc00715 	stw	r23,28(sp)
    8e98:	dd800615 	stw	r22,24(sp)
    8e9c:	dd400515 	stw	r21,20(sp)
    8ea0:	dd000415 	stw	r20,16(sp)
    8ea4:	dcc00315 	stw	r19,12(sp)
    8ea8:	dc800215 	stw	r18,8(sp)
    8eac:	dc400115 	stw	r17,4(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8eb0:	008002c4 	movi	r2,11
#endif    
    
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    8eb4:	2021883a 	mov	r16,r4
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8eb8:	18800226 	beq	r3,r2,8ec4 <fatFindUnusedCluster+0x40>
    8ebc:	04400084 	movi	r17,2
    8ec0:	00000106 	br	8ec8 <fatFindUnusedCluster+0x44>
    8ec4:	04400104 	movi	r17,4
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    8ec8:	81000617 	ldw	r4,24(r16)
    8ecc:	880b883a 	mov	r5,r17
    8ed0:	8c67883a 	add	r19,r17,r17
    8ed4:	000ab540 	call	ab54 <__udivsi3>
    8ed8:	102b883a 	mov	r21,r2
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    8edc:	04800084 	movi	r18,2
    8ee0:	053fffc4 	movi	r20,-1
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
    8ee4:	85801004 	addi	r22,r16,64
            if (pVol->Partition_Type == PARTITION_FAT32){
    8ee8:	05c002c4 	movi	r23,11
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
    8eec:	81400617 	ldw	r5,24(r16)
    8ef0:	9809883a 	mov	r4,r19
    8ef4:	000ab540 	call	ab54 <__udivsi3>
    8ef8:	81400d17 	ldw	r5,52(r16)
    8efc:	8009883a 	mov	r4,r16
    8f00:	114b883a 	add	r5,r2,r5
    8f04:	0008d140 	call	8d14 <fatReadSecter>
    8f08:	10001026 	beq	r2,zero,8f4c <fatFindUnusedCluster+0xc8>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
    8f0c:	a80b883a 	mov	r5,r21
    8f10:	9009883a 	mov	r4,r18
    8f14:	000abb80 	call	abb8 <__umodsi3>
    8f18:	880b883a 	mov	r5,r17
    8f1c:	1009883a 	mov	r4,r2
    8f20:	000ac100 	call	ac10 <__mulsi3>
            if (pVol->Partition_Type == PARTITION_FAT32){
    8f24:	80c00317 	ldw	r3,12(r16)
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
    8f28:	b085883a 	add	r2,r22,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
    8f2c:	1dc0031e 	bne	r3,r23,8f3c <fatFindUnusedCluster+0xb8>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
    8f30:	11000017 	ldw	r4,0(r2)
    8f34:	0008bfc0 	call	8bfc <fat32ClusterType>
    8f38:	00000206 	br	8f44 <fatFindUnusedCluster+0xc0>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
                ClusterType = fat16ClusterType(ClusterEntryValue);
    8f3c:	1100000b 	ldhu	r4,0(r2)
    8f40:	0008ba00 	call	8ba0 <fat16ClusterType>
            }    
            if (ClusterType == CLUSTER_UNUSED){
    8f44:	1000031e 	bne	r2,zero,8f54 <fatFindUnusedCluster+0xd0>
    8f48:	9029883a 	mov	r20,r18
                UnusedCluster = ThisCluster;  // invalid cluster
                bDone = TRUE;
            }    
        }else{
            bDone = TRUE;
    8f4c:	00800044 	movi	r2,1
    8f50:	00000106 	br	8f58 <fatFindUnusedCluster+0xd4>
    8f54:	0005883a 	mov	r2,zero
        }     
        ThisCluster++;           
    8f58:	94800044 	addi	r18,r18,1
    8f5c:	9c67883a 	add	r19,r19,r17
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
    8f60:	103fe226 	beq	r2,zero,8eec <_gp+0xffff2d20>
        ThisCluster++;           
    }                
    
    return UnusedCluster;

}
    8f64:	a005883a 	mov	r2,r20
    8f68:	dfc00817 	ldw	ra,32(sp)
    8f6c:	ddc00717 	ldw	r23,28(sp)
    8f70:	dd800617 	ldw	r22,24(sp)
    8f74:	dd400517 	ldw	r21,20(sp)
    8f78:	dd000417 	ldw	r20,16(sp)
    8f7c:	dcc00317 	ldw	r19,12(sp)
    8f80:	dc800217 	ldw	r18,8(sp)
    8f84:	dc400117 	ldw	r17,4(sp)
    8f88:	dc000017 	ldw	r16,0(sp)
    8f8c:	dec00904 	addi	sp,sp,36
    8f90:	f800283a 	ret

00008f94 <fatDelClusterList>:
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8f94:	20c00317 	ldw	r3,12(r4)
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
    8f98:	defff404 	addi	sp,sp,-48
    8f9c:	dc800415 	stw	r18,16(sp)
    8fa0:	dc000215 	stw	r16,8(sp)
    8fa4:	dfc00b15 	stw	ra,44(sp)
    8fa8:	df000a15 	stw	fp,40(sp)
    8fac:	ddc00915 	stw	r23,36(sp)
    8fb0:	dd800815 	stw	r22,32(sp)
    8fb4:	dd400715 	stw	r21,28(sp)
    8fb8:	dd000615 	stw	r20,24(sp)
    8fbc:	dcc00515 	stw	r19,20(sp)
    8fc0:	dc400315 	stw	r17,12(sp)
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8fc4:	008002c4 	movi	r2,11
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
    8fc8:	2021883a 	mov	r16,r4
    8fcc:	2825883a 	mov	r18,r5
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    8fd0:	18800226 	beq	r3,r2,8fdc <fatDelClusterList+0x48>
    8fd4:	04400084 	movi	r17,2
    8fd8:	00000106 	br	8fe0 <fatDelClusterList+0x4c>
    8fdc:	04400104 	movi	r17,4
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    8fe0:	81000617 	ldw	r4,24(r16)
    8fe4:	880b883a 	mov	r5,r17
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
    8fe8:	84c01004 	addi	r19,r16,64
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    8fec:	000ab540 	call	ab54 <__udivsi3>
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
    8ff0:	900b883a 	mov	r5,r18
    8ff4:	8809883a 	mov	r4,r17
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    8ff8:	d8800015 	stw	r2,0(sp)
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
    8ffc:	000ac100 	call	ac10 <__mulsi3>
    9000:	102f883a 	mov	r23,r2
}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
    9004:	00800044 	movi	r2,1
    bool bDone = FALSE;
    9008:	0007883a 	mov	r3,zero
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
            if (pVol->Partition_Type == PARTITION_FAT32){
    900c:	050002c4 	movi	r20,11
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
    9010:	1039883a 	mov	fp,r2
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
    9014:	1000021e 	bne	r2,zero,9020 <fatDelClusterList+0x8c>
}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
    9018:	0005883a 	mov	r2,zero
    901c:	00002606 	br	90b8 <fatDelClusterList+0x124>
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
    9020:	1800251e 	bne	r3,zero,90b8 <fatDelClusterList+0x124>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
    9024:	81400617 	ldw	r5,24(r16)
    9028:	b809883a 	mov	r4,r23
    902c:	000ab540 	call	ab54 <__udivsi3>
    9030:	81400d17 	ldw	r5,52(r16)
    9034:	8009883a 	mov	r4,r16
    9038:	114b883a 	add	r5,r2,r5
    903c:	0008d140 	call	8d14 <fatReadSecter>
        if (bSuccess){
    9040:	103ff526 	beq	r2,zero,9018 <_gp+0xffff2e4c>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
    9044:	d9400017 	ldw	r5,0(sp)
    9048:	9009883a 	mov	r4,r18
    904c:	000abb80 	call	abb8 <__umodsi3>
    9050:	880b883a 	mov	r5,r17
    9054:	1009883a 	mov	r4,r2
    9058:	000ac100 	call	ac10 <__mulsi3>
            if (pVol->Partition_Type == PARTITION_FAT32){
    905c:	85400317 	ldw	r21,12(r16)
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
    9060:	98ad883a 	add	r22,r19,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
    9064:	ad00031e 	bne	r21,r20,9074 <fatDelClusterList+0xe0>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
    9068:	b1000017 	ldw	r4,0(r22)
    906c:	0008bfc0 	call	8bfc <fat32ClusterType>
    9070:	00000206 	br	907c <fatDelClusterList+0xe8>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
    9074:	b100000b 	ldhu	r4,0(r22)
    9078:	0008ba00 	call	8ba0 <fat16ClusterType>
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
    907c:	10ffff44 	addi	r3,r2,-3
    9080:	e0ffe536 	bltu	fp,r3,9018 <_gp+0xffff2e4c>
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
                    bDone = TRUE; // the last cluster
    9084:	10c000e0 	cmpeqi	r3,r2,3
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
    9088:	ad00021e 	bne	r21,r20,9094 <fatDelClusterList+0x100>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
    908c:	b0000015 	stw	zero,0(r22)
    9090:	00000106 	br	9098 <fatDelClusterList+0x104>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
    9094:	b000000d 	sth	zero,0(r22)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
    9098:	80800217 	ldw	r2,8(r16)
    909c:	81409017 	ldw	r5,576(r16)
    90a0:	81000017 	ldw	r4,0(r16)
    90a4:	d8c00115 	stw	r3,4(sp)
    90a8:	980d883a 	mov	r6,r19
    90ac:	103ee83a 	callr	r2
    90b0:	d8c00117 	ldw	r3,4(sp)
    90b4:	003fd706 	br	9014 <_gp+0xffff2e48>
    }  // while                
    
    
    return bSuccess;

}
    90b8:	dfc00b17 	ldw	ra,44(sp)
    90bc:	df000a17 	ldw	fp,40(sp)
    90c0:	ddc00917 	ldw	r23,36(sp)
    90c4:	dd800817 	ldw	r22,32(sp)
    90c8:	dd400717 	ldw	r21,28(sp)
    90cc:	dd000617 	ldw	r20,24(sp)
    90d0:	dcc00517 	ldw	r19,20(sp)
    90d4:	dc800417 	ldw	r18,16(sp)
    90d8:	dc400317 	ldw	r17,12(sp)
    90dc:	dc000217 	ldw	r16,8(sp)
    90e0:	dec00c04 	addi	sp,sp,48
    90e4:	f800283a 	ret

000090e8 <fatFindDirectory>:
    return bSuccess;          
}     

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    90e8:	defffc04 	addi	sp,sp,-16
    90ec:	dc800215 	stw	r18,8(sp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    90f0:	2824917a 	slli	r18,r5,5
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
        // read sector
    if (fatReadSecter(pVol, nSecter)){
    90f4:	21400617 	ldw	r5,24(r4)
    return bSuccess;          
}     

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    90f8:	dc000015 	stw	r16,0(sp)
    90fc:	2021883a 	mov	r16,r4
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
        // read sector
    if (fatReadSecter(pVol, nSecter)){
    9100:	9009883a 	mov	r4,r18
    return bSuccess;          
}     

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    9104:	dfc00315 	stw	ra,12(sp)
    9108:	dc400115 	stw	r17,4(sp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
        // read sector
    if (fatReadSecter(pVol, nSecter)){
    910c:	000ab540 	call	ab54 <__udivsi3>
    9110:	81400e17 	ldw	r5,56(r16)
    9114:	8009883a 	mov	r4,r16
    9118:	114b883a 	add	r5,r2,r5
    911c:	0008d140 	call	8d14 <fatReadSecter>
    9120:	10000626 	beq	r2,zero,913c <fatFindDirectory+0x54>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
    9124:	81400617 	ldw	r5,24(r16)
    9128:	9009883a 	mov	r4,r18
    912c:	84401004 	addi	r17,r16,64
    9130:	000abb80 	call	abb8 <__umodsi3>
    9134:	8885883a 	add	r2,r17,r2
    9138:	00000106 	br	9140 <fatFindDirectory+0x58>
}     

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    FAT_DIRECTORY *pDir=NULL;
    913c:	0005883a 	mov	r2,zero
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
    }        
        
    return pDir;        
}
    9140:	dfc00317 	ldw	ra,12(sp)
    9144:	dc800217 	ldw	r18,8(sp)
    9148:	dc400117 	ldw	r17,4(sp)
    914c:	dc000017 	ldw	r16,0(sp)
    9150:	dec00404 	addi	sp,sp,16
    9154:	f800283a 	ret

00009158 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
    9158:	defffa04 	addi	sp,sp,-24
    915c:	dd000415 	stw	r20,16(sp)
    9160:	dc800215 	stw	r18,8(sp)
    9164:	dc400115 	stw	r17,4(sp)
    9168:	dc000015 	stw	r16,0(sp)
    916c:	dfc00515 	stw	ra,20(sp)
    9170:	dcc00315 	stw	r19,12(sp)
    9174:	2021883a 	mov	r16,r4
    alt_u32 Dir = -1;
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    9178:	04400084 	movi	r17,2
}

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
    alt_u32 Dir = -1;
    917c:	04bfffc4 	movi	r18,-1
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
    9180:	053ff944 	movi	r20,-27
    9184:	8826917a 	slli	r19,r17,5
             
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
            // read sector
        if (fatReadSecter(pVol, nSecter)){
    9188:	81400617 	ldw	r5,24(r16)
    918c:	9809883a 	mov	r4,r19
    9190:	000ab540 	call	ab54 <__udivsi3>
    9194:	81400e17 	ldw	r5,56(r16)
    9198:	8009883a 	mov	r4,r16
    919c:	114b883a 	add	r5,r2,r5
    91a0:	0008d140 	call	8d14 <fatReadSecter>
    91a4:	103ff826 	beq	r2,zero,9188 <_gp+0xffff2fbc>
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
    91a8:	81400617 	ldw	r5,24(r16)
    91ac:	9809883a 	mov	r4,r19
    91b0:	000abb80 	call	abb8 <__umodsi3>
    91b4:	8085883a 	add	r2,r16,r2
    91b8:	10801007 	ldb	r2,64(r2)
    91bc:	10000e26 	beq	r2,zero,91f8 <fatFindUnusedDirectory+0xa0>
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
    91c0:	15000c26 	beq	r2,r20,91f4 <fatFindUnusedDirectory+0x9c>
    91c4:	0005883a 	mov	r2,zero
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
                bDone = TRUE;
                if (fatIsUnusedDir(pDir))
                    Dir = nDirectoryIndex;
            }
            nDirectoryIndex++;        
    91c8:	8c400044 	addi	r17,r17,1
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
    91cc:	103fed26 	beq	r2,zero,9184 <_gp+0xffff2fb8>
                bDone = FALSE;
        }
    }             
    
    return Dir;      
}
    91d0:	9005883a 	mov	r2,r18
    91d4:	dfc00517 	ldw	ra,20(sp)
    91d8:	dd000417 	ldw	r20,16(sp)
    91dc:	dcc00317 	ldw	r19,12(sp)
    91e0:	dc800217 	ldw	r18,8(sp)
    91e4:	dc400117 	ldw	r17,4(sp)
    91e8:	dc000017 	ldw	r16,0(sp)
    91ec:	dec00604 	addi	sp,sp,24
    91f0:	f800283a 	ret
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
    91f4:	8825883a 	mov	r18,r17
            // read sector
        if (fatReadSecter(pVol, nSecter)){
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
                bDone = TRUE;
    91f8:	00800044 	movi	r2,1
    91fc:	003ff206 	br	91c8 <_gp+0xffff2ffc>

00009200 <fatMount>:
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
    9200:	deff7804 	addi	sp,sp,-544
    9204:	dc008015 	stw	r16,512(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
    9208:	20800117 	ldw	r2,4(r4)
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
    920c:	2021883a 	mov	r16,r4
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
    9210:	21000017 	ldw	r4,0(r4)
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
    9214:	dfc08715 	stw	ra,540(sp)
    9218:	dd808615 	stw	r22,536(sp)
    921c:	dd408515 	stw	r21,532(sp)
    9220:	dd008415 	stw	r20,528(sp)
    9224:	dcc08315 	stw	r19,524(sp)
    9228:	dc808215 	stw	r18,520(sp)
    922c:	dc408115 	stw	r17,516(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
    9230:	d80d883a 	mov	r6,sp
    9234:	000b883a 	mov	r5,zero
    9238:	103ee83a 	callr	r2
    923c:	1000021e 	bne	r2,zero,9248 <fatMount+0x48>
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
    9240:	0005883a 	mov	r2,zero
    9244:	00004806 	br	9368 <fatMount+0x168>
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    PartitionType = szBlock[FirstPartitionEntry + 4];
    9248:	d8807083 	ldbu	r2,450(sp)
    if (PartitionType == PARTITION_FAT16){
    924c:	00c00184 	movi	r3,6
    9250:	10c00226 	beq	r2,r3,925c <fatMount+0x5c>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
    9254:	00c002c4 	movi	r3,11
    9258:	10fff91e 	bne	r2,r3,9240 <_gp+0xffff3074>
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
    925c:	01400104 	movi	r5,4
    9260:	d9007184 	addi	r4,sp,454
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
    9264:	80800315 	stw	r2,12(r16)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
    9268:	0008cec0 	call	8cec <fatArray2Value>
    926c:	102b883a 	mov	r21,r2
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
    9270:	81000017 	ldw	r4,0(r16)
    9274:	80800117 	ldw	r2,4(r16)
    9278:	d80d883a 	mov	r6,sp
    927c:	a80b883a 	mov	r5,r21
    9280:	103ee83a 	callr	r2
    9284:	103fee26 	beq	r2,zero,9240 <_gp+0xffff3074>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    9288:	dd000303 	ldbu	r20,12(sp)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    928c:	dc4003c3 	ldbu	r17,15(sp)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    9290:	dc800483 	ldbu	r18,18(sp)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    9294:	a004923a 	slli	r2,r20,8
    9298:	dd0002c3 	ldbu	r20,11(sp)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    929c:	dcc00343 	ldbu	r19,13(sp)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    92a0:	dd800403 	ldbu	r22,16(sp)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    92a4:	1529883a 	add	r20,r2,r20
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    92a8:	8804923a 	slli	r2,r17,8
    92ac:	dc400383 	ldbu	r17,14(sp)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    92b0:	85400515 	stw	r21,20(r16)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    92b4:	85000615 	stw	r20,24(r16)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    92b8:	1463883a 	add	r17,r2,r17
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    92bc:	9004923a 	slli	r2,r18,8
    92c0:	dc800443 	ldbu	r18,17(sp)
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    92c4:	84c00715 	stw	r19,28(r16)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    92c8:	84400815 	stw	r17,32(r16)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    92cc:	14a5883a 	add	r18,r2,r18
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    92d0:	d88005c3 	ldbu	r2,23(sp)
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    92d4:	85800915 	stw	r22,36(r16)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    92d8:	84800a15 	stw	r18,40(r16)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    92dc:	1006923a 	slli	r3,r2,8
    92e0:	d8800583 	ldbu	r2,22(sp)
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    92e4:	01808004 	movi	r6,512
    92e8:	000b883a 	mov	r5,zero
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    92ec:	1885883a 	add	r2,r3,r2
    92f0:	80800b15 	stw	r2,44(r16)
    
    // add for v2.0
    pVol->Secter_Index = -1;
    92f4:	00bfffc4 	movi	r2,-1
    92f8:	80809015 	stw	r2,576(r16)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    92fc:	81001004 	addi	r4,r16,64
    9300:	000c1700 	call	c170 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
    9304:	80c00317 	ldw	r3,12(r16)
    9308:	008002c4 	movi	r2,11
    930c:	1880041e 	bne	r3,r2,9320 <fatMount+0x120>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
    9310:	01400104 	movi	r5,4
    9314:	d9000904 	addi	r4,sp,36
    9318:	0008cec0 	call	8cec <fatArray2Value>
    931c:	80800b15 	stw	r2,44(r16)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
    9320:	00808004 	movi	r2,512
    9324:	a0bfc61e 	bne	r20,r2,9240 <_gp+0xffff3074>
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    9328:	81400b17 	ldw	r5,44(r16)
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    932c:	ac63883a 	add	r17,r21,r17
    9330:	84400d15 	stw	r17,52(r16)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    9334:	b009883a 	mov	r4,r22
    9338:	000ac100 	call	ac10 <__mulsi3>
    933c:	1463883a 	add	r17,r2,r17
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    9340:	9004917a 	slli	r2,r18,5
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
    9344:	9826927a 	slli	r19,r19,9
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    9348:	84400e15 	stw	r17,56(r16)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    934c:	10807fc4 	addi	r2,r2,511
    9350:	1004d27a 	srli	r2,r2,9
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
    9354:	84c00c15 	stw	r19,48(r16)
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    9358:	1463883a 	add	r17,r2,r17
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
    935c:	00800044 	movi	r2,1
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    9360:	84400f15 	stw	r17,60(r16)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
    9364:	80800415 	stw	r2,16(r16)
    return bSuccess;   
    

}
    9368:	dfc08717 	ldw	ra,540(sp)
    936c:	dd808617 	ldw	r22,536(sp)
    9370:	dd408517 	ldw	r21,532(sp)
    9374:	dd008417 	ldw	r20,528(sp)
    9378:	dcc08317 	ldw	r19,524(sp)
    937c:	dc808217 	ldw	r18,520(sp)
    9380:	dc408117 	ldw	r17,516(sp)
    9384:	dc008017 	ldw	r16,512(sp)
    9388:	dec08804 	addi	sp,sp,544
    938c:	f800283a 	ret

00009390 <fatMountSdcard>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
}

FAT_HANDLE fatMountSdcard(void){
    9390:	defffe04 	addi	sp,sp,-8
    9394:	dc000015 	stw	r16,0(sp)
    9398:	dfc00115 	stw	ra,4(sp)
    939c:	040002c4 	movi	r16,11
    93a0:	843fffc4 	addi	r16,r16,-1
    int nTry=0;
    bool bSuccess = TRUE;
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
    93a4:	80000826 	beq	r16,zero,93c8 <fatMountSdcard+0x38>
        bFind = SDLIB_Init();
    93a8:	0009b2c0 	call	9b2c <SDLIB_Init>
        if (!bFind)
    93ac:	1000081e 	bne	r2,zero,93d0 <fatMountSdcard+0x40>
            usleep(100*1000);
    93b0:	010000b4 	movhi	r4,2
    93b4:	2121a804 	addi	r4,r4,-31072
    93b8:	000d6a80 	call	d6a8 <usleep>
    93bc:	003ff806 	br	93a0 <_gp+0xffff31d4>
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        free((void *)hFat);
    93c0:	8009883a 	mov	r4,r16
    93c4:	000c1340 	call	c134 <free>
        hFat = 0;
    93c8:	0005883a 	mov	r2,zero
    93cc:	00000f06 	br	940c <fatMountSdcard+0x7c>
    if (!bFind){
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
    93d0:	01009104 	movi	r4,580
    93d4:	000c1200 	call	c120 <malloc>
    93d8:	1021883a 	mov	r16,r2
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
    93dc:	00800074 	movhi	r2,1
    93e0:	10a2e204 	addi	r2,r2,-29816
    93e4:	80800115 	stw	r2,4(r16)
    pVol->WriteBlock512 = SD_WriteBlock512;
    93e8:	00800074 	movhi	r2,1
    93ec:	10a2e504 	addi	r2,r2,-29804
    93f0:	80800215 	stw	r2,8(r16)
    bSuccess = fatMount(pVol);
    93f4:	8009883a 	mov	r4,r16
    93f8:	00092000 	call	9200 <fatMount>
        
    
  
    if (bSuccess){
    93fc:	103ff026 	beq	r2,zero,93c0 <_gp+0xffff31f4>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
    9400:	00800044 	movi	r2,1
    9404:	80800415 	stw	r2,16(r16)
    if (!bFind){
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
    9408:	8005883a 	mov	r2,r16
        free((void *)hFat);
        hFat = 0;
    }        

    return hFat;   
}
    940c:	dfc00117 	ldw	ra,4(sp)
    9410:	dc000017 	ldw	r16,0(sp)
    9414:	dec00204 	addi	sp,sp,8
    9418:	f800283a 	ret

0000941c <crc16>:
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    941c:	01c00074 	movhi	r7,1
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
    9420:	200d883a 	mov	r6,r4
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    9424:	0005883a 	mov	r2,zero
    for( counter = 0; counter < len; counter++)
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    9428:	39f60384 	addi	r7,r7,-10226
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
    942c:	3107c83a 	sub	r3,r6,r4
    9430:	19400b0e 	bge	r3,r5,9460 <crc16+0x44>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    9434:	10bfffcc 	andi	r2,r2,65535
    9438:	1010d23a 	srli	r8,r2,8
    943c:	30c00003 	ldbu	r3,0(r6)
    9440:	1004923a 	slli	r2,r2,8
    9444:	31800044 	addi	r6,r6,1
    9448:	40c6f03a 	xor	r3,r8,r3
    944c:	18c7883a 	add	r3,r3,r3
    9450:	38c7883a 	add	r3,r7,r3
    9454:	18c0000b 	ldhu	r3,0(r3)
    9458:	10c4f03a 	xor	r2,r2,r3
    945c:	003ff306 	br	942c <_gp+0xffff3260>
    return crc;
}
    9460:	f800283a 	ret

00009464 <crc7_byte>:
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
        return crc7_syndrome_table[(crc << 1) ^ data];
    9464:	21003fcc 	andi	r4,r4,255
    9468:	2109883a 	add	r4,r4,r4
    946c:	29403fcc 	andi	r5,r5,255
    9470:	214af03a 	xor	r5,r4,r5
    9474:	01000074 	movhi	r4,1
    9478:	21368384 	addi	r4,r4,-9714
    947c:	214b883a 	add	r5,r4,r5
}
    9480:	28800003 	ldbu	r2,0(r5)
    9484:	f800283a 	ret

00009488 <crc7>:
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
        return crc7_syndrome_table[(crc << 1) ^ data];
    9488:	00c00074 	movhi	r3,1
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
    948c:	2005883a 	mov	r2,r4
    9490:	298d883a 	add	r6,r5,r6
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
        return crc7_syndrome_table[(crc << 1) ^ data];
    9494:	18f68384 	addi	r3,r3,-9714
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
    9498:	29800826 	beq	r5,r6,94bc <crc7+0x34>
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
        return crc7_syndrome_table[(crc << 1) ^ data];
    949c:	29000003 	ldbu	r4,0(r5)
    94a0:	10803fcc 	andi	r2,r2,255
    94a4:	1085883a 	add	r2,r2,r2
    94a8:	1104f03a 	xor	r2,r2,r4
    94ac:	1885883a 	add	r2,r3,r2
    94b0:	10800003 	ldbu	r2,0(r2)
    94b4:	29400044 	addi	r5,r5,1
    94b8:	003ff706 	br	9498 <_gp+0xffff32cc>
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
            crc = crc7_byte(crc, *buffer++);
      return crc;
}
    94bc:	f800283a 	ret

000094c0 <debug_output>:

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
    94c0:	000c4081 	jmpi	c408 <printf>

000094c4 <myprintf>:





int myprintf(char *format, ...){
    94c4:	deff7b04 	addi	sp,sp,-532
    94c8:	dfc08115 	stw	ra,516(sp)
    94cc:	dc008015 	stw	r16,512(sp)
    94d0:	d9408215 	stw	r5,520(sp)
    94d4:	d9808315 	stw	r6,524(sp)
    94d8:	d9c08415 	stw	r7,528(sp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
    94dc:	01408004 	movi	r5,512
    94e0:	200d883a 	mov	r6,r4
    94e4:	d9c08204 	addi	r7,sp,520
    94e8:	d809883a 	mov	r4,sp
    94ec:	000d1fc0 	call	d1fc <vsnprintf>

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
    94f0:	d809883a 	mov	r4,sp
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
    94f4:	1021883a 	mov	r16,r2

#else

void debug_output(char *pMessage){
    
    printf(pMessage);
    94f8:	000c4080 	call	c408 <printf>
    va_end(paramList);
    
    debug_output(szText);

    return rc;    
}
    94fc:	8005883a 	mov	r2,r16
    9500:	dfc08117 	ldw	ra,516(sp)
    9504:	dc008017 	ldw	r16,512(sp)
    9508:	dec08504 	addi	sp,sp,532
    950c:	f800283a 	ret

00009510 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
    9510:	defff804 	addi	sp,sp,-32
    9514:	dc800615 	stw	r18,24(sp)
    9518:	dc400515 	stw	r17,20(sp)
    951c:	dc000415 	stw	r16,16(sp)
    9520:	dfc00715 	stw	ra,28(sp)
    9524:	2025883a 	mov	r18,r4
    9528:	2823883a 	mov	r17,r5
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    952c:	2021883a 	mov	r16,r4
    9530:	8485c83a 	sub	r2,r16,r18
    9534:	1440090e 	bge	r2,r17,955c <myprintf_hexarray+0x4c>
        sprintf(szText, "[%02X]", *(pHex+i));
    9538:	81800003 	ldbu	r6,0(r16)
    953c:	01400074 	movhi	r5,1
    9540:	2976c404 	addi	r5,r5,-9456
    9544:	d809883a 	mov	r4,sp
    9548:	000c5080 	call	c508 <sprintf>
        DEBUG((szText));
    954c:	d809883a 	mov	r4,sp
    9550:	00094c40 	call	94c4 <myprintf>
    9554:	84000044 	addi	r16,r16,1
    9558:	003ff506 	br	9530 <_gp+0xffff3364>
    }
    return len;
}
    955c:	8805883a 	mov	r2,r17
    9560:	dfc00717 	ldw	ra,28(sp)
    9564:	dc800617 	ldw	r18,24(sp)
    9568:	dc400517 	ldw	r17,20(sp)
    956c:	dc000417 	ldw	r16,16(sp)
    9570:	dec00804 	addi	sp,sp,32
    9574:	f800283a 	ret

00009578 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    9578:	defff804 	addi	sp,sp,-32
    957c:	dc800615 	stw	r18,24(sp)
    9580:	dc400515 	stw	r17,20(sp)
    9584:	dc000415 	stw	r16,16(sp)
    9588:	dfc00715 	stw	ra,28(sp)
    958c:	2825883a 	mov	r18,r5
    9590:	2023883a 	mov	r17,r4
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    9594:	0021883a 	mov	r16,zero
    9598:	84800a0e 	bge	r16,r18,95c4 <myprintf_dwordarray+0x4c>
        sprintf(szText, "[%08X]", *(pArray+i));
    959c:	89800017 	ldw	r6,0(r17)
    95a0:	01400074 	movhi	r5,1
    95a4:	2976c604 	addi	r5,r5,-9448
    95a8:	d809883a 	mov	r4,sp
    95ac:	000c5080 	call	c508 <sprintf>
        DEBUG((szText));
    95b0:	d809883a 	mov	r4,sp
    95b4:	00094c40 	call	94c4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    95b8:	84000044 	addi	r16,r16,1
    95bc:	8c400104 	addi	r17,r17,4
    95c0:	003ff506 	br	9598 <_gp+0xffff33cc>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
}
    95c4:	9005883a 	mov	r2,r18
    95c8:	dfc00717 	ldw	ra,28(sp)
    95cc:	dc800617 	ldw	r18,24(sp)
    95d0:	dc400517 	ldw	r17,20(sp)
    95d4:	dc000417 	ldw	r16,16(sp)
    95d8:	dec00804 	addi	sp,sp,32
    95dc:	f800283a 	ret

000095e0 <SDHAL_IsSupport4Bits>:
    bool bYes = FALSE;
#ifdef SD_4BIT_MODE
    bYes = TRUE;
#endif    
    return bYes;
}
    95e0:	00800044 	movi	r2,1
    95e4:	f800283a 	ret

000095e8 <SDHAL_Init>:

void SDHAL_Init(void){
    SD_CMD_OUT;
    95e8:	00c00074 	movhi	r3,1
    95ec:	00800044 	movi	r2,1
    95f0:	18c40904 	addi	r3,r3,4132
    95f4:	18800035 	stwio	r2,0(r3)
    SD_DAT_IN;
    95f8:	01000074 	movhi	r4,1
    95fc:	0007883a 	mov	r3,zero
    9600:	21040504 	addi	r4,r4,4116
    9604:	20c00035 	stwio	r3,0(r4)
    SD_CLK_HIGH;
    9608:	01000074 	movhi	r4,1
    960c:	21040c04 	addi	r4,r4,4144
    9610:	20800035 	stwio	r2,0(r4)
    SD_CMD_HIGH;
    9614:	01000074 	movhi	r4,1
    9618:	21040804 	addi	r4,r4,4128
    961c:	20800035 	stwio	r2,0(r4)
    SD_DAT_LOW;    
    9620:	00800074 	movhi	r2,1
    9624:	10840404 	addi	r2,r2,4112
    9628:	10c00035 	stwio	r3,0(r2)
    962c:	f800283a 	ret

00009630 <SDHAL_SendCmd>:
void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    9630:	00c00074 	movhi	r3,1
    9634:	00800044 	movi	r2,1
    9638:	18c40904 	addi	r3,r3,4132
    963c:	18800035 	stwio	r2,0(r3)
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
            SD_CLK_LOW;
    9640:	02800074 	movhi	r10,1
    9644:	02400074 	movhi	r9,1

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
    9648:	200d883a 	mov	r6,r4
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
            SD_CLK_LOW;
    964c:	52840c04 	addi	r10,r10,4144
    9650:	4a440804 	addi	r9,r9,4128

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
    9654:	3107c83a 	sub	r3,r6,r4
    9658:	1940130e 	bge	r3,r5,96a8 <SDHAL_SendCmd+0x78>
        Mask = 0x80;
        Data = szCommand[i];
    965c:	32c00003 	ldbu	r11,0(r6)
    9660:	01c00204 	movi	r7,8
    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
    9664:	00ffe004 	movi	r3,-128
        Data = szCommand[i];
        for(k=0;k<8;k++){
            SD_CLK_LOW;
    9668:	50000035 	stwio	zero,0(r10)
            if (Data & Mask)
    966c:	58d0703a 	and	r8,r11,r3
    9670:	42003fcc 	andi	r8,r8,255
    9674:	40000226 	beq	r8,zero,9680 <SDHAL_SendCmd+0x50>
                SD_CMD_HIGH;
    9678:	48800035 	stwio	r2,0(r9)
    967c:	00000106 	br	9684 <SDHAL_SendCmd+0x54>
            else
                SD_CMD_LOW;
    9680:	48000035 	stwio	zero,0(r9)
            SD_CLK_HIGH;    
    9684:	02000074 	movhi	r8,1
    9688:	42040c04 	addi	r8,r8,4144
    968c:	40800035 	stwio	r2,0(r8)
            //    
            Mask >>= 1;
    9690:	18c03fcc 	andi	r3,r3,255
    9694:	39ffffc4 	addi	r7,r7,-1
    9698:	1806d07a 	srli	r3,r3,1
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
    969c:	383ff21e 	bne	r7,zero,9668 <_gp+0xffff349c>
    96a0:	31800044 	addi	r6,r6,1
    96a4:	003feb06 	br	9654 <_gp+0xffff3488>
            //    
            Mask >>= 1;
           // usleep(1);
        }
    }
}
    96a8:	f800283a 	ret

000096ac <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
        SD_CLK_LOW;
    96ac:	00c00074 	movhi	r3,1
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
    96b0:	0005883a 	mov	r2,zero
        SD_CLK_LOW;
    96b4:	18c40c04 	addi	r3,r3,4144
        SD_CLK_HIGH;
    96b8:	01400044 	movi	r5,1
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
    96bc:	1100040e 	bge	r2,r4,96d0 <SDHAL_DummyClock+0x24>
        SD_CLK_LOW;
    96c0:	18000035 	stwio	zero,0(r3)
        SD_CLK_HIGH;
    96c4:	19400035 	stwio	r5,0(r3)
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
    96c8:	10800044 	addi	r2,r2,1
    96cc:	003ffb06 	br	96bc <_gp+0xffff34f0>
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
}
    96d0:	f800283a 	ret

000096d4 <SDHAL_GetResponse>:
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
    96d4:	00800074 	movhi	r2,1
    96d8:	10840904 	addi	r2,r2,4132
    96dc:	10000035 	stwio	zero,0(r2)
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
        SD_CLK_LOW;
    96e0:	00c00074 	movhi	r3,1
        SD_CLK_HIGH;
        if(!(SD_TEST_CMD))
    96e4:	02c00074 	movhi	r11,1
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
    96e8:	0005883a 	mov	r2,zero
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
        SD_CLK_LOW;
    96ec:	18c40c04 	addi	r3,r3,4144
        SD_CLK_HIGH;
    96f0:	02800044 	movi	r10,1
        if(!(SD_TEST_CMD))
    96f4:	5ac40804 	addi	r11,r11,4128
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
    96f8:	02000504 	movi	r8,20
        SD_CLK_LOW;
    96fc:	18000035 	stwio	zero,0(r3)
        SD_CLK_HIGH;
    9700:	01c00044 	movi	r7,1
    9704:	1a800035 	stwio	r10,0(r3)
        if(!(SD_TEST_CMD))
    9708:	5b000037 	ldwio	r12,0(r11)
    970c:	01800074 	movhi	r6,1
    9710:	02400074 	movhi	r9,1
    9714:	31840c04 	addi	r6,r6,4144
    9718:	4a440804 	addi	r9,r9,4128
    971c:	60000526 	beq	r12,zero,9734 <SDHAL_GetResponse+0x60>
    9720:	100d883a 	mov	r6,r2
    9724:	11c5883a 	add	r2,r2,r7
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
    9728:	41bff40e 	bge	r8,r6,96fc <_gp+0xffff3530>
        else if(nCnt++ > nMaxCnt)
            bTimeout = TRUE;
    }
    
    if (!bDone || bTimeout)
        return FALSE;
    972c:	0005883a 	mov	r2,zero
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
    
    return TRUE;
}
    9730:	f800283a 	ret
    if (!bDone || bTimeout)
        return FALSE;
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
    9734:	30000035 	stwio	zero,0(r6)
    SD_CLK_HIGH;
    9738:	31c00035 	stwio	r7,0(r6)
    if (SD_TEST_CMD)
    973c:	48800037 	ldwio	r2,0(r9)
    9740:	103ffa1e 	bne	r2,zero,972c <_gp+0xffff3560>
        return FALSE;   // 0 is expected

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    9744:	280a90fa 	slli	r5,r5,3
    bDone = FALSE;
    Value = 0;
    9748:	0007883a 	mov	r3,zero
    if (SD_TEST_CMD)
        return FALSE;   // 0 is expected

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    974c:	00800084 	movi	r2,2
    Value = 0;
    while(nIndex < nBitCnt){
        SD_CLK_LOW;
        SD_CLK_HIGH;
        if (SD_TEST_CMD){
            Value |= 0x80 >> (nIndex % 8);
    9750:	02802004 	movi	r10,128
        }
        if (nIndex%8 == 7){
    9754:	02c001c4 	movi	r11,7
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    bDone = FALSE;
    Value = 0;
    while(nIndex < nBitCnt){
    9758:	11400e0e 	bge	r2,r5,9794 <SDHAL_GetResponse+0xc0>
        SD_CLK_LOW;
    975c:	30000035 	stwio	zero,0(r6)
        SD_CLK_HIGH;
    9760:	31c00035 	stwio	r7,0(r6)
        if (SD_TEST_CMD){
    9764:	4b000037 	ldwio	r12,0(r9)
    9768:	120001cc 	andi	r8,r2,7
    976c:	60000226 	beq	r12,zero,9778 <SDHAL_GetResponse+0xa4>
            Value |= 0x80 >> (nIndex % 8);
    9770:	5219d83a 	sra	r12,r10,r8
    9774:	60c6b03a 	or	r3,r12,r3
        }
        if (nIndex%8 == 7){
    9778:	42c0041e 	bne	r8,r11,978c <SDHAL_GetResponse+0xb8>
            szResponse[nIndex/8] = Value;
    977c:	1011d0fa 	srai	r8,r2,3
    9780:	2211883a 	add	r8,r4,r8
    9784:	40c00005 	stb	r3,0(r8)
            Value = 0;
    9788:	0007883a 	mov	r3,zero
        }
        nIndex++;
    978c:	10800044 	addi	r2,r2,1
    9790:	003ff106 	br	9758 <_gp+0xffff358c>
}




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
    9794:	deffff04 	addi	sp,sp,-4
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
    9798:	01000204 	movi	r4,8
}




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
    979c:	dfc00015 	stw	ra,0(sp)
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
    97a0:	00096ac0 	call	96ac <SDHAL_DummyClock>
    
    return TRUE;
    97a4:	00800044 	movi	r2,1
}
    97a8:	dfc00017 	ldw	ra,0(sp)
    97ac:	dec00104 	addi	sp,sp,4
    97b0:	f800283a 	ret

000097b4 <SDHAL_ReadData>:
    
    alt_u8 Data8_0,Data8_1,Data8_2,Data8_3;
    
#endif    
    
    SD_DAT_IN;
    97b4:	00800074 	movhi	r2,1
    97b8:	10840504 	addi	r2,r2,4116
    97bc:	10000035 	stwio	zero,0(r2)
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
    97c0:	01c00074 	movhi	r7,1
      SD_CLK_HIGH;
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
    97c4:	02400074 	movhi	r9,1
    
    alt_u8 Data8_0,Data8_1,Data8_2,Data8_3;
    
#endif    
    
    SD_DAT_IN;
    97c8:	0084e284 	movi	r2,5002
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
    97cc:	39c40c04 	addi	r7,r7,4144
      SD_CLK_HIGH;
    97d0:	02000044 	movi	r8,1
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
    97d4:	4a440404 	addi	r9,r9,4112
    
    SD_DAT_IN;
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
    97d8:	38000035 	stwio	zero,0(r7)
      SD_CLK_HIGH;
    97dc:	3a000035 	stwio	r8,0(r7)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
    97e0:	48c00037 	ldwio	r3,0(r9)
    97e4:	01800074 	movhi	r6,1
    97e8:	03000074 	movhi	r12,1
    97ec:	18c003cc 	andi	r3,r3,15
    97f0:	31840c04 	addi	r6,r6,4144
    97f4:	63040404 	addi	r12,r12,4112
    97f8:	18000f1e 	bne	r3,zero,9838 <SDHAL_ReadData+0x84>
    
    return TRUE;
}


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
    97fc:	deff7904 	addi	sp,sp,-540
    9800:	dfc08615 	stw	ra,536(sp)
    9804:	dd408515 	stw	r21,532(sp)
    9808:	dd008415 	stw	r20,528(sp)
    980c:	dcc08315 	stw	r19,524(sp)
    9810:	dc808215 	stw	r18,520(sp)
    9814:	dc408115 	stw	r17,516(sp)
    9818:	dc008015 	stw	r16,512(sp)
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
    981c:	2800010e 	bge	r5,zero,9824 <SDHAL_ReadData+0x70>
    9820:	294000c4 	addi	r5,r5,3
    9824:	2821d0ba 	srai	r16,r5,2
    9828:	001b883a 	mov	r13,zero
    982c:	0007883a 	mov	r3,zero
        Data8_3 = 0;
        
        for(j=0;j<8;j++)
        {
          SD_CLK_LOW;
          SD_CLK_HIGH;
    9830:	04800044 	movi	r18,1
    9834:	00002f06 	br	98f4 <SDHAL_ReadData+0x140>
    9838:	10bfffc4 	addi	r2,r2,-1
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
    983c:	103fe61e 	bne	r2,zero,97d8 <_gp+0xffff360c>
    9840:	0005883a 	mov	r2,zero
    }            
    
#endif

    return bSuccess;
}
    9844:	f800283a 	ret
        Data8_2 = 0;
        Data8_3 = 0;
        
        for(j=0;j<8;j++)
        {
          SD_CLK_LOW;
    9848:	30000035 	stwio	zero,0(r6)
          SD_CLK_HIGH;
    984c:	34800035 	stwio	r18,0(r6)
          Data8_0 <<= 1;
          Data8_1 <<= 1;
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
    9850:	60800037 	ldwio	r2,0(r12)
          Data8   |= (DataTemp & 0x0F);
          Data8_0 |= (DataTemp & 0x01);
    9854:	1440004c 	andi	r17,r2,1
          Data8_1 <<= 1;
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
          Data8   |= (DataTemp & 0x0F);
    9858:	12c003cc 	andi	r11,r2,15
          Data8_0 |= (DataTemp & 0x01);
    985c:	4a53883a 	add	r9,r9,r9
          Data8_1 |= ((DataTemp >> 1) & 0x01);
    9860:	10803fcc 	andi	r2,r2,255
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
          Data8   |= (DataTemp & 0x0F);
          Data8_0 |= (DataTemp & 0x01);
    9864:	8a52b03a 	or	r9,r17,r9
          Data8_1 |= ((DataTemp >> 1) & 0x01);
    9868:	1022d07a 	srli	r17,r2,1
    986c:	4211883a 	add	r8,r8,r8
          Data8_1 <<= 1;
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
          Data8   |= (DataTemp & 0x0F);
    9870:	5014913a 	slli	r10,r10,4
          Data8_0 |= (DataTemp & 0x01);
          Data8_1 |= ((DataTemp >> 1) & 0x01);
    9874:	8c40004c 	andi	r17,r17,1
    9878:	8a10b03a 	or	r8,r17,r8
          Data8_2 |= ((DataTemp >> 2) & 0x01);
    987c:	1022d0ba 	srli	r17,r2,2
          Data8_3 |= ((DataTemp >> 3) & 0x01);
    9880:	1004d0fa 	srli	r2,r2,3
          Data8_1 <<= 1;
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
          Data8   |= (DataTemp & 0x0F);
    9884:	5a96b03a 	or	r11,r11,r10
          Data8_0 |= (DataTemp & 0x01);
          Data8_1 |= ((DataTemp >> 1) & 0x01);
          Data8_2 |= ((DataTemp >> 2) & 0x01);
    9888:	8c40004c 	andi	r17,r17,1
    988c:	39cf883a 	add	r7,r7,r7
          Data8_3 |= ((DataTemp >> 3) & 0x01);
    9890:	1080004c 	andi	r2,r2,1
    9894:	294b883a 	add	r5,r5,r5
          Data8_1 <<= 1;
          Data8_2 <<= 1;
          Data8_3 <<= 1; 
          
          DataTemp = SD_TEST_DAT;
          Data8   |= (DataTemp & 0x0F);
    9898:	5815883a 	mov	r10,r11
          Data8_0 |= (DataTemp & 0x01);
          Data8_1 |= ((DataTemp >> 1) & 0x01);
          Data8_2 |= ((DataTemp >> 2) & 0x01);
    989c:	89ceb03a 	or	r7,r17,r7
          Data8_3 |= ((DataTemp >> 3) & 0x01);
    98a0:	114ab03a 	or	r5,r2,r5
          
          k++;
          if(k == 2)
    98a4:	7c801c1e 	bne	r15,r18,9918 <SDHAL_ReadData+0x164>
          {
            szBuf[n++] = Data8;
    98a8:	2345883a 	add	r2,r4,r13
    98ac:	12c00005 	stb	r11,0(r2)
    98b0:	6b400044 	addi	r13,r13,1
            Data8 = 0;
    98b4:	0015883a 	mov	r10,zero
            k = 0;
    98b8:	001f883a 	mov	r15,zero
    98bc:	73bfffc4 	addi	r14,r14,-1
        Data8_0 = 0;
        Data8_1 = 0;
        Data8_2 = 0;
        Data8_3 = 0;
        
        for(j=0;j<8;j++)
    98c0:	703fe11e 	bne	r14,zero,9848 <_gp+0xffff367c>
            szBuf[n++] = Data8;
            Data8 = 0;
            k = 0;
          }
        } 
        szBuf_0[i] = Data8_0;
    98c4:	da806004 	addi	r10,sp,384
    98c8:	50c5883a 	add	r2,r10,r3
    98cc:	12400005 	stb	r9,0(r2)
        szBuf_1[i] = Data8_1;
    98d0:	da404004 	addi	r9,sp,256
    98d4:	48c5883a 	add	r2,r9,r3
        szBuf_2[i] = Data8_2;
    98d8:	da802004 	addi	r10,sp,128
            Data8 = 0;
            k = 0;
          }
        } 
        szBuf_0[i] = Data8_0;
        szBuf_1[i] = Data8_1;
    98dc:	12000005 	stb	r8,0(r2)
        szBuf_2[i] = Data8_2;
    98e0:	50c5883a 	add	r2,r10,r3
    98e4:	11c00005 	stb	r7,0(r2)
        szBuf_3[i] = Data8_3;
    98e8:	d8c5883a 	add	r2,sp,r3
    98ec:	11400005 	stb	r5,0(r2)
    }     
    
    // read data (512byte = 1 block)
    
#ifdef SD_4BIT_MODE
     for(i=0;i<nBufLen/4;i++)
    98f0:	18c00044 	addi	r3,r3,1
    98f4:	1c000a0e 	bge	r3,r16,9920 <SDHAL_ReadData+0x16c>
    98f8:	03800204 	movi	r14,8
    98fc:	000b883a 	mov	r5,zero
    9900:	000f883a 	mov	r7,zero
    9904:	0011883a 	mov	r8,zero
    9908:	0013883a 	mov	r9,zero
    990c:	0015883a 	mov	r10,zero
    9910:	001f883a 	mov	r15,zero
    9914:	003fcc06 	br	9848 <_gp+0xffff367c>
    9918:	03c00044 	movi	r15,1
    991c:	003fe706 	br	98bc <_gp+0xffff36f0>
    9920:	00c00404 	movi	r3,16
    9924:	0023883a 	mov	r17,zero
    9928:	0025883a 	mov	r18,zero
    992c:	0027883a 	mov	r19,zero
    9930:	0029883a 	mov	r20,zero
    DataCrc16_2 = 0;
    DataCrc16_3 = 0;
    for(i=0;i<16;i++)
    {
        SD_CLK_LOW;
        SD_CLK_HIGH;
    9934:	02400044 	movi	r9,1
    DataCrc16_1 = 0;
    DataCrc16_2 = 0;
    DataCrc16_3 = 0;
    for(i=0;i<16;i++)
    {
        SD_CLK_LOW;
    9938:	30000035 	stwio	zero,0(r6)
        SD_CLK_HIGH;
    993c:	32400035 	stwio	r9,0(r6)
        
        DataCrc16_0 <<= 1;
    9940:	a511883a 	add	r8,r20,r20
        DataCrc16_1 <<= 1;
    9944:	9ccf883a 	add	r7,r19,r19
        DataCrc16_2 <<= 1;
    9948:	948b883a 	add	r5,r18,r18
        DataCrc16_3 <<= 1;
    994c:	8c49883a 	add	r4,r17,r17
    for(i=0;i<16;i++)
    {
        SD_CLK_LOW;
        SD_CLK_HIGH;
        
        DataCrc16_0 <<= 1;
    9950:	4029883a 	mov	r20,r8
        DataCrc16_1 <<= 1;
    9954:	3827883a 	mov	r19,r7
        DataCrc16_2 <<= 1;
    9958:	2825883a 	mov	r18,r5
        DataCrc16_3 <<= 1;
    995c:	2023883a 	mov	r17,r4
        
        DataTemp = SD_TEST_DAT;
    9960:	60800037 	ldwio	r2,0(r12)
        
        if (DataTemp & 0x01)
    9964:	1280004c 	andi	r10,r2,1
    9968:	50000126 	beq	r10,zero,9970 <SDHAL_ReadData+0x1bc>
            DataCrc16_0 |= 0x01;
    996c:	45000054 	ori	r20,r8,1
         if(DataTemp & 0x02)
    9970:	1200008c 	andi	r8,r2,2
    9974:	40000126 	beq	r8,zero,997c <SDHAL_ReadData+0x1c8>
            DataCrc16_1 |= 0x01;
    9978:	3cc00054 	ori	r19,r7,1
         if(DataTemp & 0x04)
    997c:	11c0010c 	andi	r7,r2,4
    9980:	38000126 	beq	r7,zero,9988 <SDHAL_ReadData+0x1d4>
            DataCrc16_2 |= 0x01;
    9984:	2c800054 	ori	r18,r5,1
         if(DataTemp & 0x08)
    9988:	1080020c 	andi	r2,r2,8
    998c:	10000126 	beq	r2,zero,9994 <SDHAL_ReadData+0x1e0>
            DataCrc16_3 |= 0x01;
    9990:	24400054 	ori	r17,r4,1
    9994:	18ffffc4 	addi	r3,r3,-1
    // Not implement yet
    DataCrc16_0 = 0;
    DataCrc16_1 = 0;
    DataCrc16_2 = 0;
    DataCrc16_3 = 0;
    for(i=0;i<16;i++)
    9998:	183fe71e 	bne	r3,zero,9938 <_gp+0xffff376c>
         if(DataTemp & 0x08)
            DataCrc16_3 |= 0x01;
    }
    
    // check end bit (value 'one' is expected
    SD_CLK_LOW;
    999c:	30000035 	stwio	zero,0(r6)
    SD_CLK_HIGH;
    99a0:	00800044 	movi	r2,1
    99a4:	30800035 	stwio	r2,0(r6)
    if ((SD_TEST_DAT & 0x0F) != 0x0F)
    99a8:	65400037 	ldwio	r21,0(r12)
        bSuccess = FALSE;
     
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
    99ac:	01000204 	movi	r4,8
    99b0:	00096ac0 	call	96ac <SDHAL_DummyClock>
     
    // check crc    
    if (bSuccess){
    99b4:	ad4003cc 	andi	r21,r21,15
    99b8:	008003c4 	movi	r2,15
    99bc:	a880191e 	bne	r21,r2,9a24 <SDHAL_ReadData+0x270>
        MyCrc16_0 = crc16(szBuf_0, nBufLen/4);
    99c0:	800b883a 	mov	r5,r16
    99c4:	d9006004 	addi	r4,sp,384
    99c8:	000941c0 	call	941c <crc16>
        if (MyCrc16_0 != DataCrc16_0)
    99cc:	a53fffcc 	andi	r20,r20,65535
    99d0:	10bfffcc 	andi	r2,r2,65535
    99d4:	a080131e 	bne	r20,r2,9a24 <SDHAL_ReadData+0x270>
            bSuccess = FALSE;
    }    
    if (bSuccess){
        MyCrc16_1 = crc16(szBuf_1, nBufLen/4);
    99d8:	800b883a 	mov	r5,r16
    99dc:	d9004004 	addi	r4,sp,256
    99e0:	000941c0 	call	941c <crc16>
        if (MyCrc16_1 != DataCrc16_1)
    99e4:	9cffffcc 	andi	r19,r19,65535
    99e8:	10bfffcc 	andi	r2,r2,65535
    99ec:	98800d1e 	bne	r19,r2,9a24 <SDHAL_ReadData+0x270>
            bSuccess = FALSE;
    }   
    if (bSuccess){
        MyCrc16_2 = crc16(szBuf_2, nBufLen/4);
    99f0:	800b883a 	mov	r5,r16
    99f4:	d9002004 	addi	r4,sp,128
    99f8:	000941c0 	call	941c <crc16>
        if (MyCrc16_2 != DataCrc16_2)
    99fc:	94bfffcc 	andi	r18,r18,65535
    9a00:	10bfffcc 	andi	r2,r2,65535
    9a04:	9080071e 	bne	r18,r2,9a24 <SDHAL_ReadData+0x270>
            bSuccess = FALSE;
    } 
    if (bSuccess){
        MyCrc16_3 = crc16(szBuf_3, nBufLen/4);
    9a08:	800b883a 	mov	r5,r16
    9a0c:	d809883a 	mov	r4,sp
    9a10:	000941c0 	call	941c <crc16>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    9a14:	8c7fffcc 	andi	r17,r17,65535
    9a18:	10bfffcc 	andi	r2,r2,65535
    9a1c:	8885003a 	cmpeq	r2,r17,r2
    9a20:	00000106 	br	9a28 <SDHAL_ReadData+0x274>
    9a24:	0005883a 	mov	r2,zero
    }            
    
#endif

    return bSuccess;
}
    9a28:	dfc08617 	ldw	ra,536(sp)
    9a2c:	dd408517 	ldw	r21,532(sp)
    9a30:	dd008417 	ldw	r20,528(sp)
    9a34:	dcc08317 	ldw	r19,524(sp)
    9a38:	dc808217 	ldw	r18,520(sp)
    9a3c:	dc408117 	ldw	r17,516(sp)
    9a40:	dc008017 	ldw	r16,512(sp)
    9a44:	dec08704 	addi	sp,sp,540
    9a48:	f800283a 	ret

00009a4c <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
    9a4c:	defffd04 	addi	sp,sp,-12
    9a50:	dc400115 	stw	r17,4(sp)
    9a54:	dc000015 	stw	r16,0(sp)
    9a58:	2823883a 	mov	r17,r5
    9a5c:	dfc00215 	stw	ra,8(sp)
    9a60:	2021883a 	mov	r16,r4
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
    9a64:	000941c0 	call	941c <crc16>
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
    9a68:	01400074 	movhi	r5,1
    9a6c:	00800044 	movi	r2,1
    9a70:	29440504 	addi	r5,r5,4116
    9a74:	28800035 	stwio	r2,0(r5)
    // start bits (zero value)
    SD_CLK_LOW;
    9a78:	00c00074 	movhi	r3,1
    9a7c:	18c40c04 	addi	r3,r3,4144
    9a80:	18000035 	stwio	zero,0(r3)
    SD_DAT_WRITE(0x00);  
    9a84:	01000074 	movhi	r4,1
    9a88:	21040404 	addi	r4,r4,4112
    9a8c:	20000035 	stwio	zero,0(r4)
    SD_CLK_HIGH;
    9a90:	18800035 	stwio	r2,0(r3)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    9a94:	800d883a 	mov	r6,r16
    9a98:	340fc83a 	sub	r7,r6,r16
    9a9c:	3c400c0e 	bge	r7,r17,9ad0 <SDHAL_WriteData+0x84>
    {
      Data8 = szDataWrite[i];
    9aa0:	31c00003 	ldbu	r7,0(r6)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
      {
        SD_CLK_LOW;
    9aa4:	18000035 	stwio	zero,0(r3)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
    9aa8:	3a003fcc 	andi	r8,r7,255
    9aac:	4010d13a 	srli	r8,r8,4
    9ab0:	22000035 	stwio	r8,0(r4)
        //            
        SD_CLK_HIGH;
    9ab4:	18800035 	stwio	r2,0(r3)
    {
      Data8 = szDataWrite[i];
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
      {
        SD_CLK_LOW;
    9ab8:	18000035 	stwio	zero,0(r3)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
    9abc:	39c003cc 	andi	r7,r7,15
    9ac0:	21c00035 	stwio	r7,0(r4)
        //            
        SD_CLK_HIGH;
    9ac4:	18800035 	stwio	r2,0(r3)
    9ac8:	31800044 	addi	r6,r6,1
    9acc:	003ff206 	br	9a98 <_gp+0xffff38cc>

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
    9ad0:	18000035 	stwio	zero,0(r3)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
    9ad4:	008003c4 	movi	r2,15
    9ad8:	20800035 	stwio	r2,0(r4)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
    9adc:	00800044 	movi	r2,1
    9ae0:	18800035 	stwio	r2,0(r3)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
    9ae4:	28000035 	stwio	zero,0(r5)
    9ae8:	01400804 	movi	r5,32
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
    SD_CLK_LOW;
    9aec:	18000035 	stwio	zero,0(r3)
    SD_CLK_HIGH;
    9af0:	18800035 	stwio	r2,0(r3)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
    9af4:	24000037 	ldwio	r16,0(r4)
    9af8:	297fffc4 	addi	r5,r5,-1
    9afc:	8400004c 	andi	r16,r16,1
    SD_CLK_HIGH;
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
    9b00:	28000226 	beq	r5,zero,9b0c <SDHAL_WriteData+0xc0>
    9b04:	803ff926 	beq	r16,zero,9aec <_gp+0xffff3920>

    return bSuccess;
}

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
    bool bSuccess = TRUE;
    9b08:	04000044 	movi	r16,1
}
    if (!bWriteSuccess)
        bSuccess = FALSE;
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
    9b0c:	01000204 	movi	r4,8
    9b10:	00096ac0 	call	96ac <SDHAL_DummyClock>
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
    
}
    9b14:	8005883a 	mov	r2,r16
    9b18:	dfc00217 	ldw	ra,8(sp)
    9b1c:	dc400117 	ldw	r17,4(sp)
    9b20:	dc000017 	ldw	r16,0(sp)
    9b24:	dec00304 	addi	sp,sp,12
    9b28:	f800283a 	ret

00009b2c <SDLIB_Init>:
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
    9b2c:	defff604 	addi	sp,sp,-40
    9b30:	dc000415 	stw	r16,16(sp)
    const int nTimeout = alt_ticks_per_second();
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
    9b34:	04000074 	movhi	r16,1
    9b38:	84395a04 	addi	r16,r16,-6808
    9b3c:	000b883a 	mov	r5,zero
    9b40:	01800e04 	movi	r6,56
    9b44:	8009883a 	mov	r4,r16
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
    9b48:	dfc00915 	stw	ra,36(sp)
    9b4c:	dc800615 	stw	r18,24(sp)
    9b50:	dc400515 	stw	r17,20(sp)
    9b54:	dd000815 	stw	r20,32(sp)
    9b58:	dcc00715 	stw	r19,28(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    9b5c:	d4a0e617 	ldw	r18,-31848(gp)
    const int nTimeout = alt_ticks_per_second();
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
    9b60:	000c1700 	call	c170 <memset>
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
    9b64:	0009dcc0 	call	9dcc <SD_IsSupport4Bits>

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
    9b68:	0100b904 	movi	r4,740
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
    9b6c:	80800015 	stw	r2,0(r16)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
    9b70:	000d6a80 	call	d6a8 <usleep>
    
    SD_Init();
    9b74:	0009dc80 	call	9dc8 <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
    9b78:	0009dd00 	call	9dd0 <SD_CMD0>
    usleep(100*1000);
    9b7c:	010000b4 	movhi	r4,2
    9b80:	2121a804 	addi	r4,r4,-31072
    9b84:	000d6a80 	call	d6a8 <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
    9b88:	04400044 	movi	r17,1
    9b8c:	01402a84 	movi	r5,170
    9b90:	8809883a 	mov	r4,r17
    9b94:	0009e340 	call	9e34 <SD_CMD8>
    9b98:	10000626 	beq	r2,zero,9bb4 <SDLIB_Init+0x88>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
    9b9c:	00904034 	movhi	r2,16640
    9ba0:	10a00004 	addi	r2,r2,-32768
    9ba4:	80800315 	stw	r2,12(r16)
        gSdInfo.bVer2 = TRUE;
    9ba8:	84400115 	stw	r17,4(r16)
        gSdInfo.bSDHC = TRUE;
    9bac:	84400215 	stw	r17,8(r16)
    9bb0:	00000606 	br	9bcc <SDLIB_Init+0xa0>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
    9bb4:	00800134 	movhi	r2,4
    9bb8:	80800315 	stw	r2,12(r16)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
    9bbc:	0009dd00 	call	9dd0 <SD_CMD0>
        usleep(100*1000);        
    9bc0:	010000b4 	movhi	r4,2
    9bc4:	2121a804 	addi	r4,r4,-31072
    9bc8:	000d6a80 	call	d6a8 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9bcc:	d4e0e517 	ldw	r19,-31852(gp)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
    9bd0:	05000074 	movhi	r20,1
    9bd4:	a5395a04 	addi	r20,r20,-6808
    9bd8:	8100050b 	ldhu	r4,20(r16)
    9bdc:	04400074 	movhi	r17,1
    9be0:	000b883a 	mov	r5,zero
    9be4:	8c795a04 	addi	r17,r17,-6808
    9be8:	000a4140 	call	a414 <SD_CMD55>
    9bec:	1000021e 	bne	r2,zero,9bf8 <SDLIB_Init+0xcc>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
    9bf0:	0005883a 	mov	r2,zero
    9bf4:	00004006 	br	9cf8 <SDLIB_Init+0x1cc>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
    9bf8:	a1000317 	ldw	r4,12(r20)
    9bfc:	89400404 	addi	r5,r17,16
    9c00:	0009f240 	call	9f24 <SD_ACMD41>
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
    9c04:	10003626 	beq	r2,zero,9ce0 <SDLIB_Init+0x1b4>
    9c08:	88800217 	ldw	r2,8(r17)
    9c0c:	10000426 	beq	r2,zero,9c20 <SDLIB_Init+0xf4>
    9c10:	88800417 	ldw	r2,16(r17)
    9c14:	1090002c 	andhi	r2,r2,16384
    9c18:	1000011e 	bne	r2,zero,9c20 <SDLIB_Init+0xf4>
                gSdInfo.bSDHC = FALSE;
    9c1c:	88000215 	stw	zero,8(r17)
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
    9c20:	01000074 	movhi	r4,1
    9c24:	01400444 	movi	r5,17
    9c28:	21395f84 	addi	r4,r4,-6786
    9c2c:	000a0040 	call	a004 <SD_CMD2>
    9c30:	103fef26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
    9c34:	01000074 	movhi	r4,1
    9c38:	21395f04 	addi	r4,r4,-6788
    9c3c:	000a10c0 	call	a10c <SD_CMD3>
    9c40:	103feb26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
    9c44:	04400074 	movhi	r17,1
    9c48:	8100050b 	ldhu	r4,20(r16)
    9c4c:	8c795a04 	addi	r17,r17,-6808
    9c50:	01800444 	movi	r6,17
    9c54:	894009c4 	addi	r5,r17,39
    9c58:	000a20c0 	call	a20c <SD_CMD9>
    9c5c:	103fe426 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
        return FALSE;
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
    9c60:	8900050b 	ldhu	r4,20(r17)
    9c64:	01800404 	movi	r6,16
    9c68:	d80b883a 	mov	r5,sp
    9c6c:	000a2fc0 	call	a2fc <SD_CMD10>
    9c70:	103fdf26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
    9c74:	8900050b 	ldhu	r4,20(r17)
    9c78:	000a5000 	call	a500 <SD_CMD7>
    9c7c:	103fdc26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
    9c80:	01008004 	movi	r4,512
    9c84:	000a5d80 	call	a5d8 <SD_CMD16>
    9c88:	103fd926 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
    }       
    
    if (gSdInfo.bSupport4Bits){ 
    9c8c:	88800017 	ldw	r2,0(r17)
    9c90:	10001126 	beq	r2,zero,9cd8 <SDLIB_Init+0x1ac>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
    9c94:	8900050b 	ldhu	r4,20(r17)
    9c98:	01400104 	movi	r5,4
    9c9c:	000a4140 	call	a414 <SD_CMD55>
    9ca0:	103fd326 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
    9ca4:	01400104 	movi	r5,4
    9ca8:	01000044 	movi	r4,1
    9cac:	000a6b80 	call	a6b8 <SD_ACMD6>
    9cb0:	103fcf26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
            return FALSE;
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
    9cb4:	8900050b 	ldhu	r4,20(r17)
    9cb8:	01400104 	movi	r5,4
    9cbc:	000a4140 	call	a414 <SD_CMD55>
    9cc0:	103fcb26 	beq	r2,zero,9bf0 <_gp+0xffff3a24>
            return FALSE;
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
    9cc4:	01400104 	movi	r5,4
    9cc8:	01000044 	movi	r4,1
    9ccc:	000a7b00 	call	a7b0 <SD_ACMD42>
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
    9cd0:	1004c03a 	cmpne	r2,r2,zero
    9cd4:	00000806 	br	9cf8 <SDLIB_Init+0x1cc>
        printf("!!!!!write ng\r\n");
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
    9cd8:	00800044 	movi	r2,1
    9cdc:	00000606 	br	9cf8 <SDLIB_Init+0x1cc>
    9ce0:	d0a0e517 	ldw	r2,-31852(gp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
                gSdInfo.bSDHC = FALSE;
            }    
            // check timeout
            if (!bSuccess){
                if ((alt_nticks() - TimeStart) > nTimeout){
    9ce4:	14c5c83a 	sub	r2,r2,r19
    9ce8:	90bfc136 	bltu	r18,r2,9bf0 <_gp+0xffff3a24>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
                }else{
                    usleep(10*1000);
    9cec:	0109c404 	movi	r4,10000
    9cf0:	000d6a80 	call	d6a8 <usleep>
    9cf4:	003fb806 	br	9bd8 <_gp+0xffff3a0c>
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
}
    9cf8:	dfc00917 	ldw	ra,36(sp)
    9cfc:	dd000817 	ldw	r20,32(sp)
    9d00:	dcc00717 	ldw	r19,28(sp)
    9d04:	dc800617 	ldw	r18,24(sp)
    9d08:	dc400517 	ldw	r17,20(sp)
    9d0c:	dc000417 	ldw	r16,16(sp)
    9d10:	dec00a04 	addi	sp,sp,40
    9d14:	f800283a 	ret

00009d18 <SDLIB_ReadBlock512>:
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
    9d18:	00800074 	movhi	r2,1
    9d1c:	10b95a04 	addi	r2,r2,-6808
    9d20:	10800217 	ldw	r2,8(r2)
    return TRUE;
}


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
    9d24:	defffe04 	addi	sp,sp,-8
    9d28:	dc000015 	stw	r16,0(sp)
    9d2c:	dfc00115 	stw	ra,4(sp)
    9d30:	2821883a 	mov	r16,r5
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
    9d34:	1000011e 	bne	r2,zero,9d3c <SDLIB_ReadBlock512+0x24>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
    else 
        addr = block_number * 512;
    9d38:	2008927a 	slli	r4,r4,9
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
    9d3c:	01400104 	movi	r5,4
    9d40:	000a89c0 	call	a89c <SD_CMD17>
    9d44:	10000626 	beq	r2,zero,9d60 <SDLIB_ReadBlock512+0x48>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
    9d48:	01408004 	movi	r5,512
    9d4c:	8009883a 	mov	r4,r16
    
    //
    return bSuccess;
}
    9d50:	dfc00117 	ldw	ra,4(sp)
    9d54:	dc000017 	ldw	r16,0(sp)
    9d58:	dec00204 	addi	sp,sp,8
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
    9d5c:	000a3ec1 	jmpi	a3ec <SD_ReadData>
    
    //
    return bSuccess;
}
    9d60:	dfc00117 	ldw	ra,4(sp)
    9d64:	dc000017 	ldw	r16,0(sp)
    9d68:	dec00204 	addi	sp,sp,8
    9d6c:	f800283a 	ret

00009d70 <SDLIB_WriteBlock512>:
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
    9d70:	00800074 	movhi	r2,1
    9d74:	10b95a04 	addi	r2,r2,-6808
    9d78:	10800217 	ldw	r2,8(r2)
    //
    return bSuccess;
}

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
    9d7c:	defffe04 	addi	sp,sp,-8
    9d80:	dc000015 	stw	r16,0(sp)
    9d84:	dfc00115 	stw	ra,4(sp)
    9d88:	2821883a 	mov	r16,r5
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
    9d8c:	1000011e 	bne	r2,zero,9d94 <SDLIB_WriteBlock512+0x24>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
    else 
        addr = block_number * 512;
    9d90:	2008927a 	slli	r4,r4,9
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
    9d94:	01400104 	movi	r5,4
    9d98:	000a97c0 	call	a97c <SD_CMD24>
    9d9c:	10000626 	beq	r2,zero,9db8 <SDLIB_WriteBlock512+0x48>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
    9da0:	01408004 	movi	r5,512
    9da4:	8009883a 	mov	r4,r16
    
    //
    return bSuccess;
}
    9da8:	dfc00117 	ldw	ra,4(sp)
    9dac:	dc000017 	ldw	r16,0(sp)
    9db0:	dec00204 	addi	sp,sp,8
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
    9db4:	000a3f01 	jmpi	a3f0 <SD_WriteData>
    
    //
    return bSuccess;
}
    9db8:	dfc00117 	ldw	ra,4(sp)
    9dbc:	dc000017 	ldw	r16,0(sp)
    9dc0:	dec00204 	addi	sp,sp,8
    9dc4:	f800283a 	ret

00009dc8 <SD_Init>:
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
    SDHAL_Init();
    9dc8:	00095e81 	jmpi	95e8 <SDHAL_Init>

00009dcc <SD_IsSupport4Bits>:
}

bool SD_IsSupport4Bits(void){
    return SDHAL_IsSupport4Bits();
    9dcc:	00095e01 	jmpi	95e0 <SDHAL_IsSupport4Bits>

00009dd0 <SD_CMD0>:
}



void SD_CMD0(void){
    9dd0:	defffd04 	addi	sp,sp,-12
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
    crc = crc7(0, szCmd, 5);
    9dd4:	01800144 	movi	r6,5
    9dd8:	d80b883a 	mov	r5,sp
}



void SD_CMD0(void){
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    9ddc:	00801004 	movi	r2,64

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
    crc = crc7(0, szCmd, 5);
    9de0:	0009883a 	mov	r4,zero
    return SDHAL_IsSupport4Bits();
}



void SD_CMD0(void){
    9de4:	dfc00215 	stw	ra,8(sp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    9de8:	d8800005 	stb	r2,0(sp)
    9dec:	d8000045 	stb	zero,1(sp)
    9df0:	d8000085 	stb	zero,2(sp)
    9df4:	d80000c5 	stb	zero,3(sp)
    9df8:	d8000105 	stb	zero,4(sp)
    9dfc:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
    crc = crc7(0, szCmd, 5);
    9e00:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    9e04:	10803fcc 	andi	r2,r2,255
    9e08:	1085883a 	add	r2,r2,r2
    9e0c:	10800054 	ori	r2,r2,1
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9e10:	01400184 	movi	r5,6
    9e14:	d809883a 	mov	r4,sp

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    9e18:	d8800145 	stb	r2,5(sp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9e1c:	00096300 	call	9630 <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
    9e20:	01000204 	movi	r4,8
    9e24:	00096ac0 	call	96ac <SDHAL_DummyClock>
    
}
    9e28:	dfc00217 	ldw	ra,8(sp)
    9e2c:	dec00304 	addi	sp,sp,12
    9e30:	f800283a 	ret

00009e34 <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
    9e34:	defff904 	addi	sp,sp,-28
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    9e38:	00801204 	movi	r2,72
    SDHAL_DummyClock(8);
    
}


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
    9e3c:	dc400415 	stw	r17,16(sp)
    9e40:	dc000315 	stw	r16,12(sp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    9e44:	d8800005 	stb	r2,0(sp)
    szCmd[3] |= (VolId & 0x0F);
    szCmd[4] = TestPattern;
    9e48:	d9400105 	stb	r5,4(sp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[3] |= (VolId & 0x0F);
    9e4c:	208003cc 	andi	r2,r4,15
    szCmd[4] = TestPattern;
    crc = crc7(0, szCmd, 5);
    9e50:	01800144 	movi	r6,5
    SDHAL_DummyClock(8);
    
}


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
    9e54:	2023883a 	mov	r17,r4
    9e58:	2821883a 	mov	r16,r5
    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[3] |= (VolId & 0x0F);
    szCmd[4] = TestPattern;
    crc = crc7(0, szCmd, 5);
    9e5c:	0009883a 	mov	r4,zero
    9e60:	d80b883a 	mov	r5,sp
    SDHAL_DummyClock(8);
    
}


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
    9e64:	dfc00615 	stw	ra,24(sp)
    9e68:	dc800515 	stw	r18,20(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    9e6c:	d8000045 	stb	zero,1(sp)
    9e70:	d8000085 	stb	zero,2(sp)
    9e74:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[3] |= (VolId & 0x0F);
    9e78:	d88000c5 	stb	r2,3(sp)
    szCmd[4] = TestPattern;
    crc = crc7(0, szCmd, 5);
    9e7c:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    9e80:	10803fcc 	andi	r2,r2,255
    9e84:	1085883a 	add	r2,r2,r2
    9e88:	10800054 	ori	r2,r2,1
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9e8c:	01400184 	movi	r5,6
    9e90:	d809883a 	mov	r4,sp
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[3] |= (VolId & 0x0F);
    szCmd[4] = TestPattern;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    9e94:	d8800145 	stb	r2,5(sp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9e98:	00096300 	call	9630 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    9e9c:	01400184 	movi	r5,6
    9ea0:	d949883a 	add	r4,sp,r5
    9ea4:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    9ea8:	10000426 	beq	r2,zero,9ebc <SD_CMD8+0x88>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    9eac:	d8c00183 	ldbu	r3,6(sp)
    9eb0:	1025883a 	mov	r18,r2
    9eb4:	00800204 	movi	r2,8
    9eb8:	18800226 	beq	r3,r2,9ec4 <SD_CMD8+0x90>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    9ebc:	0025883a 	mov	r18,zero
    9ec0:	00001106 	br	9f08 <SD_CMD8+0xd4>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
    9ec4:	d8800243 	ldbu	r2,9(sp)
    9ec8:	8c403fcc 	andi	r17,r17,255
    9ecc:	88bffb1e 	bne	r17,r2,9ebc <_gp+0xffff3cf0>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
    9ed0:	d8800283 	ldbu	r2,10(sp)
    9ed4:	84003fcc 	andi	r16,r16,255
    9ed8:	80bff81e 	bne	r16,r2,9ebc <_gp+0xffff3cf0>
        }
        
        // check crc
        if (bSuccess){
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    9edc:	0009883a 	mov	r4,zero
    9ee0:	01800144 	movi	r6,5
    9ee4:	d9400184 	addi	r5,sp,6
    9ee8:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    9eec:	d8c002c3 	ldbu	r3,11(sp)
    9ef0:	10803fcc 	andi	r2,r2,255
    9ef4:	19003fcc 	andi	r4,r3,255
    9ef8:	2008d07a 	srli	r4,r4,1
    9efc:	113fef1e 	bne	r2,r4,9ebc <_gp+0xffff3cf0>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    9f00:	18c0004c 	andi	r3,r3,1
    9f04:	183fed26 	beq	r3,zero,9ebc <_gp+0xffff3cf0>
         
    }
    
    return bSuccess;
    
}
    9f08:	9005883a 	mov	r2,r18
    9f0c:	dfc00617 	ldw	ra,24(sp)
    9f10:	dc800517 	ldw	r18,20(sp)
    9f14:	dc400417 	ldw	r17,16(sp)
    9f18:	dc000317 	ldw	r16,12(sp)
    9f1c:	dec00704 	addi	sp,sp,28
    9f20:	f800283a 	ret

00009f24 <SD_ACMD41>:
    return bSuccess;
    
}

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
    9f24:	defffb04 	addi	sp,sp,-20
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    9f28:	00801a44 	movi	r2,105
    9f2c:	d8800005 	stb	r2,0(sp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    9f30:	2004d63a 	srli	r2,r4,24
    return bSuccess;
    
}

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
    9f34:	dc000315 	stw	r16,12(sp)
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
    szCmd[4] = HostOCR32 & 0xFF;
    9f38:	d9000105 	stb	r4,4(sp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    9f3c:	1080100c 	andi	r2,r2,64
    9f40:	d8800045 	stb	r2,1(sp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
    9f44:	2004d43a 	srli	r2,r4,16
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
    9f48:	01800144 	movi	r6,5
    return bSuccess;
    
}

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
    9f4c:	2821883a 	mov	r16,r5
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
    9f50:	d8800085 	stb	r2,2(sp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
    9f54:	2004d23a 	srli	r2,r4,8
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
    9f58:	d80b883a 	mov	r5,sp
    9f5c:	0009883a 	mov	r4,zero
    return bSuccess;
    
}

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
    9f60:	dfc00415 	stw	ra,16(sp)
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
    9f64:	d8000145 	stb	zero,5(sp)
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
    9f68:	d88000c5 	stb	r2,3(sp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
    9f6c:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    9f70:	10803fcc 	andi	r2,r2,255
    9f74:	1085883a 	add	r2,r2,r2
    9f78:	10800054 	ori	r2,r2,1
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9f7c:	01400184 	movi	r5,6
    9f80:	d809883a 	mov	r4,sp
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    9f84:	d8800145 	stb	r2,5(sp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    9f88:	00096300 	call	9630 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    9f8c:	01400184 	movi	r5,6
    9f90:	d949883a 	add	r4,sp,r5
    9f94:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    if (bSuccess){
    9f98:	10001626 	beq	r2,zero,9ff4 <SD_ACMD41+0xd0>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
    9f9c:	d9000183 	ldbu	r4,6(sp)
    9fa0:	00c00fc4 	movi	r3,63
    9fa4:	20c00126 	beq	r4,r3,9fac <SD_ACMD41+0x88>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    9fa8:	0005883a 	mov	r2,zero
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
    9fac:	0009883a 	mov	r4,zero
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
    9fb0:	0007883a 	mov	r3,zero
        for(i=0;i<4;i++){
    9fb4:	01400104 	movi	r5,4
            OCR <<= 8;
            OCR |= szResponse[i+1];
    9fb8:	21000044 	addi	r4,r4,1
    9fbc:	d9c00184 	addi	r7,sp,6
    9fc0:	390d883a 	add	r6,r7,r4
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
            OCR <<= 8;
    9fc4:	1806923a 	slli	r3,r3,8
            OCR |= szResponse[i+1];
    9fc8:	31800003 	ldbu	r6,0(r6)
    9fcc:	30c6b03a 	or	r3,r6,r3
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
    9fd0:	217ff91e 	bne	r4,r5,9fb8 <_gp+0xffff3dec>
            OCR <<= 8;
            OCR |= szResponse[i+1];
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
    9fd4:	1800040e 	bge	r3,zero,9fe8 <SD_ACMD41+0xc4>
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
    9fd8:	10000626 	beq	r2,zero,9ff4 <SD_ACMD41+0xd0>
    9fdc:	d94002c3 	ldbu	r5,11(sp)
    9fe0:	01003fc4 	movi	r4,255
    9fe4:	29000226 	beq	r5,r4,9ff0 <SD_ACMD41+0xcc>
    9fe8:	0005883a 	mov	r2,zero
    9fec:	00000106 	br	9ff4 <SD_ACMD41+0xd0>
        }
          
    }      
    
   if (bSuccess)
      *pOCR32 = OCR;  
    9ff0:	80c00015 	stw	r3,0(r16)

    return bSuccess;
}
    9ff4:	dfc00417 	ldw	ra,16(sp)
    9ff8:	dc000317 	ldw	r16,12(sp)
    9ffc:	dec00504 	addi	sp,sp,20
    a000:	f800283a 	ret

0000a004 <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
    a004:	defff604 	addi	sp,sp,-40
    a008:	dc400715 	stw	r17,28(sp)
    a00c:	dc000615 	stw	r16,24(sp)
    const alt_u8 Cmd = 2;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a010:	00801084 	movi	r2,66
    crc = crc7(0, szCmd, 5);
    a014:	01800144 	movi	r6,5
}

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
    a018:	2021883a 	mov	r16,r4
    a01c:	2823883a 	mov	r17,r5
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    crc = crc7(0, szCmd, 5);
    a020:	0009883a 	mov	r4,zero
    a024:	d9400444 	addi	r5,sp,17
}

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
    a028:	dfc00915 	stw	ra,36(sp)
    a02c:	dc800815 	stw	r18,32(sp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a030:	d8000485 	stb	zero,18(sp)
    a034:	d80004c5 	stb	zero,19(sp)
    a038:	d8000505 	stb	zero,20(sp)
    a03c:	d8000545 	stb	zero,21(sp)
    a040:	d8000585 	stb	zero,22(sp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a044:	d8800445 	stb	r2,17(sp)
    crc = crc7(0, szCmd, 5);
    a048:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a04c:	10803fcc 	andi	r2,r2,255
    a050:	1085883a 	add	r2,r2,r2
    a054:	10800054 	ori	r2,r2,1
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a058:	01400184 	movi	r5,6
    a05c:	d9000444 	addi	r4,sp,17

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a060:	d8800585 	stb	r2,22(sp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a064:	00096300 	call	9630 <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a068:	01400444 	movi	r5,17
    a06c:	d809883a 	mov	r4,sp
    a070:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a074:	10000d26 	beq	r2,zero,a0ac <SD_CMD2+0xa8>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    a078:	d8c00003 	ldbu	r3,0(sp)
    a07c:	1025883a 	mov	r18,r2
    a080:	00800fc4 	movi	r2,63
    a084:	1880091e 	bne	r3,r2,a0ac <SD_CMD2+0xa8>
        
        
        // check crc
        if (bSuccess){
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    a088:	0009883a 	mov	r4,zero
    a08c:	018003c4 	movi	r6,15
    a090:	d9400044 	addi	r5,sp,1
    a094:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[16] >> 1)){
    a098:	d8c00403 	ldbu	r3,16(sp)
    a09c:	10803fcc 	andi	r2,r2,255
    a0a0:	19003fcc 	andi	r4,r3,255
    a0a4:	2008d07a 	srli	r4,r4,1
    a0a8:	11000226 	beq	r2,r4,a0b4 <SD_CMD2+0xb0>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a0ac:	0025883a 	mov	r18,zero
            szCID[x] = szResponse[x+1];
        
    }
    
    return bSuccess;
    a0b0:	00000f06 	br	a0f0 <SD_CMD2+0xec>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    a0b4:	18c0004c 	andi	r3,r3,1
    a0b8:	183ffc26 	beq	r3,zero,a0ac <_gp+0xffff3ee0>
    a0bc:	00800404 	movi	r2,16
    a0c0:	880b883a 	mov	r5,r17
    a0c4:	1440010e 	bge	r2,r17,a0cc <SD_CMD2+0xc8>
    a0c8:	100b883a 	mov	r5,r2
    a0cc:	8009883a 	mov	r4,r16
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a0d0:	0005883a 	mov	r2,zero
    a0d4:	1140060e 	bge	r2,r5,a0f0 <SD_CMD2+0xec>
            szCID[x] = szResponse[x+1];
    a0d8:	10800044 	addi	r2,r2,1
    a0dc:	d887883a 	add	r3,sp,r2
    a0e0:	18c00003 	ldbu	r3,0(r3)
    a0e4:	21000044 	addi	r4,r4,1
    a0e8:	20ffffc5 	stb	r3,-1(r4)
    a0ec:	003ff906 	br	a0d4 <_gp+0xffff3f08>
        
    }
    
    return bSuccess;
    
}
    a0f0:	9005883a 	mov	r2,r18
    a0f4:	dfc00917 	ldw	ra,36(sp)
    a0f8:	dc800817 	ldw	r18,32(sp)
    a0fc:	dc400717 	ldw	r17,28(sp)
    a100:	dc000617 	ldw	r16,24(sp)
    a104:	dec00a04 	addi	sp,sp,40
    a108:	f800283a 	ret

0000a10c <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
    a10c:	defff904 	addi	sp,sp,-28
    a110:	dc400415 	stw	r17,16(sp)
    const alt_u8 Cmd = 3;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a114:	008010c4 	movi	r2,67
    crc = crc7(0, szCmd, 5);
    a118:	01800144 	movi	r6,5
    a11c:	d80b883a 	mov	r5,sp
    return bSuccess;
    
}

//
bool SD_CMD3(alt_u16 *pRCA16){
    a120:	2023883a 	mov	r17,r4
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    crc = crc7(0, szCmd, 5);
    a124:	0009883a 	mov	r4,zero
    return bSuccess;
    
}

//
bool SD_CMD3(alt_u16 *pRCA16){
    a128:	dfc00615 	stw	ra,24(sp)
    a12c:	dc800515 	stw	r18,20(sp)
    a130:	dc000315 	stw	r16,12(sp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a134:	d8000045 	stb	zero,1(sp)
    a138:	d8000085 	stb	zero,2(sp)
    a13c:	d80000c5 	stb	zero,3(sp)
    a140:	d8000105 	stb	zero,4(sp)
    a144:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a148:	d8800005 	stb	r2,0(sp)
    crc = crc7(0, szCmd, 5);
    a14c:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a150:	10803fcc 	andi	r2,r2,255
    a154:	1085883a 	add	r2,r2,r2
    a158:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a15c:	01400184 	movi	r5,6
    a160:	d809883a 	mov	r4,sp

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a164:	d8800145 	stb	r2,5(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a168:	00096300 	call	9630 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a16c:	01400184 	movi	r5,6
    a170:	d949883a 	add	r4,sp,r5
    a174:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a178:	10001a26 	beq	r2,zero,a1e4 <SD_CMD3+0xd8>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    a17c:	d8c00183 	ldbu	r3,6(sp)
    a180:	1021883a 	mov	r16,r2
    a184:	008000c4 	movi	r2,3
    a188:	18800126 	beq	r3,r2,a190 <SD_CMD3+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a18c:	0021883a 	mov	r16,zero
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
    a190:	dc8001c3 	ldbu	r18,7(sp)
    a194:	d8800203 	ldbu	r2,8(sp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
        State8 = SD_CURRENT_STATE_DECODE(Status16);
        if (State8 != SD_STATE_IDENT){
    a198:	00c00084 	movi	r3,2
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
    a19c:	9024923a 	slli	r18,r18,8
    a1a0:	90a4b03a 	or	r18,r18,r2
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
        State8 = SD_CURRENT_STATE_DECODE(Status16);
        if (State8 != SD_STATE_IDENT){
    a1a4:	d8800243 	ldbu	r2,9(sp)
    a1a8:	1004d07a 	srli	r2,r2,1
    a1ac:	108003cc 	andi	r2,r2,15
    a1b0:	10c00c1e 	bne	r2,r3,a1e4 <SD_CMD3+0xd8>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
        }
        
        // check crc
        if (bSuccess){
    a1b4:	80000b26 	beq	r16,zero,a1e4 <SD_CMD3+0xd8>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a1b8:	0009883a 	mov	r4,zero
    a1bc:	01800144 	movi	r6,5
    a1c0:	d9400184 	addi	r5,sp,6
    a1c4:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a1c8:	d8c002c3 	ldbu	r3,11(sp)
    a1cc:	10803fcc 	andi	r2,r2,255
    a1d0:	19003fcc 	andi	r4,r3,255
    a1d4:	2008d07a 	srli	r4,r4,1
    a1d8:	1100021e 	bne	r2,r4,a1e4 <SD_CMD3+0xd8>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a1dc:	18c0004c 	andi	r3,r3,1
    a1e0:	1800021e 	bne	r3,zero,a1ec <SD_CMD3+0xe0>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a1e4:	0021883a 	mov	r16,zero
    a1e8:	00000106 	br	a1f0 <SD_CMD3+0xe4>
        }
          
    }
    
    if (bSuccess)
        *pRCA16 = RCA16;
    a1ec:	8c80000d 	sth	r18,0(r17)
    
    return bSuccess;
    
}
    a1f0:	8005883a 	mov	r2,r16
    a1f4:	dfc00617 	ldw	ra,24(sp)
    a1f8:	dc800517 	ldw	r18,20(sp)
    a1fc:	dc400417 	ldw	r17,16(sp)
    a200:	dc000317 	ldw	r16,12(sp)
    a204:	dec00704 	addi	sp,sp,28
    a208:	f800283a 	ret

0000a20c <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
    a20c:	defff704 	addi	sp,sp,-36
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a210:	00801244 	movi	r2,73
    a214:	d8800445 	stb	r2,17(sp)
    szCmd[1] |= RCA16 >> 8;
    a218:	2004d23a 	srli	r2,r4,8
    
    return bSuccess;
    
}

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
    a21c:	dc000615 	stw	r16,24(sp)
    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    a220:	d90004c5 	stb	r4,19(sp)
    crc = crc7(0, szCmd, 5);
    a224:	01800144 	movi	r6,5
    a228:	0009883a 	mov	r4,zero
    
    return bSuccess;
    
}

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
    a22c:	2821883a 	mov	r16,r5

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a230:	d9400444 	addi	r5,sp,17
    
    return bSuccess;
    
}

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
    a234:	dfc00815 	stw	ra,32(sp)
    a238:	dc400715 	stw	r17,28(sp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a23c:	d8000505 	stb	zero,20(sp)
    a240:	d8000545 	stb	zero,21(sp)
    a244:	d8000585 	stb	zero,22(sp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    a248:	d8800485 	stb	r2,18(sp)
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a24c:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a250:	10803fcc 	andi	r2,r2,255
    a254:	1085883a 	add	r2,r2,r2
    a258:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a25c:	01400184 	movi	r5,6
    a260:	d9000444 	addi	r4,sp,17
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a264:	d8800585 	stb	r2,22(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a268:	00096300 	call	9630 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a26c:	01400444 	movi	r5,17
    a270:	d809883a 	mov	r4,sp
    a274:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a278:	10000d26 	beq	r2,zero,a2b0 <SD_CMD9+0xa4>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    a27c:	d8c00003 	ldbu	r3,0(sp)
    a280:	1023883a 	mov	r17,r2
    a284:	00800fc4 	movi	r2,63
    a288:	1880091e 	bne	r3,r2,a2b0 <SD_CMD9+0xa4>
        }
        
        // check crc
        if (bSuccess){
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    a28c:	0009883a 	mov	r4,zero
    a290:	018003c4 	movi	r6,15
    a294:	d9400044 	addi	r5,sp,1
    a298:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[16] >> 1)){
    a29c:	d8c00403 	ldbu	r3,16(sp)
    a2a0:	10803fcc 	andi	r2,r2,255
    a2a4:	19003fcc 	andi	r4,r3,255
    a2a8:	2008d07a 	srli	r4,r4,1
    a2ac:	11000226 	beq	r2,r4,a2b8 <SD_CMD9+0xac>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    a2b0:	0023883a 	mov	r17,zero
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
    a2b4:	00000b06 	br	a2e4 <SD_CMD9+0xd8>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    a2b8:	18c0004c 	andi	r3,r3,1
    a2bc:	183ffc26 	beq	r3,zero,a2b0 <_gp+0xffff40e4>
    a2c0:	800b883a 	mov	r5,r16
    a2c4:	0005883a 	mov	r2,zero
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a2c8:	00c00404 	movi	r3,16
            szCSD[x] = szResponse[x+1];           
    a2cc:	10800044 	addi	r2,r2,1
    a2d0:	d889883a 	add	r4,sp,r2
    a2d4:	21000003 	ldbu	r4,0(r4)
    a2d8:	29400044 	addi	r5,r5,1
    a2dc:	293fffc5 	stb	r4,-1(r5)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a2e0:	10fffa1e 	bne	r2,r3,a2cc <_gp+0xffff4100>
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
}
    a2e4:	8805883a 	mov	r2,r17
    a2e8:	dfc00817 	ldw	ra,32(sp)
    a2ec:	dc400717 	ldw	r17,28(sp)
    a2f0:	dc000617 	ldw	r16,24(sp)
    a2f4:	dec00904 	addi	sp,sp,36
    a2f8:	f800283a 	ret

0000a2fc <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
    a2fc:	defff704 	addi	sp,sp,-36
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a300:	00801284 	movi	r2,74
    a304:	d8800445 	stb	r2,17(sp)
    szCmd[1] |= RCA16 >> 8;
    a308:	2004d23a 	srli	r2,r4,8
    }        
    
    return bSuccess;
}

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
    a30c:	dc000615 	stw	r16,24(sp)
    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    a310:	d90004c5 	stb	r4,19(sp)
    crc = crc7(0, szCmd, 5);
    a314:	01800144 	movi	r6,5
    a318:	0009883a 	mov	r4,zero
    }        
    
    return bSuccess;
}

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
    a31c:	2821883a 	mov	r16,r5

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a320:	d9400444 	addi	r5,sp,17
    }        
    
    return bSuccess;
}

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
    a324:	dfc00815 	stw	ra,32(sp)
    a328:	dc400715 	stw	r17,28(sp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a32c:	d8000505 	stb	zero,20(sp)
    a330:	d8000545 	stb	zero,21(sp)
    a334:	d8000585 	stb	zero,22(sp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    a338:	d8800485 	stb	r2,18(sp)
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a33c:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a340:	10803fcc 	andi	r2,r2,255
    a344:	1085883a 	add	r2,r2,r2
    a348:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a34c:	01400184 	movi	r5,6
    a350:	d9000444 	addi	r4,sp,17
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a354:	d8800585 	stb	r2,22(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a358:	00096300 	call	9630 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a35c:	01400444 	movi	r5,17
    a360:	d809883a 	mov	r4,sp
    a364:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a368:	10000d26 	beq	r2,zero,a3a0 <SD_CMD10+0xa4>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    a36c:	d8c00003 	ldbu	r3,0(sp)
    a370:	1023883a 	mov	r17,r2
    a374:	00800fc4 	movi	r2,63
    a378:	1880091e 	bne	r3,r2,a3a0 <SD_CMD10+0xa4>
        }
        
        // check crc
        if (bSuccess){
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    a37c:	0009883a 	mov	r4,zero
    a380:	018003c4 	movi	r6,15
    a384:	d9400044 	addi	r5,sp,1
    a388:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[16] >> 1)){
    a38c:	d8c00403 	ldbu	r3,16(sp)
    a390:	10803fcc 	andi	r2,r2,255
    a394:	19003fcc 	andi	r4,r3,255
    a398:	2008d07a 	srli	r4,r4,1
    a39c:	11000226 	beq	r2,r4,a3a8 <SD_CMD10+0xac>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    a3a0:	0023883a 	mov	r17,zero
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
    a3a4:	00000b06 	br	a3d4 <SD_CMD10+0xd8>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    a3a8:	18c0004c 	andi	r3,r3,1
    a3ac:	183ffc26 	beq	r3,zero,a3a0 <_gp+0xffff41d4>
    a3b0:	800b883a 	mov	r5,r16
    a3b4:	0005883a 	mov	r2,zero
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a3b8:	00c00404 	movi	r3,16
            szCID[x] = szResponse[x+1];           
    a3bc:	10800044 	addi	r2,r2,1
    a3c0:	d889883a 	add	r4,sp,r2
    a3c4:	21000003 	ldbu	r4,0(r4)
    a3c8:	29400044 	addi	r5,r5,1
    a3cc:	293fffc5 	stb	r4,-1(r5)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    a3d0:	10fffa1e 	bne	r2,r3,a3bc <_gp+0xffff41f0>
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
}
    a3d4:	8805883a 	mov	r2,r17
    a3d8:	dfc00817 	ldw	ra,32(sp)
    a3dc:	dc400717 	ldw	r17,28(sp)
    a3e0:	dc000617 	ldw	r16,24(sp)
    a3e4:	dec00904 	addi	sp,sp,36
    a3e8:	f800283a 	ret

0000a3ec <SD_ReadData>:
}


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
    a3ec:	00097b41 	jmpi	97b4 <SDHAL_ReadData>

0000a3f0 <SD_WriteData>:
    return bSuccess;
}

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
    a3f0:	0009a4c1 	jmpi	9a4c <SDHAL_WriteData>

0000a3f4 <ArrayToU32>:
    return bSuccess;
}


alt_u32 ArrayToU32(alt_u8 szData[]){
    a3f4:	20c00104 	addi	r3,r4,4
    alt_u32 Value32 = 0;
    a3f8:	0005883a 	mov	r2,zero
    int i;
    
    for(i=0;i<4;i++){
        Value32 <<= 8;
        Value32 |= szData[i];
    a3fc:	21400003 	ldbu	r5,0(r4)
alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
        Value32 <<= 8;
    a400:	1004923a 	slli	r2,r2,8
    a404:	21000044 	addi	r4,r4,1
        Value32 |= szData[i];
    a408:	2884b03a 	or	r2,r5,r2

alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
    a40c:	20fffb1e 	bne	r4,r3,a3fc <_gp+0xffff4230>
        Value32 <<= 8;
        Value32 |= szData[i];
    }
    return Value32;
}
    a410:	f800283a 	ret

0000a414 <SD_CMD55>:
    
    return bSuccess;
    
}

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
    a414:	defffa04 	addi	sp,sp,-24
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a418:	00801dc4 	movi	r2,119
    a41c:	d8800005 	stb	r2,0(sp)
    szCmd[1] = RCA16 >> 8;
    a420:	2004d23a 	srli	r2,r4,8
    
    return bSuccess;
    
}

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
    a424:	dc000315 	stw	r16,12(sp)
    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] = RCA16 >> 8;
    szCmd[2] = RCA16 & 0xFF;
    a428:	d9000085 	stb	r4,2(sp)
    crc = crc7(0, szCmd, 5);
    a42c:	01800144 	movi	r6,5
    a430:	0009883a 	mov	r4,zero
    
    return bSuccess;
    
}

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
    a434:	2821883a 	mov	r16,r5

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] = RCA16 >> 8;
    szCmd[2] = RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a438:	d80b883a 	mov	r5,sp
    
    return bSuccess;
    
}

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
    a43c:	dfc00515 	stw	ra,20(sp)
    a440:	dc400415 	stw	r17,16(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a444:	d80000c5 	stb	zero,3(sp)
    a448:	d8000105 	stb	zero,4(sp)
    a44c:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] = RCA16 >> 8;
    a450:	d8800045 	stb	r2,1(sp)
    szCmd[2] = RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a454:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a458:	10803fcc 	andi	r2,r2,255
    a45c:	1085883a 	add	r2,r2,r2
    a460:	10800054 	ori	r2,r2,1
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a464:	01400184 	movi	r5,6
    a468:	d809883a 	mov	r4,sp
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] = RCA16 >> 8;
    szCmd[2] = RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a46c:	d8800145 	stb	r2,5(sp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a470:	00096300 	call	9630 <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a474:	01400184 	movi	r5,6
    a478:	d949883a 	add	r4,sp,r5
    a47c:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a480:	10001526 	beq	r2,zero,a4d8 <SD_CMD55+0xc4>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    a484:	d8c00183 	ldbu	r3,6(sp)
    a488:	1023883a 	mov	r17,r2
    a48c:	00800dc4 	movi	r2,55
    a490:	18800126 	beq	r3,r2,a498 <SD_CMD55+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
    a494:	0023883a 	mov	r17,zero
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a498:	840003cc 	andi	r16,r16,15
    a49c:	8020927a 	slli	r16,r16,9
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    a4a0:	d90001c4 	addi	r4,sp,7
    a4a4:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a4a8:	84004814 	ori	r16,r16,288
    a4ac:	14000a1e 	bne	r2,r16,a4d8 <SD_CMD55+0xc4>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // check crc
        if (bSuccess){
    a4b0:	88000926 	beq	r17,zero,a4d8 <SD_CMD55+0xc4>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a4b4:	0009883a 	mov	r4,zero
    a4b8:	01800144 	movi	r6,5
    a4bc:	d9400184 	addi	r5,sp,6
    a4c0:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a4c4:	d8c002c3 	ldbu	r3,11(sp)
    a4c8:	10803fcc 	andi	r2,r2,255
    a4cc:	19003fcc 	andi	r4,r3,255
    a4d0:	2008d07a 	srli	r4,r4,1
    a4d4:	11000226 	beq	r2,r4,a4e0 <SD_CMD55+0xcc>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a4d8:	0023883a 	mov	r17,zero
    a4dc:	00000206 	br	a4e8 <SD_CMD55+0xd4>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a4e0:	18c0004c 	andi	r3,r3,1
    a4e4:	183ffc26 	beq	r3,zero,a4d8 <_gp+0xffff430c>
          
    }
    
    return bSuccess;
    
}
    a4e8:	8805883a 	mov	r2,r17
    a4ec:	dfc00517 	ldw	ra,20(sp)
    a4f0:	dc400417 	ldw	r17,16(sp)
    a4f4:	dc000317 	ldw	r16,12(sp)
    a4f8:	dec00604 	addi	sp,sp,24
    a4fc:	f800283a 	ret

0000a500 <SD_CMD7>:
    
    return bSuccess;
}


bool SD_CMD7(alt_u16 RCA16){
    a500:	defffb04 	addi	sp,sp,-20
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a504:	008011c4 	movi	r2,71
    a508:	d8800005 	stb	r2,0(sp)
    szCmd[1] |= RCA16 >> 8;
    a50c:	2004d23a 	srli	r2,r4,8
    szCmd[2] |= RCA16 & 0xFF;
    a510:	d9000085 	stb	r4,2(sp)
    crc = crc7(0, szCmd, 5);
    a514:	01800144 	movi	r6,5
    a518:	d80b883a 	mov	r5,sp
    a51c:	0009883a 	mov	r4,zero
    
    return bSuccess;
}


bool SD_CMD7(alt_u16 RCA16){
    a520:	dfc00415 	stw	ra,16(sp)
    a524:	dc000315 	stw	r16,12(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a528:	d80000c5 	stb	zero,3(sp)
    a52c:	d8000105 	stb	zero,4(sp)
    a530:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    a534:	d8800045 	stb	r2,1(sp)
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    a538:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a53c:	10803fcc 	andi	r2,r2,255
    a540:	1085883a 	add	r2,r2,r2
    a544:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a548:	01400184 	movi	r5,6
    a54c:	d809883a 	mov	r4,sp
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= RCA16 >> 8;
    szCmd[2] |= RCA16 & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a550:	d8800145 	stb	r2,5(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a554:	00096300 	call	9630 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a558:	01400184 	movi	r5,6
    a55c:	d949883a 	add	r4,sp,r5
    a560:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a564:	10001326 	beq	r2,zero,a5b4 <SD_CMD7+0xb4>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    a568:	d8c00183 	ldbu	r3,6(sp)
    a56c:	1021883a 	mov	r16,r2
    a570:	008001c4 	movi	r2,7
    a574:	18800126 	beq	r3,r2,a57c <SD_CMD7+0x7c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a578:	0021883a 	mov	r16,zero
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    a57c:	d90001c4 	addi	r4,sp,7
    a580:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
        if (CardStatus != ExpectedStatus){
    a584:	00c1c004 	movi	r3,1792
    a588:	10c00a1e 	bne	r2,r3,a5b4 <SD_CMD7+0xb4>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }        
        
        // check crc
        if (bSuccess){
    a58c:	80000926 	beq	r16,zero,a5b4 <SD_CMD7+0xb4>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a590:	0009883a 	mov	r4,zero
    a594:	01800144 	movi	r6,5
    a598:	d9400184 	addi	r5,sp,6
    a59c:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a5a0:	d8c002c3 	ldbu	r3,11(sp)
    a5a4:	10803fcc 	andi	r2,r2,255
    a5a8:	19003fcc 	andi	r4,r3,255
    a5ac:	2008d07a 	srli	r4,r4,1
    a5b0:	11000226 	beq	r2,r4,a5bc <SD_CMD7+0xbc>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a5b4:	0021883a 	mov	r16,zero
    a5b8:	00000206 	br	a5c4 <SD_CMD7+0xc4>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a5bc:	18c0004c 	andi	r3,r3,1
    a5c0:	183ffc26 	beq	r3,zero,a5b4 <_gp+0xffff43e8>
    }
    
     
    
    return bSuccess;
}
    a5c4:	8005883a 	mov	r2,r16
    a5c8:	dfc00417 	ldw	ra,16(sp)
    a5cc:	dc000317 	ldw	r16,12(sp)
    a5d0:	dec00504 	addi	sp,sp,20
    a5d4:	f800283a 	ret

0000a5d8 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
    a5d8:	defffb04 	addi	sp,sp,-20
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a5dc:	00801404 	movi	r2,80
    a5e0:	d8800005 	stb	r2,0(sp)
    szCmd[1] |= BlockSize >> 24;
    a5e4:	2004d63a 	srli	r2,r4,24
    szCmd[2] |= BlockSize >> 16;
    szCmd[3] |= BlockSize >> 8;
    szCmd[4] |= BlockSize & 0xFF;
    a5e8:	d9000105 	stb	r4,4(sp)
    crc = crc7(0, szCmd, 5);
    a5ec:	01800144 	movi	r6,5

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= BlockSize >> 24;
    a5f0:	d8800045 	stb	r2,1(sp)
    szCmd[2] |= BlockSize >> 16;
    a5f4:	2004d43a 	srli	r2,r4,16
    szCmd[3] |= BlockSize >> 8;
    szCmd[4] |= BlockSize & 0xFF;
    crc = crc7(0, szCmd, 5);
    a5f8:	d80b883a 	mov	r5,sp
     
    
    return bSuccess;
}

bool SD_CMD16(alt_u32 BlockSize){
    a5fc:	dfc00415 	stw	ra,16(sp)
    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= BlockSize >> 24;
    szCmd[2] |= BlockSize >> 16;
    a600:	d8800085 	stb	r2,2(sp)
    szCmd[3] |= BlockSize >> 8;
    a604:	2004d23a 	srli	r2,r4,8
    szCmd[4] |= BlockSize & 0xFF;
    crc = crc7(0, szCmd, 5);
    a608:	0009883a 	mov	r4,zero
     
    
    return bSuccess;
}

bool SD_CMD16(alt_u32 BlockSize){
    a60c:	dc000315 	stw	r16,12(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a610:	d8000145 	stb	zero,5(sp)

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= BlockSize >> 24;
    szCmd[2] |= BlockSize >> 16;
    szCmd[3] |= BlockSize >> 8;
    a614:	d88000c5 	stb	r2,3(sp)
    szCmd[4] |= BlockSize & 0xFF;
    crc = crc7(0, szCmd, 5);
    a618:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a61c:	10803fcc 	andi	r2,r2,255
    a620:	1085883a 	add	r2,r2,r2
    a624:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a628:	01400184 	movi	r5,6
    a62c:	d809883a 	mov	r4,sp
    szCmd[1] |= BlockSize >> 24;
    szCmd[2] |= BlockSize >> 16;
    szCmd[3] |= BlockSize >> 8;
    szCmd[4] |= BlockSize & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a630:	d8800145 	stb	r2,5(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a634:	00096300 	call	9630 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a638:	01400184 	movi	r5,6
    a63c:	d949883a 	add	r4,sp,r5
    a640:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a644:	10001326 	beq	r2,zero,a694 <SD_CMD16+0xbc>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    a648:	d8c00183 	ldbu	r3,6(sp)
    a64c:	1021883a 	mov	r16,r2
    a650:	00800404 	movi	r2,16
    a654:	18800126 	beq	r3,r2,a65c <SD_CMD16+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a658:	0021883a 	mov	r16,zero
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    a65c:	d90001c4 	addi	r4,sp,7
    a660:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
        if (CardStatus != ExpectedStatus){
    a664:	00c24004 	movi	r3,2304
    a668:	10c00a1e 	bne	r2,r3,a694 <SD_CMD16+0xbc>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }        
        
        // check crc
        if (bSuccess){
    a66c:	80000926 	beq	r16,zero,a694 <SD_CMD16+0xbc>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a670:	0009883a 	mov	r4,zero
    a674:	01800144 	movi	r6,5
    a678:	d9400184 	addi	r5,sp,6
    a67c:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a680:	d8c002c3 	ldbu	r3,11(sp)
    a684:	10803fcc 	andi	r2,r2,255
    a688:	19003fcc 	andi	r4,r3,255
    a68c:	2008d07a 	srli	r4,r4,1
    a690:	11000226 	beq	r2,r4,a69c <SD_CMD16+0xc4>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a694:	0021883a 	mov	r16,zero
    a698:	00000206 	br	a6a4 <SD_CMD16+0xcc>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a69c:	18c0004c 	andi	r3,r3,1
    a6a0:	183ffc26 	beq	r3,zero,a694 <_gp+0xffff44c8>
    }
    
     
    
    return bSuccess;
}
    a6a4:	8005883a 	mov	r2,r16
    a6a8:	dfc00417 	ldw	ra,16(sp)
    a6ac:	dc000317 	ldw	r16,12(sp)
    a6b0:	dec00504 	addi	sp,sp,20
    a6b4:	f800283a 	ret

0000a6b8 <SD_ACMD6>:

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?2:0;
    a6b8:	2008c03a 	cmpne	r4,r4,zero
    a6bc:	2008907a 	slli	r4,r4,1
    return bSuccess;
}

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
    a6c0:	defff904 	addi	sp,sp,-28
    a6c4:	dc000315 	stw	r16,12(sp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a6c8:	00801184 	movi	r2,70
    szCmd[4] |= b4BitsBus?2:0;
    a6cc:	d9000105 	stb	r4,4(sp)
    crc = crc7(0, szCmd, 5);
    a6d0:	01800144 	movi	r6,5
    a6d4:	0009883a 	mov	r4,zero
    return bSuccess;
}

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
    a6d8:	2821883a 	mov	r16,r5
    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?2:0;
    crc = crc7(0, szCmd, 5);
    a6dc:	d80b883a 	mov	r5,sp
    return bSuccess;
}

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
    a6e0:	dfc00615 	stw	ra,24(sp)
    a6e4:	dc800515 	stw	r18,20(sp)
    a6e8:	dc400415 	stw	r17,16(sp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
    a6ec:	d8000045 	stb	zero,1(sp)
    a6f0:	d8000085 	stb	zero,2(sp)
    a6f4:	d80000c5 	stb	zero,3(sp)
    a6f8:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a6fc:	d8800005 	stb	r2,0(sp)
    szCmd[4] |= b4BitsBus?2:0;
    crc = crc7(0, szCmd, 5);
    a700:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a704:	10803fcc 	andi	r2,r2,255
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a708:	04800184 	movi	r18,6

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?2:0;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a70c:	1085883a 	add	r2,r2,r2
    a710:	10800054 	ori	r2,r2,1
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a714:	900b883a 	mov	r5,r18
    a718:	d809883a 	mov	r4,sp

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?2:0;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a71c:	d8800145 	stb	r2,5(sp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a720:	00096300 	call	9630 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a724:	900b883a 	mov	r5,r18
    a728:	dc89883a 	add	r4,sp,r18
    a72c:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    if (bSuccess){
    a730:	10001426 	beq	r2,zero,a784 <SD_ACMD6+0xcc>
    a734:	1023883a 	mov	r17,r2
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    a738:	d8800183 	ldbu	r2,6(sp)
    a73c:	14800126 	beq	r2,r18,a744 <SD_ACMD6+0x8c>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    a740:	0023883a 	mov	r17,zero
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a744:	840003cc 	andi	r16,r16,15
    a748:	8020927a 	slli	r16,r16,9
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
    a74c:	d90001c4 	addi	r4,sp,7
    a750:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a754:	84004814 	ori	r16,r16,288
    a758:	14000a1e 	bne	r2,r16,a784 <SD_ACMD6+0xcc>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }
                
        // check crc
        if (bSuccess){
    a75c:	88000926 	beq	r17,zero,a784 <SD_ACMD6+0xcc>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a760:	0009883a 	mov	r4,zero
    a764:	01800144 	movi	r6,5
    a768:	d9400184 	addi	r5,sp,6
    a76c:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a770:	d8c002c3 	ldbu	r3,11(sp)
    a774:	10803fcc 	andi	r2,r2,255
    a778:	19003fcc 	andi	r4,r3,255
    a77c:	2008d07a 	srli	r4,r4,1
    a780:	11000226 	beq	r2,r4,a78c <SD_ACMD6+0xd4>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a784:	0023883a 	mov	r17,zero
    a788:	00000206 	br	a794 <SD_ACMD6+0xdc>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a78c:	18c0004c 	andi	r3,r3,1
    a790:	183ffc26 	beq	r3,zero,a784 <_gp+0xffff45b8>
          
    }      
    

    return bSuccess;
}
    a794:	8805883a 	mov	r2,r17
    a798:	dfc00617 	ldw	ra,24(sp)
    a79c:	dc800517 	ldw	r18,20(sp)
    a7a0:	dc400417 	ldw	r17,16(sp)
    a7a4:	dc000317 	ldw	r16,12(sp)
    a7a8:	dec00704 	addi	sp,sp,28
    a7ac:	f800283a 	ret

0000a7b0 <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
    a7b0:	defffa04 	addi	sp,sp,-24

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?1:0;
    a7b4:	2008c03a 	cmpne	r4,r4,zero
    return bSuccess;
}

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
    a7b8:	dc000315 	stw	r16,12(sp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a7bc:	00801a84 	movi	r2,106
    szCmd[4] |= b4BitsBus?1:0;
    a7c0:	d9000105 	stb	r4,4(sp)
    crc = crc7(0, szCmd, 5);
    a7c4:	01800144 	movi	r6,5
    a7c8:	0009883a 	mov	r4,zero
    return bSuccess;
}

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
    a7cc:	2821883a 	mov	r16,r5
    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?1:0;
    crc = crc7(0, szCmd, 5);
    a7d0:	d80b883a 	mov	r5,sp
    return bSuccess;
}

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
    a7d4:	dfc00515 	stw	ra,20(sp)
    a7d8:	dc400415 	stw	r17,16(sp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
    a7dc:	d8000045 	stb	zero,1(sp)
    a7e0:	d8000085 	stb	zero,2(sp)
    a7e4:	d80000c5 	stb	zero,3(sp)
    a7e8:	d8000145 	stb	zero,5(sp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    a7ec:	d8800005 	stb	r2,0(sp)
    szCmd[4] |= b4BitsBus?1:0;
    crc = crc7(0, szCmd, 5);
    a7f0:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a7f4:	10803fcc 	andi	r2,r2,255
    a7f8:	1085883a 	add	r2,r2,r2
    a7fc:	10800054 	ori	r2,r2,1
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a800:	01400184 	movi	r5,6
    a804:	d809883a 	mov	r4,sp

    // build packet    
    szCmd[0] |= Cmd;
    szCmd[4] |= b4BitsBus?1:0;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a808:	d8800145 	stb	r2,5(sp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a80c:	00096300 	call	9630 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a810:	01400184 	movi	r5,6
    a814:	d949883a 	add	r4,sp,r5
    a818:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    if (bSuccess){
    a81c:	10001526 	beq	r2,zero,a874 <SD_ACMD42+0xc4>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    a820:	d8c00183 	ldbu	r3,6(sp)
    a824:	1023883a 	mov	r17,r2
    a828:	00800a84 	movi	r2,42
    a82c:	18800126 	beq	r3,r2,a834 <SD_ACMD42+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    a830:	0023883a 	mov	r17,zero
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a834:	840003cc 	andi	r16,r16,15
    a838:	8020927a 	slli	r16,r16,9
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
    a83c:	d90001c4 	addi	r4,sp,7
    a840:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
        if (CardStatus != ExpectedStatus){
    a844:	84004814 	ori	r16,r16,288
    a848:	14000a1e 	bne	r2,r16,a874 <SD_ACMD42+0xc4>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }
                
        // check crc
        if (bSuccess){
    a84c:	88000926 	beq	r17,zero,a874 <SD_ACMD42+0xc4>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a850:	0009883a 	mov	r4,zero
    a854:	01800144 	movi	r6,5
    a858:	d9400184 	addi	r5,sp,6
    a85c:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a860:	d8c002c3 	ldbu	r3,11(sp)
    a864:	10803fcc 	andi	r2,r2,255
    a868:	19003fcc 	andi	r4,r3,255
    a86c:	2008d07a 	srli	r4,r4,1
    a870:	11000226 	beq	r2,r4,a87c <SD_ACMD42+0xcc>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a874:	0023883a 	mov	r17,zero
    a878:	00000206 	br	a884 <SD_ACMD42+0xd4>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a87c:	18c0004c 	andi	r3,r3,1
    a880:	183ffc26 	beq	r3,zero,a874 <_gp+0xffff46a8>
          
    }      
    

    return bSuccess;
}
    a884:	8805883a 	mov	r2,r17
    a888:	dfc00517 	ldw	ra,20(sp)
    a88c:	dc400417 	ldw	r17,16(sp)
    a890:	dc000317 	ldw	r16,12(sp)
    a894:	dec00604 	addi	sp,sp,24
    a898:	f800283a 	ret

0000a89c <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
    a89c:	defffb04 	addi	sp,sp,-20
    const alt_u8 Cmd = 17;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a8a0:	00801444 	movi	r2,81
    a8a4:	d8800005 	stb	r2,0(sp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
    a8a8:	2004d63a 	srli	r2,r4,24
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    a8ac:	d9000105 	stb	r4,4(sp)
    crc = crc7(0, szCmd, 5);
    a8b0:	01800144 	movi	r6,5
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    a8b4:	d8800045 	stb	r2,1(sp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
    a8b8:	2004d43a 	srli	r2,r4,16
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a8bc:	d80b883a 	mov	r5,sp
}


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
    a8c0:	dfc00415 	stw	ra,16(sp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    a8c4:	d8800085 	stb	r2,2(sp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
    a8c8:	2004d23a 	srli	r2,r4,8
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a8cc:	0009883a 	mov	r4,zero
}


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
    a8d0:	dc000315 	stw	r16,12(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a8d4:	d8000145 	stb	zero,5(sp)
    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    a8d8:	d88000c5 	stb	r2,3(sp)
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a8dc:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a8e0:	10803fcc 	andi	r2,r2,255
    a8e4:	1085883a 	add	r2,r2,r2
    a8e8:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a8ec:	01400184 	movi	r5,6
    a8f0:	d809883a 	mov	r4,sp
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a8f4:	d8800145 	stb	r2,5(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a8f8:	00096300 	call	9630 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a8fc:	01400184 	movi	r5,6
    a900:	d949883a 	add	r4,sp,r5
    a904:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a908:	10001326 	beq	r2,zero,a958 <SD_CMD17+0xbc>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    a90c:	d8c00183 	ldbu	r3,6(sp)
    a910:	1021883a 	mov	r16,r2
    a914:	00800444 	movi	r2,17
    a918:	18800126 	beq	r3,r2,a920 <SD_CMD17+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a91c:	0021883a 	mov	r16,zero
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    a920:	d90001c4 	addi	r4,sp,7
    a924:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
        if (CardStatus != ExpectedStatus){
    a928:	00c24004 	movi	r3,2304
    a92c:	10c00a1e 	bne	r2,r3,a958 <SD_CMD17+0xbc>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }        
        
        // check crc
        if (bSuccess){
    a930:	80000926 	beq	r16,zero,a958 <SD_CMD17+0xbc>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    a934:	0009883a 	mov	r4,zero
    a938:	01800144 	movi	r6,5
    a93c:	d9400184 	addi	r5,sp,6
    a940:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    a944:	d8c002c3 	ldbu	r3,11(sp)
    a948:	10803fcc 	andi	r2,r2,255
    a94c:	19003fcc 	andi	r4,r3,255
    a950:	2008d07a 	srli	r4,r4,1
    a954:	11000226 	beq	r2,r4,a960 <SD_CMD17+0xc4>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    a958:	0021883a 	mov	r16,zero
    a95c:	00000206 	br	a968 <SD_CMD17+0xcc>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    a960:	18c0004c 	andi	r3,r3,1
    a964:	183ffc26 	beq	r3,zero,a958 <_gp+0xffff478c>
    }
    
     
    
    return bSuccess;
}
    a968:	8005883a 	mov	r2,r16
    a96c:	dfc00417 	ldw	ra,16(sp)
    a970:	dc000317 	ldw	r16,12(sp)
    a974:	dec00504 	addi	sp,sp,20
    a978:	f800283a 	ret

0000a97c <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
    a97c:	defffb04 	addi	sp,sp,-20
    const alt_u8 Cmd = 24;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    a980:	00801604 	movi	r2,88
    a984:	d8800005 	stb	r2,0(sp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
    a988:	2004d63a 	srli	r2,r4,24
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    a98c:	d9000105 	stb	r4,4(sp)
    crc = crc7(0, szCmd, 5);
    a990:	01800144 	movi	r6,5
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    a994:	d8800045 	stb	r2,1(sp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
    a998:	2004d43a 	srli	r2,r4,16
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a99c:	d80b883a 	mov	r5,sp
    return bSuccess;
}

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
    a9a0:	dfc00415 	stw	ra,16(sp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    a9a4:	d8800085 	stb	r2,2(sp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
    a9a8:	2004d23a 	srli	r2,r4,8
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a9ac:	0009883a 	mov	r4,zero
    return bSuccess;
}

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
    a9b0:	dc000315 	stw	r16,12(sp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    a9b4:	d8000145 	stb	zero,5(sp)
    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    a9b8:	d88000c5 	stb	r2,3(sp)
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    a9bc:	00094880 	call	9488 <crc7>
    szCmd[5] = (crc << 1) | 0x01;
    a9c0:	10803fcc 	andi	r2,r2,255
    a9c4:	1085883a 	add	r2,r2,r2
    a9c8:	10800054 	ori	r2,r2,1

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a9cc:	01400184 	movi	r5,6
    a9d0:	d809883a 	mov	r4,sp
    szCmd[1] |= (Addr >> 24) & 0xFF;
    szCmd[2] |= (Addr >> 16) & 0xFF;
    szCmd[3] |= (Addr >> 8) & 0xFF;
    szCmd[4] |= Addr & 0xFF;
    crc = crc7(0, szCmd, 5);
    szCmd[5] = (crc << 1) | 0x01;
    a9d4:	d8800145 	stb	r2,5(sp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    a9d8:	00096300 	call	9630 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    a9dc:	01400184 	movi	r5,6
    a9e0:	d949883a 	add	r4,sp,r5
    a9e4:	00096d40 	call	96d4 <SDHAL_GetResponse>
    
    // check response content
    if (bSuccess){
    a9e8:	10001326 	beq	r2,zero,aa38 <SD_CMD24+0xbc>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    a9ec:	d8c00183 	ldbu	r3,6(sp)
    a9f0:	1021883a 	mov	r16,r2
    a9f4:	00800604 	movi	r2,24
    a9f8:	18800126 	beq	r3,r2,aa00 <SD_CMD24+0x84>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    a9fc:	0021883a 	mov	r16,zero
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    aa00:	d90001c4 	addi	r4,sp,7
    aa04:	000a3f40 	call	a3f4 <ArrayToU32>
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
        if (CardStatus != ExpectedStatus){
    aa08:	00c24004 	movi	r3,2304
    aa0c:	10c00a1e 	bne	r2,r3,aa38 <SD_CMD24+0xbc>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
        }        
        
        // check crc
        if (bSuccess){
    aa10:	80000926 	beq	r16,zero,aa38 <SD_CMD24+0xbc>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    aa14:	0009883a 	mov	r4,zero
    aa18:	01800144 	movi	r6,5
    aa1c:	d9400184 	addi	r5,sp,6
    aa20:	00094880 	call	9488 <crc7>
            if (crc != (szResponse[5] >> 1)){
    aa24:	d8c002c3 	ldbu	r3,11(sp)
    aa28:	10803fcc 	andi	r2,r2,255
    aa2c:	19003fcc 	andi	r4,r3,255
    aa30:	2008d07a 	srli	r4,r4,1
    aa34:	11000226 	beq	r2,r4,aa40 <SD_CMD24+0xc4>
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    aa38:	0021883a 	mov	r16,zero
    aa3c:	00000206 	br	aa48 <SD_CMD24+0xcc>
                bSuccess = FALSE;
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    aa40:	18c0004c 	andi	r3,r3,1
    aa44:	183ffc26 	beq	r3,zero,aa38 <_gp+0xffff486c>
    }
    
     
    
    return bSuccess;
}
    aa48:	8005883a 	mov	r2,r16
    aa4c:	dfc00417 	ldw	ra,16(sp)
    aa50:	dc000317 	ldw	r16,12(sp)
    aa54:	dec00504 	addi	sp,sp,20
    aa58:	f800283a 	ret

0000aa5c <__divsi3>:
    aa5c:	20001b16 	blt	r4,zero,aacc <__divsi3+0x70>
    aa60:	000f883a 	mov	r7,zero
    aa64:	28001616 	blt	r5,zero,aac0 <__divsi3+0x64>
    aa68:	200d883a 	mov	r6,r4
    aa6c:	29001a2e 	bgeu	r5,r4,aad8 <__divsi3+0x7c>
    aa70:	00800804 	movi	r2,32
    aa74:	00c00044 	movi	r3,1
    aa78:	00000106 	br	aa80 <__divsi3+0x24>
    aa7c:	10000d26 	beq	r2,zero,aab4 <__divsi3+0x58>
    aa80:	294b883a 	add	r5,r5,r5
    aa84:	10bfffc4 	addi	r2,r2,-1
    aa88:	18c7883a 	add	r3,r3,r3
    aa8c:	293ffb36 	bltu	r5,r4,aa7c <_gp+0xffff48b0>
    aa90:	0005883a 	mov	r2,zero
    aa94:	18000726 	beq	r3,zero,aab4 <__divsi3+0x58>
    aa98:	0005883a 	mov	r2,zero
    aa9c:	31400236 	bltu	r6,r5,aaa8 <__divsi3+0x4c>
    aaa0:	314dc83a 	sub	r6,r6,r5
    aaa4:	10c4b03a 	or	r2,r2,r3
    aaa8:	1806d07a 	srli	r3,r3,1
    aaac:	280ad07a 	srli	r5,r5,1
    aab0:	183ffa1e 	bne	r3,zero,aa9c <_gp+0xffff48d0>
    aab4:	38000126 	beq	r7,zero,aabc <__divsi3+0x60>
    aab8:	0085c83a 	sub	r2,zero,r2
    aabc:	f800283a 	ret
    aac0:	014bc83a 	sub	r5,zero,r5
    aac4:	39c0005c 	xori	r7,r7,1
    aac8:	003fe706 	br	aa68 <_gp+0xffff489c>
    aacc:	0109c83a 	sub	r4,zero,r4
    aad0:	01c00044 	movi	r7,1
    aad4:	003fe306 	br	aa64 <_gp+0xffff4898>
    aad8:	00c00044 	movi	r3,1
    aadc:	003fee06 	br	aa98 <_gp+0xffff48cc>

0000aae0 <__modsi3>:
    aae0:	20001716 	blt	r4,zero,ab40 <__modsi3+0x60>
    aae4:	000f883a 	mov	r7,zero
    aae8:	2005883a 	mov	r2,r4
    aaec:	28001216 	blt	r5,zero,ab38 <__modsi3+0x58>
    aaf0:	2900162e 	bgeu	r5,r4,ab4c <__modsi3+0x6c>
    aaf4:	01800804 	movi	r6,32
    aaf8:	00c00044 	movi	r3,1
    aafc:	00000106 	br	ab04 <__modsi3+0x24>
    ab00:	30000a26 	beq	r6,zero,ab2c <__modsi3+0x4c>
    ab04:	294b883a 	add	r5,r5,r5
    ab08:	31bfffc4 	addi	r6,r6,-1
    ab0c:	18c7883a 	add	r3,r3,r3
    ab10:	293ffb36 	bltu	r5,r4,ab00 <_gp+0xffff4934>
    ab14:	18000526 	beq	r3,zero,ab2c <__modsi3+0x4c>
    ab18:	1806d07a 	srli	r3,r3,1
    ab1c:	11400136 	bltu	r2,r5,ab24 <__modsi3+0x44>
    ab20:	1145c83a 	sub	r2,r2,r5
    ab24:	280ad07a 	srli	r5,r5,1
    ab28:	183ffb1e 	bne	r3,zero,ab18 <_gp+0xffff494c>
    ab2c:	38000126 	beq	r7,zero,ab34 <__modsi3+0x54>
    ab30:	0085c83a 	sub	r2,zero,r2
    ab34:	f800283a 	ret
    ab38:	014bc83a 	sub	r5,zero,r5
    ab3c:	003fec06 	br	aaf0 <_gp+0xffff4924>
    ab40:	0109c83a 	sub	r4,zero,r4
    ab44:	01c00044 	movi	r7,1
    ab48:	003fe706 	br	aae8 <_gp+0xffff491c>
    ab4c:	00c00044 	movi	r3,1
    ab50:	003ff106 	br	ab18 <_gp+0xffff494c>

0000ab54 <__udivsi3>:
    ab54:	200d883a 	mov	r6,r4
    ab58:	2900152e 	bgeu	r5,r4,abb0 <__udivsi3+0x5c>
    ab5c:	28001416 	blt	r5,zero,abb0 <__udivsi3+0x5c>
    ab60:	00800804 	movi	r2,32
    ab64:	00c00044 	movi	r3,1
    ab68:	00000206 	br	ab74 <__udivsi3+0x20>
    ab6c:	10000e26 	beq	r2,zero,aba8 <__udivsi3+0x54>
    ab70:	28000516 	blt	r5,zero,ab88 <__udivsi3+0x34>
    ab74:	294b883a 	add	r5,r5,r5
    ab78:	10bfffc4 	addi	r2,r2,-1
    ab7c:	18c7883a 	add	r3,r3,r3
    ab80:	293ffa36 	bltu	r5,r4,ab6c <_gp+0xffff49a0>
    ab84:	18000826 	beq	r3,zero,aba8 <__udivsi3+0x54>
    ab88:	0005883a 	mov	r2,zero
    ab8c:	31400236 	bltu	r6,r5,ab98 <__udivsi3+0x44>
    ab90:	314dc83a 	sub	r6,r6,r5
    ab94:	10c4b03a 	or	r2,r2,r3
    ab98:	1806d07a 	srli	r3,r3,1
    ab9c:	280ad07a 	srli	r5,r5,1
    aba0:	183ffa1e 	bne	r3,zero,ab8c <_gp+0xffff49c0>
    aba4:	f800283a 	ret
    aba8:	0005883a 	mov	r2,zero
    abac:	f800283a 	ret
    abb0:	00c00044 	movi	r3,1
    abb4:	003ff406 	br	ab88 <_gp+0xffff49bc>

0000abb8 <__umodsi3>:
    abb8:	2005883a 	mov	r2,r4
    abbc:	2900122e 	bgeu	r5,r4,ac08 <__umodsi3+0x50>
    abc0:	28001116 	blt	r5,zero,ac08 <__umodsi3+0x50>
    abc4:	01800804 	movi	r6,32
    abc8:	00c00044 	movi	r3,1
    abcc:	00000206 	br	abd8 <__umodsi3+0x20>
    abd0:	30000c26 	beq	r6,zero,ac04 <__umodsi3+0x4c>
    abd4:	28000516 	blt	r5,zero,abec <__umodsi3+0x34>
    abd8:	294b883a 	add	r5,r5,r5
    abdc:	31bfffc4 	addi	r6,r6,-1
    abe0:	18c7883a 	add	r3,r3,r3
    abe4:	293ffa36 	bltu	r5,r4,abd0 <_gp+0xffff4a04>
    abe8:	18000626 	beq	r3,zero,ac04 <__umodsi3+0x4c>
    abec:	1806d07a 	srli	r3,r3,1
    abf0:	11400136 	bltu	r2,r5,abf8 <__umodsi3+0x40>
    abf4:	1145c83a 	sub	r2,r2,r5
    abf8:	280ad07a 	srli	r5,r5,1
    abfc:	183ffb1e 	bne	r3,zero,abec <_gp+0xffff4a20>
    ac00:	f800283a 	ret
    ac04:	f800283a 	ret
    ac08:	00c00044 	movi	r3,1
    ac0c:	003ff706 	br	abec <_gp+0xffff4a20>

0000ac10 <__mulsi3>:
    ac10:	0005883a 	mov	r2,zero
    ac14:	20000726 	beq	r4,zero,ac34 <__mulsi3+0x24>
    ac18:	20c0004c 	andi	r3,r4,1
    ac1c:	2008d07a 	srli	r4,r4,1
    ac20:	18000126 	beq	r3,zero,ac28 <__mulsi3+0x18>
    ac24:	1145883a 	add	r2,r2,r5
    ac28:	294b883a 	add	r5,r5,r5
    ac2c:	203ffa1e 	bne	r4,zero,ac18 <_gp+0xffff4a4c>
    ac30:	f800283a 	ret
    ac34:	f800283a 	ret

0000ac38 <__divsf3>:
    ac38:	defff504 	addi	sp,sp,-44
    ac3c:	200cd5fa 	srli	r6,r4,23
    ac40:	dcc00415 	stw	r19,16(sp)
    ac44:	2026d7fa 	srli	r19,r4,31
    ac48:	00c02034 	movhi	r3,128
    ac4c:	dd800715 	stw	r22,28(sp)
    ac50:	dd000515 	stw	r20,20(sp)
    ac54:	dc800315 	stw	r18,12(sp)
    ac58:	18ffffc4 	addi	r3,r3,-1
    ac5c:	dfc00a15 	stw	ra,40(sp)
    ac60:	df000915 	stw	fp,36(sp)
    ac64:	ddc00815 	stw	r23,32(sp)
    ac68:	dd400615 	stw	r21,24(sp)
    ac6c:	dc400215 	stw	r17,8(sp)
    ac70:	dc000115 	stw	r16,4(sp)
    ac74:	35003fcc 	andi	r20,r6,255
    ac78:	1924703a 	and	r18,r3,r4
    ac7c:	9d803fcc 	andi	r22,r19,255
    ac80:	a0005226 	beq	r20,zero,adcc <__divsf3+0x194>
    ac84:	00803fc4 	movi	r2,255
    ac88:	a0802e26 	beq	r20,r2,ad44 <__divsf3+0x10c>
    ac8c:	91002034 	orhi	r4,r18,128
    ac90:	202490fa 	slli	r18,r4,3
    ac94:	a53fe044 	addi	r20,r20,-127
    ac98:	0021883a 	mov	r16,zero
    ac9c:	002f883a 	mov	r23,zero
    aca0:	280cd5fa 	srli	r6,r5,23
    aca4:	282ad7fa 	srli	r21,r5,31
    aca8:	00c02034 	movhi	r3,128
    acac:	18ffffc4 	addi	r3,r3,-1
    acb0:	31803fcc 	andi	r6,r6,255
    acb4:	1962703a 	and	r17,r3,r5
    acb8:	af003fcc 	andi	fp,r21,255
    acbc:	30004a26 	beq	r6,zero,ade8 <__divsf3+0x1b0>
    acc0:	00803fc4 	movi	r2,255
    acc4:	30804526 	beq	r6,r2,addc <__divsf3+0x1a4>
    acc8:	89402034 	orhi	r5,r17,128
    accc:	282290fa 	slli	r17,r5,3
    acd0:	31bfe044 	addi	r6,r6,-127
    acd4:	000b883a 	mov	r5,zero
    acd8:	2c20b03a 	or	r16,r5,r16
    acdc:	802090ba 	slli	r16,r16,2
    ace0:	00800074 	movhi	r2,1
    ace4:	10ab4104 	addi	r2,r2,-21244
    ace8:	80a1883a 	add	r16,r16,r2
    acec:	81000017 	ldw	r4,0(r16)
    acf0:	9d46f03a 	xor	r3,r19,r21
    acf4:	180f883a 	mov	r7,r3
    acf8:	18803fcc 	andi	r2,r3,255
    acfc:	a18dc83a 	sub	r6,r20,r6
    ad00:	2000683a 	jmp	r4
    ad04:	0000aee8 	cmpgeui	zero,zero,699
    ad08:	0000ad6c 	andhi	zero,zero,693
    ad0c:	0000aedc 	xori	zero,zero,699
    ad10:	0000ad58 	cmpnei	zero,zero,693
    ad14:	0000aedc 	xori	zero,zero,699
    ad18:	0000aeb4 	movhi	zero,698
    ad1c:	0000aedc 	xori	zero,zero,699
    ad20:	0000ad58 	cmpnei	zero,zero,693
    ad24:	0000ad6c 	andhi	zero,zero,693
    ad28:	0000ad6c 	andhi	zero,zero,693
    ad2c:	0000aeb4 	movhi	zero,698
    ad30:	0000ad58 	cmpnei	zero,zero,693
    ad34:	0000afc8 	cmpgei	zero,zero,703
    ad38:	0000afc8 	cmpgei	zero,zero,703
    ad3c:	0000afc8 	cmpgei	zero,zero,703
    ad40:	0000af7c 	xorhi	zero,zero,701
    ad44:	9000581e 	bne	r18,zero,aea8 <__divsf3+0x270>
    ad48:	04000204 	movi	r16,8
    ad4c:	05c00084 	movi	r23,2
    ad50:	003fd306 	br	aca0 <_gp+0xffff4ad4>
    ad54:	0023883a 	mov	r17,zero
    ad58:	e02d883a 	mov	r22,fp
    ad5c:	282f883a 	mov	r23,r5
    ad60:	00800084 	movi	r2,2
    ad64:	b8808f1e 	bne	r23,r2,afa4 <__divsf3+0x36c>
    ad68:	b005883a 	mov	r2,r22
    ad6c:	11c0004c 	andi	r7,r2,1
    ad70:	013fffc4 	movi	r4,-1
    ad74:	000d883a 	mov	r6,zero
    ad78:	21003fcc 	andi	r4,r4,255
    ad7c:	200895fa 	slli	r4,r4,23
    ad80:	38803fcc 	andi	r2,r7,255
    ad84:	00c02034 	movhi	r3,128
    ad88:	100497fa 	slli	r2,r2,31
    ad8c:	18ffffc4 	addi	r3,r3,-1
    ad90:	30c6703a 	and	r3,r6,r3
    ad94:	1906b03a 	or	r3,r3,r4
    ad98:	1884b03a 	or	r2,r3,r2
    ad9c:	dfc00a17 	ldw	ra,40(sp)
    ada0:	df000917 	ldw	fp,36(sp)
    ada4:	ddc00817 	ldw	r23,32(sp)
    ada8:	dd800717 	ldw	r22,28(sp)
    adac:	dd400617 	ldw	r21,24(sp)
    adb0:	dd000517 	ldw	r20,20(sp)
    adb4:	dcc00417 	ldw	r19,16(sp)
    adb8:	dc800317 	ldw	r18,12(sp)
    adbc:	dc400217 	ldw	r17,8(sp)
    adc0:	dc000117 	ldw	r16,4(sp)
    adc4:	dec00b04 	addi	sp,sp,44
    adc8:	f800283a 	ret
    adcc:	90002b1e 	bne	r18,zero,ae7c <__divsf3+0x244>
    add0:	04000104 	movi	r16,4
    add4:	05c00044 	movi	r23,1
    add8:	003fb106 	br	aca0 <_gp+0xffff4ad4>
    addc:	8800251e 	bne	r17,zero,ae74 <__divsf3+0x23c>
    ade0:	01400084 	movi	r5,2
    ade4:	00000206 	br	adf0 <__divsf3+0x1b8>
    ade8:	88001a1e 	bne	r17,zero,ae54 <__divsf3+0x21c>
    adec:	01400044 	movi	r5,1
    adf0:	8160b03a 	or	r16,r16,r5
    adf4:	802090ba 	slli	r16,r16,2
    adf8:	00c00074 	movhi	r3,1
    adfc:	18eb8504 	addi	r3,r3,-20972
    ae00:	80e1883a 	add	r16,r16,r3
    ae04:	80c00017 	ldw	r3,0(r16)
    ae08:	9d44f03a 	xor	r2,r19,r21
    ae0c:	a18dc83a 	sub	r6,r20,r6
    ae10:	1800683a 	jmp	r3
    ae14:	0000ad6c 	andhi	zero,zero,693
    ae18:	0000ad6c 	andhi	zero,zero,693
    ae1c:	0000afb8 	rdprs	zero,zero,702
    ae20:	0000ad54 	movui	zero,693
    ae24:	0000afb8 	rdprs	zero,zero,702
    ae28:	0000aeb4 	movhi	zero,698
    ae2c:	0000afb8 	rdprs	zero,zero,702
    ae30:	0000ad54 	movui	zero,693
    ae34:	0000ad6c 	andhi	zero,zero,693
    ae38:	0000ad6c 	andhi	zero,zero,693
    ae3c:	0000aeb4 	movhi	zero,698
    ae40:	0000ad54 	movui	zero,693
    ae44:	0000afc8 	cmpgei	zero,zero,703
    ae48:	0000afc8 	cmpgei	zero,zero,703
    ae4c:	0000afc8 	cmpgei	zero,zero,703
    ae50:	0000afe0 	cmpeqi	zero,zero,703
    ae54:	8809883a 	mov	r4,r17
    ae58:	000c0bc0 	call	c0bc <__clzsi2>
    ae5c:	10fffec4 	addi	r3,r2,-5
    ae60:	10801d84 	addi	r2,r2,118
    ae64:	88e2983a 	sll	r17,r17,r3
    ae68:	008dc83a 	sub	r6,zero,r2
    ae6c:	000b883a 	mov	r5,zero
    ae70:	003f9906 	br	acd8 <_gp+0xffff4b0c>
    ae74:	014000c4 	movi	r5,3
    ae78:	003f9706 	br	acd8 <_gp+0xffff4b0c>
    ae7c:	9009883a 	mov	r4,r18
    ae80:	d9400015 	stw	r5,0(sp)
    ae84:	000c0bc0 	call	c0bc <__clzsi2>
    ae88:	10fffec4 	addi	r3,r2,-5
    ae8c:	11801d84 	addi	r6,r2,118
    ae90:	90e4983a 	sll	r18,r18,r3
    ae94:	01a9c83a 	sub	r20,zero,r6
    ae98:	0021883a 	mov	r16,zero
    ae9c:	002f883a 	mov	r23,zero
    aea0:	d9400017 	ldw	r5,0(sp)
    aea4:	003f7e06 	br	aca0 <_gp+0xffff4ad4>
    aea8:	04000304 	movi	r16,12
    aeac:	05c000c4 	movi	r23,3
    aeb0:	003f7b06 	br	aca0 <_gp+0xffff4ad4>
    aeb4:	01802034 	movhi	r6,128
    aeb8:	000f883a 	mov	r7,zero
    aebc:	31bfffc4 	addi	r6,r6,-1
    aec0:	013fffc4 	movi	r4,-1
    aec4:	003fac06 	br	ad78 <_gp+0xffff4bac>
    aec8:	01400044 	movi	r5,1
    aecc:	2909c83a 	sub	r4,r5,r4
    aed0:	00c006c4 	movi	r3,27
    aed4:	19004b0e 	bge	r3,r4,b004 <__divsf3+0x3cc>
    aed8:	114e703a 	and	r7,r2,r5
    aedc:	0009883a 	mov	r4,zero
    aee0:	000d883a 	mov	r6,zero
    aee4:	003fa406 	br	ad78 <_gp+0xffff4bac>
    aee8:	9006917a 	slli	r3,r18,5
    aeec:	8822917a 	slli	r17,r17,5
    aef0:	1c40372e 	bgeu	r3,r17,afd0 <__divsf3+0x398>
    aef4:	31bfffc4 	addi	r6,r6,-1
    aef8:	010006c4 	movi	r4,27
    aefc:	000b883a 	mov	r5,zero
    af00:	180f883a 	mov	r7,r3
    af04:	294b883a 	add	r5,r5,r5
    af08:	18c7883a 	add	r3,r3,r3
    af0c:	38000116 	blt	r7,zero,af14 <__divsf3+0x2dc>
    af10:	1c400236 	bltu	r3,r17,af1c <__divsf3+0x2e4>
    af14:	1c47c83a 	sub	r3,r3,r17
    af18:	29400054 	ori	r5,r5,1
    af1c:	213fffc4 	addi	r4,r4,-1
    af20:	203ff71e 	bne	r4,zero,af00 <_gp+0xffff4d34>
    af24:	1806c03a 	cmpne	r3,r3,zero
    af28:	1962b03a 	or	r17,r3,r5
    af2c:	31001fc4 	addi	r4,r6,127
    af30:	013fe50e 	bge	zero,r4,aec8 <_gp+0xffff4cfc>
    af34:	88c001cc 	andi	r3,r17,7
    af38:	18000426 	beq	r3,zero,af4c <__divsf3+0x314>
    af3c:	88c003cc 	andi	r3,r17,15
    af40:	01400104 	movi	r5,4
    af44:	19400126 	beq	r3,r5,af4c <__divsf3+0x314>
    af48:	8963883a 	add	r17,r17,r5
    af4c:	88c2002c 	andhi	r3,r17,2048
    af50:	18000426 	beq	r3,zero,af64 <__divsf3+0x32c>
    af54:	00fe0034 	movhi	r3,63488
    af58:	18ffffc4 	addi	r3,r3,-1
    af5c:	31002004 	addi	r4,r6,128
    af60:	88e2703a 	and	r17,r17,r3
    af64:	00c03f84 	movi	r3,254
    af68:	193f8016 	blt	r3,r4,ad6c <_gp+0xffff4ba0>
    af6c:	880c91ba 	slli	r6,r17,6
    af70:	11c0004c 	andi	r7,r2,1
    af74:	300cd27a 	srli	r6,r6,9
    af78:	003f7f06 	br	ad78 <_gp+0xffff4bac>
    af7c:	9080102c 	andhi	r2,r18,64
    af80:	10000226 	beq	r2,zero,af8c <__divsf3+0x354>
    af84:	8880102c 	andhi	r2,r17,64
    af88:	10001826 	beq	r2,zero,afec <__divsf3+0x3b4>
    af8c:	00802034 	movhi	r2,128
    af90:	91801034 	orhi	r6,r18,64
    af94:	10bfffc4 	addi	r2,r2,-1
    af98:	980f883a 	mov	r7,r19
    af9c:	308c703a 	and	r6,r6,r2
    afa0:	003fc706 	br	aec0 <_gp+0xffff4cf4>
    afa4:	008000c4 	movi	r2,3
    afa8:	b8802d26 	beq	r23,r2,b060 <__divsf3+0x428>
    afac:	00c00044 	movi	r3,1
    afb0:	b005883a 	mov	r2,r22
    afb4:	b8ffdd1e 	bne	r23,r3,af2c <_gp+0xffff4d60>
    afb8:	11c0004c 	andi	r7,r2,1
    afbc:	0009883a 	mov	r4,zero
    afc0:	000d883a 	mov	r6,zero
    afc4:	003f6c06 	br	ad78 <_gp+0xffff4bac>
    afc8:	9023883a 	mov	r17,r18
    afcc:	003f6406 	br	ad60 <_gp+0xffff4b94>
    afd0:	1c47c83a 	sub	r3,r3,r17
    afd4:	01000684 	movi	r4,26
    afd8:	01400044 	movi	r5,1
    afdc:	003fc806 	br	af00 <_gp+0xffff4d34>
    afe0:	9080102c 	andhi	r2,r18,64
    afe4:	103fe926 	beq	r2,zero,af8c <_gp+0xffff4dc0>
    afe8:	0023883a 	mov	r17,zero
    afec:	00802034 	movhi	r2,128
    aff0:	89801034 	orhi	r6,r17,64
    aff4:	10bfffc4 	addi	r2,r2,-1
    aff8:	a80f883a 	mov	r7,r21
    affc:	308c703a 	and	r6,r6,r2
    b000:	003faf06 	br	aec0 <_gp+0xffff4cf4>
    b004:	01c00804 	movi	r7,32
    b008:	390fc83a 	sub	r7,r7,r4
    b00c:	89ce983a 	sll	r7,r17,r7
    b010:	890ad83a 	srl	r5,r17,r4
    b014:	380ec03a 	cmpne	r7,r7,zero
    b018:	29cab03a 	or	r5,r5,r7
    b01c:	28c001cc 	andi	r3,r5,7
    b020:	18000426 	beq	r3,zero,b034 <__divsf3+0x3fc>
    b024:	28c003cc 	andi	r3,r5,15
    b028:	01000104 	movi	r4,4
    b02c:	19000126 	beq	r3,r4,b034 <__divsf3+0x3fc>
    b030:	290b883a 	add	r5,r5,r4
    b034:	28c1002c 	andhi	r3,r5,1024
    b038:	18000426 	beq	r3,zero,b04c <__divsf3+0x414>
    b03c:	11c0004c 	andi	r7,r2,1
    b040:	01000044 	movi	r4,1
    b044:	000d883a 	mov	r6,zero
    b048:	003f4b06 	br	ad78 <_gp+0xffff4bac>
    b04c:	280a91ba 	slli	r5,r5,6
    b050:	11c0004c 	andi	r7,r2,1
    b054:	0009883a 	mov	r4,zero
    b058:	280cd27a 	srli	r6,r5,9
    b05c:	003f4606 	br	ad78 <_gp+0xffff4bac>
    b060:	00802034 	movhi	r2,128
    b064:	89801034 	orhi	r6,r17,64
    b068:	10bfffc4 	addi	r2,r2,-1
    b06c:	b00f883a 	mov	r7,r22
    b070:	308c703a 	and	r6,r6,r2
    b074:	003f9206 	br	aec0 <_gp+0xffff4cf4>

0000b078 <__mulsf3>:
    b078:	defff504 	addi	sp,sp,-44
    b07c:	dc000115 	stw	r16,4(sp)
    b080:	2020d5fa 	srli	r16,r4,23
    b084:	dd400615 	stw	r21,24(sp)
    b088:	202ad7fa 	srli	r21,r4,31
    b08c:	dc800315 	stw	r18,12(sp)
    b090:	04802034 	movhi	r18,128
    b094:	df000915 	stw	fp,36(sp)
    b098:	dd000515 	stw	r20,20(sp)
    b09c:	94bfffc4 	addi	r18,r18,-1
    b0a0:	dfc00a15 	stw	ra,40(sp)
    b0a4:	ddc00815 	stw	r23,32(sp)
    b0a8:	dd800715 	stw	r22,28(sp)
    b0ac:	dcc00415 	stw	r19,16(sp)
    b0b0:	dc400215 	stw	r17,8(sp)
    b0b4:	84003fcc 	andi	r16,r16,255
    b0b8:	9124703a 	and	r18,r18,r4
    b0bc:	a829883a 	mov	r20,r21
    b0c0:	af003fcc 	andi	fp,r21,255
    b0c4:	80005426 	beq	r16,zero,b218 <__mulsf3+0x1a0>
    b0c8:	00803fc4 	movi	r2,255
    b0cc:	80802f26 	beq	r16,r2,b18c <__mulsf3+0x114>
    b0d0:	91002034 	orhi	r4,r18,128
    b0d4:	202490fa 	slli	r18,r4,3
    b0d8:	843fe044 	addi	r16,r16,-127
    b0dc:	0023883a 	mov	r17,zero
    b0e0:	002f883a 	mov	r23,zero
    b0e4:	2804d5fa 	srli	r2,r5,23
    b0e8:	282cd7fa 	srli	r22,r5,31
    b0ec:	01002034 	movhi	r4,128
    b0f0:	213fffc4 	addi	r4,r4,-1
    b0f4:	10803fcc 	andi	r2,r2,255
    b0f8:	2166703a 	and	r19,r4,r5
    b0fc:	b1803fcc 	andi	r6,r22,255
    b100:	10004c26 	beq	r2,zero,b234 <__mulsf3+0x1bc>
    b104:	00c03fc4 	movi	r3,255
    b108:	10c04726 	beq	r2,r3,b228 <__mulsf3+0x1b0>
    b10c:	99002034 	orhi	r4,r19,128
    b110:	202690fa 	slli	r19,r4,3
    b114:	10bfe044 	addi	r2,r2,-127
    b118:	0007883a 	mov	r3,zero
    b11c:	80a1883a 	add	r16,r16,r2
    b120:	010003c4 	movi	r4,15
    b124:	1c44b03a 	or	r2,r3,r17
    b128:	b56af03a 	xor	r21,r22,r21
    b12c:	81c00044 	addi	r7,r16,1
    b130:	20806b36 	bltu	r4,r2,b2e0 <__mulsf3+0x268>
    b134:	100490ba 	slli	r2,r2,2
    b138:	01000074 	movhi	r4,1
    b13c:	212c5304 	addi	r4,r4,-20148
    b140:	1105883a 	add	r2,r2,r4
    b144:	10800017 	ldw	r2,0(r2)
    b148:	1000683a 	jmp	r2
    b14c:	0000b2e0 	cmpeqi	zero,zero,715
    b150:	0000b1a0 	cmpeqi	zero,zero,710
    b154:	0000b1a0 	cmpeqi	zero,zero,710
    b158:	0000b19c 	xori	zero,zero,710
    b15c:	0000b2c4 	movi	zero,715
    b160:	0000b2c4 	movi	zero,715
    b164:	0000b2b0 	cmpltui	zero,zero,714
    b168:	0000b19c 	xori	zero,zero,710
    b16c:	0000b2c4 	movi	zero,715
    b170:	0000b2b0 	cmpltui	zero,zero,714
    b174:	0000b2c4 	movi	zero,715
    b178:	0000b19c 	xori	zero,zero,710
    b17c:	0000b2d0 	cmplti	zero,zero,715
    b180:	0000b2d0 	cmplti	zero,zero,715
    b184:	0000b2d0 	cmplti	zero,zero,715
    b188:	0000b3e0 	cmpeqi	zero,zero,719
    b18c:	90003b1e 	bne	r18,zero,b27c <__mulsf3+0x204>
    b190:	04400204 	movi	r17,8
    b194:	05c00084 	movi	r23,2
    b198:	003fd206 	br	b0e4 <_gp+0xffff4f18>
    b19c:	302b883a 	mov	r21,r6
    b1a0:	00800084 	movi	r2,2
    b1a4:	18802626 	beq	r3,r2,b240 <__mulsf3+0x1c8>
    b1a8:	008000c4 	movi	r2,3
    b1ac:	1880b826 	beq	r3,r2,b490 <__mulsf3+0x418>
    b1b0:	00800044 	movi	r2,1
    b1b4:	1880af1e 	bne	r3,r2,b474 <__mulsf3+0x3fc>
    b1b8:	a829883a 	mov	r20,r21
    b1bc:	0007883a 	mov	r3,zero
    b1c0:	0009883a 	mov	r4,zero
    b1c4:	18803fcc 	andi	r2,r3,255
    b1c8:	100695fa 	slli	r3,r2,23
    b1cc:	a0803fcc 	andi	r2,r20,255
    b1d0:	100a97fa 	slli	r5,r2,31
    b1d4:	00802034 	movhi	r2,128
    b1d8:	10bfffc4 	addi	r2,r2,-1
    b1dc:	2084703a 	and	r2,r4,r2
    b1e0:	10c4b03a 	or	r2,r2,r3
    b1e4:	1144b03a 	or	r2,r2,r5
    b1e8:	dfc00a17 	ldw	ra,40(sp)
    b1ec:	df000917 	ldw	fp,36(sp)
    b1f0:	ddc00817 	ldw	r23,32(sp)
    b1f4:	dd800717 	ldw	r22,28(sp)
    b1f8:	dd400617 	ldw	r21,24(sp)
    b1fc:	dd000517 	ldw	r20,20(sp)
    b200:	dcc00417 	ldw	r19,16(sp)
    b204:	dc800317 	ldw	r18,12(sp)
    b208:	dc400217 	ldw	r17,8(sp)
    b20c:	dc000117 	ldw	r16,4(sp)
    b210:	dec00b04 	addi	sp,sp,44
    b214:	f800283a 	ret
    b218:	90000d1e 	bne	r18,zero,b250 <__mulsf3+0x1d8>
    b21c:	04400104 	movi	r17,4
    b220:	05c00044 	movi	r23,1
    b224:	003faf06 	br	b0e4 <_gp+0xffff4f18>
    b228:	9806c03a 	cmpne	r3,r19,zero
    b22c:	18c00084 	addi	r3,r3,2
    b230:	003fba06 	br	b11c <_gp+0xffff4f50>
    b234:	9800141e 	bne	r19,zero,b288 <__mulsf3+0x210>
    b238:	00c00044 	movi	r3,1
    b23c:	003fb706 	br	b11c <_gp+0xffff4f50>
    b240:	a829883a 	mov	r20,r21
    b244:	00ffffc4 	movi	r3,-1
    b248:	0009883a 	mov	r4,zero
    b24c:	003fdd06 	br	b1c4 <_gp+0xffff4ff8>
    b250:	9009883a 	mov	r4,r18
    b254:	d9400015 	stw	r5,0(sp)
    b258:	000c0bc0 	call	c0bc <__clzsi2>
    b25c:	10fffec4 	addi	r3,r2,-5
    b260:	10801d84 	addi	r2,r2,118
    b264:	90e4983a 	sll	r18,r18,r3
    b268:	00a1c83a 	sub	r16,zero,r2
    b26c:	0023883a 	mov	r17,zero
    b270:	002f883a 	mov	r23,zero
    b274:	d9400017 	ldw	r5,0(sp)
    b278:	003f9a06 	br	b0e4 <_gp+0xffff4f18>
    b27c:	04400304 	movi	r17,12
    b280:	05c000c4 	movi	r23,3
    b284:	003f9706 	br	b0e4 <_gp+0xffff4f18>
    b288:	9809883a 	mov	r4,r19
    b28c:	d9800015 	stw	r6,0(sp)
    b290:	000c0bc0 	call	c0bc <__clzsi2>
    b294:	10fffec4 	addi	r3,r2,-5
    b298:	10801d84 	addi	r2,r2,118
    b29c:	98e6983a 	sll	r19,r19,r3
    b2a0:	0085c83a 	sub	r2,zero,r2
    b2a4:	0007883a 	mov	r3,zero
    b2a8:	d9800017 	ldw	r6,0(sp)
    b2ac:	003f9b06 	br	b11c <_gp+0xffff4f50>
    b2b0:	01002034 	movhi	r4,128
    b2b4:	0029883a 	mov	r20,zero
    b2b8:	213fffc4 	addi	r4,r4,-1
    b2bc:	00ffffc4 	movi	r3,-1
    b2c0:	003fc006 	br	b1c4 <_gp+0xffff4ff8>
    b2c4:	9027883a 	mov	r19,r18
    b2c8:	b807883a 	mov	r3,r23
    b2cc:	003fb406 	br	b1a0 <_gp+0xffff4fd4>
    b2d0:	9027883a 	mov	r19,r18
    b2d4:	e02b883a 	mov	r21,fp
    b2d8:	b807883a 	mov	r3,r23
    b2dc:	003fb006 	br	b1a0 <_gp+0xffff4fd4>
    b2e0:	9028d43a 	srli	r20,r18,16
    b2e4:	982cd43a 	srli	r22,r19,16
    b2e8:	94bfffcc 	andi	r18,r18,65535
    b2ec:	9cffffcc 	andi	r19,r19,65535
    b2f0:	980b883a 	mov	r5,r19
    b2f4:	9009883a 	mov	r4,r18
    b2f8:	d9c00015 	stw	r7,0(sp)
    b2fc:	000ac100 	call	ac10 <__mulsi3>
    b300:	a00b883a 	mov	r5,r20
    b304:	9809883a 	mov	r4,r19
    b308:	1023883a 	mov	r17,r2
    b30c:	000ac100 	call	ac10 <__mulsi3>
    b310:	a009883a 	mov	r4,r20
    b314:	b00b883a 	mov	r5,r22
    b318:	1027883a 	mov	r19,r2
    b31c:	000ac100 	call	ac10 <__mulsi3>
    b320:	b00b883a 	mov	r5,r22
    b324:	9009883a 	mov	r4,r18
    b328:	1029883a 	mov	r20,r2
    b32c:	000ac100 	call	ac10 <__mulsi3>
    b330:	8806d43a 	srli	r3,r17,16
    b334:	14c5883a 	add	r2,r2,r19
    b338:	d9c00017 	ldw	r7,0(sp)
    b33c:	1885883a 	add	r2,r3,r2
    b340:	14c0022e 	bgeu	r2,r19,b34c <__mulsf3+0x2d4>
    b344:	00c00074 	movhi	r3,1
    b348:	a0e9883a 	add	r20,r20,r3
    b34c:	1026943a 	slli	r19,r2,16
    b350:	8c7fffcc 	andi	r17,r17,65535
    b354:	1004d43a 	srli	r2,r2,16
    b358:	9c63883a 	add	r17,r19,r17
    b35c:	882691ba 	slli	r19,r17,6
    b360:	1505883a 	add	r2,r2,r20
    b364:	8822d6ba 	srli	r17,r17,26
    b368:	100891ba 	slli	r4,r2,6
    b36c:	9826c03a 	cmpne	r19,r19,zero
    b370:	9c62b03a 	or	r17,r19,r17
    b374:	8926b03a 	or	r19,r17,r4
    b378:	9882002c 	andhi	r2,r19,2048
    b37c:	10000426 	beq	r2,zero,b390 <__mulsf3+0x318>
    b380:	9804d07a 	srli	r2,r19,1
    b384:	9900004c 	andi	r4,r19,1
    b388:	3821883a 	mov	r16,r7
    b38c:	1126b03a 	or	r19,r2,r4
    b390:	80c01fc4 	addi	r3,r16,127
    b394:	00c0210e 	bge	zero,r3,b41c <__mulsf3+0x3a4>
    b398:	988001cc 	andi	r2,r19,7
    b39c:	10000426 	beq	r2,zero,b3b0 <__mulsf3+0x338>
    b3a0:	988003cc 	andi	r2,r19,15
    b3a4:	01000104 	movi	r4,4
    b3a8:	11000126 	beq	r2,r4,b3b0 <__mulsf3+0x338>
    b3ac:	9927883a 	add	r19,r19,r4
    b3b0:	9882002c 	andhi	r2,r19,2048
    b3b4:	10000426 	beq	r2,zero,b3c8 <__mulsf3+0x350>
    b3b8:	00be0034 	movhi	r2,63488
    b3bc:	10bfffc4 	addi	r2,r2,-1
    b3c0:	80c02004 	addi	r3,r16,128
    b3c4:	98a6703a 	and	r19,r19,r2
    b3c8:	00803f84 	movi	r2,254
    b3cc:	10ff9c16 	blt	r2,r3,b240 <_gp+0xffff5074>
    b3d0:	980891ba 	slli	r4,r19,6
    b3d4:	a829883a 	mov	r20,r21
    b3d8:	2008d27a 	srli	r4,r4,9
    b3dc:	003f7906 	br	b1c4 <_gp+0xffff4ff8>
    b3e0:	9080102c 	andhi	r2,r18,64
    b3e4:	10000826 	beq	r2,zero,b408 <__mulsf3+0x390>
    b3e8:	9880102c 	andhi	r2,r19,64
    b3ec:	1000061e 	bne	r2,zero,b408 <__mulsf3+0x390>
    b3f0:	00802034 	movhi	r2,128
    b3f4:	99001034 	orhi	r4,r19,64
    b3f8:	10bfffc4 	addi	r2,r2,-1
    b3fc:	b029883a 	mov	r20,r22
    b400:	2088703a 	and	r4,r4,r2
    b404:	003fad06 	br	b2bc <_gp+0xffff50f0>
    b408:	00802034 	movhi	r2,128
    b40c:	91001034 	orhi	r4,r18,64
    b410:	10bfffc4 	addi	r2,r2,-1
    b414:	2088703a 	and	r4,r4,r2
    b418:	003fa806 	br	b2bc <_gp+0xffff50f0>
    b41c:	00800044 	movi	r2,1
    b420:	10c7c83a 	sub	r3,r2,r3
    b424:	008006c4 	movi	r2,27
    b428:	10ff6316 	blt	r2,r3,b1b8 <_gp+0xffff4fec>
    b42c:	00800804 	movi	r2,32
    b430:	10c5c83a 	sub	r2,r2,r3
    b434:	9884983a 	sll	r2,r19,r2
    b438:	98c6d83a 	srl	r3,r19,r3
    b43c:	1004c03a 	cmpne	r2,r2,zero
    b440:	1884b03a 	or	r2,r3,r2
    b444:	10c001cc 	andi	r3,r2,7
    b448:	18000426 	beq	r3,zero,b45c <__mulsf3+0x3e4>
    b44c:	10c003cc 	andi	r3,r2,15
    b450:	01000104 	movi	r4,4
    b454:	19000126 	beq	r3,r4,b45c <__mulsf3+0x3e4>
    b458:	1105883a 	add	r2,r2,r4
    b45c:	10c1002c 	andhi	r3,r2,1024
    b460:	18000626 	beq	r3,zero,b47c <__mulsf3+0x404>
    b464:	a829883a 	mov	r20,r21
    b468:	00c00044 	movi	r3,1
    b46c:	0009883a 	mov	r4,zero
    b470:	003f5406 	br	b1c4 <_gp+0xffff4ff8>
    b474:	3821883a 	mov	r16,r7
    b478:	003fc506 	br	b390 <_gp+0xffff51c4>
    b47c:	100491ba 	slli	r2,r2,6
    b480:	a829883a 	mov	r20,r21
    b484:	0007883a 	mov	r3,zero
    b488:	1008d27a 	srli	r4,r2,9
    b48c:	003f4d06 	br	b1c4 <_gp+0xffff4ff8>
    b490:	00802034 	movhi	r2,128
    b494:	99001034 	orhi	r4,r19,64
    b498:	10bfffc4 	addi	r2,r2,-1
    b49c:	a829883a 	mov	r20,r21
    b4a0:	2088703a 	and	r4,r4,r2
    b4a4:	003f8506 	br	b2bc <_gp+0xffff50f0>

0000b4a8 <__floatunsisf>:
    b4a8:	defffe04 	addi	sp,sp,-8
    b4ac:	dfc00115 	stw	ra,4(sp)
    b4b0:	dc000015 	stw	r16,0(sp)
    b4b4:	20002c26 	beq	r4,zero,b568 <__floatunsisf+0xc0>
    b4b8:	2021883a 	mov	r16,r4
    b4bc:	000c0bc0 	call	c0bc <__clzsi2>
    b4c0:	00c02784 	movi	r3,158
    b4c4:	1887c83a 	sub	r3,r3,r2
    b4c8:	01002584 	movi	r4,150
    b4cc:	20c00f16 	blt	r4,r3,b50c <__floatunsisf+0x64>
    b4d0:	20c9c83a 	sub	r4,r4,r3
    b4d4:	8108983a 	sll	r4,r16,r4
    b4d8:	00802034 	movhi	r2,128
    b4dc:	10bfffc4 	addi	r2,r2,-1
    b4e0:	2088703a 	and	r4,r4,r2
    b4e4:	18803fcc 	andi	r2,r3,255
    b4e8:	100695fa 	slli	r3,r2,23
    b4ec:	00802034 	movhi	r2,128
    b4f0:	10bfffc4 	addi	r2,r2,-1
    b4f4:	2084703a 	and	r2,r4,r2
    b4f8:	10c4b03a 	or	r2,r2,r3
    b4fc:	dfc00117 	ldw	ra,4(sp)
    b500:	dc000017 	ldw	r16,0(sp)
    b504:	dec00204 	addi	sp,sp,8
    b508:	f800283a 	ret
    b50c:	01002644 	movi	r4,153
    b510:	20c01816 	blt	r4,r3,b574 <__floatunsisf+0xcc>
    b514:	20c9c83a 	sub	r4,r4,r3
    b518:	8108983a 	sll	r4,r16,r4
    b51c:	017f0034 	movhi	r5,64512
    b520:	297fffc4 	addi	r5,r5,-1
    b524:	218001cc 	andi	r6,r4,7
    b528:	214a703a 	and	r5,r4,r5
    b52c:	30000426 	beq	r6,zero,b540 <__floatunsisf+0x98>
    b530:	210003cc 	andi	r4,r4,15
    b534:	01800104 	movi	r6,4
    b538:	21800126 	beq	r4,r6,b540 <__floatunsisf+0x98>
    b53c:	298b883a 	add	r5,r5,r6
    b540:	2901002c 	andhi	r4,r5,1024
    b544:	20000526 	beq	r4,zero,b55c <__floatunsisf+0xb4>
    b548:	00c027c4 	movi	r3,159
    b54c:	1887c83a 	sub	r3,r3,r2
    b550:	00bf0034 	movhi	r2,64512
    b554:	10bfffc4 	addi	r2,r2,-1
    b558:	288a703a 	and	r5,r5,r2
    b55c:	280891ba 	slli	r4,r5,6
    b560:	2008d27a 	srli	r4,r4,9
    b564:	003fdf06 	br	b4e4 <_gp+0xffff5318>
    b568:	0007883a 	mov	r3,zero
    b56c:	0009883a 	mov	r4,zero
    b570:	003fdc06 	br	b4e4 <_gp+0xffff5318>
    b574:	01402e44 	movi	r5,185
    b578:	28cbc83a 	sub	r5,r5,r3
    b57c:	01000144 	movi	r4,5
    b580:	2089c83a 	sub	r4,r4,r2
    b584:	814a983a 	sll	r5,r16,r5
    b588:	8108d83a 	srl	r4,r16,r4
    b58c:	2820c03a 	cmpne	r16,r5,zero
    b590:	2408b03a 	or	r4,r4,r16
    b594:	003fe106 	br	b51c <_gp+0xffff5350>

0000b598 <__muldf3>:
    b598:	deffee04 	addi	sp,sp,-72
    b59c:	dd000c15 	stw	r20,48(sp)
    b5a0:	2828d53a 	srli	r20,r5,20
    b5a4:	ddc00f15 	stw	r23,60(sp)
    b5a8:	282ed7fa 	srli	r23,r5,31
    b5ac:	dc000815 	stw	r16,32(sp)
    b5b0:	04000434 	movhi	r16,16
    b5b4:	dcc00b15 	stw	r19,44(sp)
    b5b8:	843fffc4 	addi	r16,r16,-1
    b5bc:	dfc01115 	stw	ra,68(sp)
    b5c0:	df001015 	stw	fp,64(sp)
    b5c4:	dd800e15 	stw	r22,56(sp)
    b5c8:	dd400d15 	stw	r21,52(sp)
    b5cc:	dc800a15 	stw	r18,40(sp)
    b5d0:	dc400915 	stw	r17,36(sp)
    b5d4:	a501ffcc 	andi	r20,r20,2047
    b5d8:	2c20703a 	and	r16,r5,r16
    b5dc:	b827883a 	mov	r19,r23
    b5e0:	ba403fcc 	andi	r9,r23,255
    b5e4:	a0006026 	beq	r20,zero,b768 <__muldf3+0x1d0>
    b5e8:	0081ffc4 	movi	r2,2047
    b5ec:	202d883a 	mov	r22,r4
    b5f0:	a0803626 	beq	r20,r2,b6cc <__muldf3+0x134>
    b5f4:	84000434 	orhi	r16,r16,16
    b5f8:	200ad77a 	srli	r5,r4,29
    b5fc:	800490fa 	slli	r2,r16,3
    b600:	202c90fa 	slli	r22,r4,3
    b604:	a53f0044 	addi	r20,r20,-1023
    b608:	28a0b03a 	or	r16,r5,r2
    b60c:	002b883a 	mov	r21,zero
    b610:	000b883a 	mov	r5,zero
    b614:	3804d53a 	srli	r2,r7,20
    b618:	3838d7fa 	srli	fp,r7,31
    b61c:	04400434 	movhi	r17,16
    b620:	8c7fffc4 	addi	r17,r17,-1
    b624:	1081ffcc 	andi	r2,r2,2047
    b628:	3025883a 	mov	r18,r6
    b62c:	3c62703a 	and	r17,r7,r17
    b630:	e2803fcc 	andi	r10,fp,255
    b634:	10006d26 	beq	r2,zero,b7ec <__muldf3+0x254>
    b638:	00c1ffc4 	movi	r3,2047
    b63c:	10c06526 	beq	r2,r3,b7d4 <__muldf3+0x23c>
    b640:	8c400434 	orhi	r17,r17,16
    b644:	300ed77a 	srli	r7,r6,29
    b648:	880690fa 	slli	r3,r17,3
    b64c:	302490fa 	slli	r18,r6,3
    b650:	10bf0044 	addi	r2,r2,-1023
    b654:	38e2b03a 	or	r17,r7,r3
    b658:	000f883a 	mov	r7,zero
    b65c:	a087883a 	add	r3,r20,r2
    b660:	010003c4 	movi	r4,15
    b664:	3d44b03a 	or	r2,r7,r21
    b668:	e5ccf03a 	xor	r6,fp,r23
    b66c:	1a000044 	addi	r8,r3,1
    b670:	20809b36 	bltu	r4,r2,b8e0 <__muldf3+0x348>
    b674:	100490ba 	slli	r2,r2,2
    b678:	01000074 	movhi	r4,1
    b67c:	212da304 	addi	r4,r4,-18804
    b680:	1105883a 	add	r2,r2,r4
    b684:	10800017 	ldw	r2,0(r2)
    b688:	1000683a 	jmp	r2
    b68c:	0000b8e0 	cmpeqi	zero,zero,739
    b690:	0000b6ec 	andhi	zero,zero,731
    b694:	0000b6ec 	andhi	zero,zero,731
    b698:	0000b6e8 	cmpgeui	zero,zero,731
    b69c:	0000b8bc 	xorhi	zero,zero,738
    b6a0:	0000b8bc 	xorhi	zero,zero,738
    b6a4:	0000b8a4 	muli	zero,zero,738
    b6a8:	0000b6e8 	cmpgeui	zero,zero,731
    b6ac:	0000b8bc 	xorhi	zero,zero,738
    b6b0:	0000b8a4 	muli	zero,zero,738
    b6b4:	0000b8bc 	xorhi	zero,zero,738
    b6b8:	0000b6e8 	cmpgeui	zero,zero,731
    b6bc:	0000b8cc 	andi	zero,zero,739
    b6c0:	0000b8cc 	andi	zero,zero,739
    b6c4:	0000b8cc 	andi	zero,zero,739
    b6c8:	0000bc2c 	andhi	zero,zero,752
    b6cc:	2404b03a 	or	r2,r4,r16
    b6d0:	1000711e 	bne	r2,zero,b898 <__muldf3+0x300>
    b6d4:	05400204 	movi	r21,8
    b6d8:	0021883a 	mov	r16,zero
    b6dc:	002d883a 	mov	r22,zero
    b6e0:	01400084 	movi	r5,2
    b6e4:	003fcb06 	br	b614 <_gp+0xffff5448>
    b6e8:	500d883a 	mov	r6,r10
    b6ec:	00800084 	movi	r2,2
    b6f0:	38805926 	beq	r7,r2,b858 <__muldf3+0x2c0>
    b6f4:	008000c4 	movi	r2,3
    b6f8:	3881bb26 	beq	r7,r2,bde8 <__muldf3+0x850>
    b6fc:	00800044 	movi	r2,1
    b700:	3881961e 	bne	r7,r2,bd5c <__muldf3+0x7c4>
    b704:	3027883a 	mov	r19,r6
    b708:	0005883a 	mov	r2,zero
    b70c:	0021883a 	mov	r16,zero
    b710:	002d883a 	mov	r22,zero
    b714:	1004953a 	slli	r2,r2,20
    b718:	98c03fcc 	andi	r3,r19,255
    b71c:	04400434 	movhi	r17,16
    b720:	8c7fffc4 	addi	r17,r17,-1
    b724:	180697fa 	slli	r3,r3,31
    b728:	8460703a 	and	r16,r16,r17
    b72c:	80a0b03a 	or	r16,r16,r2
    b730:	80c6b03a 	or	r3,r16,r3
    b734:	b005883a 	mov	r2,r22
    b738:	dfc01117 	ldw	ra,68(sp)
    b73c:	df001017 	ldw	fp,64(sp)
    b740:	ddc00f17 	ldw	r23,60(sp)
    b744:	dd800e17 	ldw	r22,56(sp)
    b748:	dd400d17 	ldw	r21,52(sp)
    b74c:	dd000c17 	ldw	r20,48(sp)
    b750:	dcc00b17 	ldw	r19,44(sp)
    b754:	dc800a17 	ldw	r18,40(sp)
    b758:	dc400917 	ldw	r17,36(sp)
    b75c:	dc000817 	ldw	r16,32(sp)
    b760:	dec01204 	addi	sp,sp,72
    b764:	f800283a 	ret
    b768:	2404b03a 	or	r2,r4,r16
    b76c:	202b883a 	mov	r21,r4
    b770:	10004426 	beq	r2,zero,b884 <__muldf3+0x2ec>
    b774:	80015126 	beq	r16,zero,bcbc <__muldf3+0x724>
    b778:	8009883a 	mov	r4,r16
    b77c:	d9800715 	stw	r6,28(sp)
    b780:	d9c00215 	stw	r7,8(sp)
    b784:	da400415 	stw	r9,16(sp)
    b788:	000c0bc0 	call	c0bc <__clzsi2>
    b78c:	d9800717 	ldw	r6,28(sp)
    b790:	d9c00217 	ldw	r7,8(sp)
    b794:	da400417 	ldw	r9,16(sp)
    b798:	113ffd44 	addi	r4,r2,-11
    b79c:	00c00704 	movi	r3,28
    b7a0:	19014216 	blt	r3,r4,bcac <__muldf3+0x714>
    b7a4:	00c00744 	movi	r3,29
    b7a8:	15bffe04 	addi	r22,r2,-8
    b7ac:	1907c83a 	sub	r3,r3,r4
    b7b0:	85a0983a 	sll	r16,r16,r22
    b7b4:	a8c6d83a 	srl	r3,r21,r3
    b7b8:	adac983a 	sll	r22,r21,r22
    b7bc:	1c20b03a 	or	r16,r3,r16
    b7c0:	1080fcc4 	addi	r2,r2,1011
    b7c4:	00a9c83a 	sub	r20,zero,r2
    b7c8:	002b883a 	mov	r21,zero
    b7cc:	000b883a 	mov	r5,zero
    b7d0:	003f9006 	br	b614 <_gp+0xffff5448>
    b7d4:	3446b03a 	or	r3,r6,r17
    b7d8:	1800281e 	bne	r3,zero,b87c <__muldf3+0x2e4>
    b7dc:	0023883a 	mov	r17,zero
    b7e0:	0025883a 	mov	r18,zero
    b7e4:	01c00084 	movi	r7,2
    b7e8:	003f9c06 	br	b65c <_gp+0xffff5490>
    b7ec:	3446b03a 	or	r3,r6,r17
    b7f0:	18001e26 	beq	r3,zero,b86c <__muldf3+0x2d4>
    b7f4:	88012126 	beq	r17,zero,bc7c <__muldf3+0x6e4>
    b7f8:	8809883a 	mov	r4,r17
    b7fc:	d9400215 	stw	r5,8(sp)
    b800:	d9800715 	stw	r6,28(sp)
    b804:	da400415 	stw	r9,16(sp)
    b808:	da800315 	stw	r10,12(sp)
    b80c:	000c0bc0 	call	c0bc <__clzsi2>
    b810:	d9400217 	ldw	r5,8(sp)
    b814:	d9800717 	ldw	r6,28(sp)
    b818:	da400417 	ldw	r9,16(sp)
    b81c:	da800317 	ldw	r10,12(sp)
    b820:	113ffd44 	addi	r4,r2,-11
    b824:	00c00704 	movi	r3,28
    b828:	19011016 	blt	r3,r4,bc6c <__muldf3+0x6d4>
    b82c:	00c00744 	movi	r3,29
    b830:	14bffe04 	addi	r18,r2,-8
    b834:	1907c83a 	sub	r3,r3,r4
    b838:	8ca2983a 	sll	r17,r17,r18
    b83c:	30c6d83a 	srl	r3,r6,r3
    b840:	34a4983a 	sll	r18,r6,r18
    b844:	1c62b03a 	or	r17,r3,r17
    b848:	1080fcc4 	addi	r2,r2,1011
    b84c:	0085c83a 	sub	r2,zero,r2
    b850:	000f883a 	mov	r7,zero
    b854:	003f8106 	br	b65c <_gp+0xffff5490>
    b858:	3027883a 	mov	r19,r6
    b85c:	0081ffc4 	movi	r2,2047
    b860:	0021883a 	mov	r16,zero
    b864:	002d883a 	mov	r22,zero
    b868:	003faa06 	br	b714 <_gp+0xffff5548>
    b86c:	0023883a 	mov	r17,zero
    b870:	0025883a 	mov	r18,zero
    b874:	01c00044 	movi	r7,1
    b878:	003f7806 	br	b65c <_gp+0xffff5490>
    b87c:	01c000c4 	movi	r7,3
    b880:	003f7606 	br	b65c <_gp+0xffff5490>
    b884:	05400104 	movi	r21,4
    b888:	0021883a 	mov	r16,zero
    b88c:	002d883a 	mov	r22,zero
    b890:	01400044 	movi	r5,1
    b894:	003f5f06 	br	b614 <_gp+0xffff5448>
    b898:	05400304 	movi	r21,12
    b89c:	014000c4 	movi	r5,3
    b8a0:	003f5c06 	br	b614 <_gp+0xffff5448>
    b8a4:	04000434 	movhi	r16,16
    b8a8:	0027883a 	mov	r19,zero
    b8ac:	843fffc4 	addi	r16,r16,-1
    b8b0:	05bfffc4 	movi	r22,-1
    b8b4:	0081ffc4 	movi	r2,2047
    b8b8:	003f9606 	br	b714 <_gp+0xffff5548>
    b8bc:	8023883a 	mov	r17,r16
    b8c0:	b025883a 	mov	r18,r22
    b8c4:	280f883a 	mov	r7,r5
    b8c8:	003f8806 	br	b6ec <_gp+0xffff5520>
    b8cc:	8023883a 	mov	r17,r16
    b8d0:	b025883a 	mov	r18,r22
    b8d4:	480d883a 	mov	r6,r9
    b8d8:	280f883a 	mov	r7,r5
    b8dc:	003f8306 	br	b6ec <_gp+0xffff5520>
    b8e0:	b026d43a 	srli	r19,r22,16
    b8e4:	902ed43a 	srli	r23,r18,16
    b8e8:	b5bfffcc 	andi	r22,r22,65535
    b8ec:	94bfffcc 	andi	r18,r18,65535
    b8f0:	b00b883a 	mov	r5,r22
    b8f4:	9009883a 	mov	r4,r18
    b8f8:	d8c00515 	stw	r3,20(sp)
    b8fc:	d9800715 	stw	r6,28(sp)
    b900:	da000615 	stw	r8,24(sp)
    b904:	000ac100 	call	ac10 <__mulsi3>
    b908:	980b883a 	mov	r5,r19
    b90c:	9009883a 	mov	r4,r18
    b910:	1029883a 	mov	r20,r2
    b914:	000ac100 	call	ac10 <__mulsi3>
    b918:	b80b883a 	mov	r5,r23
    b91c:	9809883a 	mov	r4,r19
    b920:	102b883a 	mov	r21,r2
    b924:	000ac100 	call	ac10 <__mulsi3>
    b928:	b809883a 	mov	r4,r23
    b92c:	b00b883a 	mov	r5,r22
    b930:	1039883a 	mov	fp,r2
    b934:	000ac100 	call	ac10 <__mulsi3>
    b938:	a008d43a 	srli	r4,r20,16
    b93c:	1545883a 	add	r2,r2,r21
    b940:	d8c00517 	ldw	r3,20(sp)
    b944:	2085883a 	add	r2,r4,r2
    b948:	d9800717 	ldw	r6,28(sp)
    b94c:	da000617 	ldw	r8,24(sp)
    b950:	1540022e 	bgeu	r2,r21,b95c <__muldf3+0x3c4>
    b954:	01000074 	movhi	r4,1
    b958:	e139883a 	add	fp,fp,r4
    b95c:	100e943a 	slli	r7,r2,16
    b960:	1004d43a 	srli	r2,r2,16
    b964:	882ad43a 	srli	r21,r17,16
    b968:	a53fffcc 	andi	r20,r20,65535
    b96c:	8c7fffcc 	andi	r17,r17,65535
    b970:	3d29883a 	add	r20,r7,r20
    b974:	b00b883a 	mov	r5,r22
    b978:	8809883a 	mov	r4,r17
    b97c:	d8c00515 	stw	r3,20(sp)
    b980:	d9800715 	stw	r6,28(sp)
    b984:	da000615 	stw	r8,24(sp)
    b988:	dd000115 	stw	r20,4(sp)
    b98c:	d8800015 	stw	r2,0(sp)
    b990:	000ac100 	call	ac10 <__mulsi3>
    b994:	980b883a 	mov	r5,r19
    b998:	8809883a 	mov	r4,r17
    b99c:	d8800215 	stw	r2,8(sp)
    b9a0:	000ac100 	call	ac10 <__mulsi3>
    b9a4:	9809883a 	mov	r4,r19
    b9a8:	a80b883a 	mov	r5,r21
    b9ac:	1029883a 	mov	r20,r2
    b9b0:	000ac100 	call	ac10 <__mulsi3>
    b9b4:	b00b883a 	mov	r5,r22
    b9b8:	a809883a 	mov	r4,r21
    b9bc:	d8800415 	stw	r2,16(sp)
    b9c0:	000ac100 	call	ac10 <__mulsi3>
    b9c4:	d9c00217 	ldw	r7,8(sp)
    b9c8:	1505883a 	add	r2,r2,r20
    b9cc:	d8c00517 	ldw	r3,20(sp)
    b9d0:	3826d43a 	srli	r19,r7,16
    b9d4:	d9800717 	ldw	r6,28(sp)
    b9d8:	da000617 	ldw	r8,24(sp)
    b9dc:	9885883a 	add	r2,r19,r2
    b9e0:	da400417 	ldw	r9,16(sp)
    b9e4:	1500022e 	bgeu	r2,r20,b9f0 <__muldf3+0x458>
    b9e8:	01000074 	movhi	r4,1
    b9ec:	4913883a 	add	r9,r9,r4
    b9f0:	1028d43a 	srli	r20,r2,16
    b9f4:	1004943a 	slli	r2,r2,16
    b9f8:	802cd43a 	srli	r22,r16,16
    b9fc:	843fffcc 	andi	r16,r16,65535
    ba00:	3cffffcc 	andi	r19,r7,65535
    ba04:	9009883a 	mov	r4,r18
    ba08:	800b883a 	mov	r5,r16
    ba0c:	a269883a 	add	r20,r20,r9
    ba10:	d8c00515 	stw	r3,20(sp)
    ba14:	d9800715 	stw	r6,28(sp)
    ba18:	da000615 	stw	r8,24(sp)
    ba1c:	14e7883a 	add	r19,r2,r19
    ba20:	000ac100 	call	ac10 <__mulsi3>
    ba24:	9009883a 	mov	r4,r18
    ba28:	b00b883a 	mov	r5,r22
    ba2c:	d8800315 	stw	r2,12(sp)
    ba30:	000ac100 	call	ac10 <__mulsi3>
    ba34:	b809883a 	mov	r4,r23
    ba38:	b00b883a 	mov	r5,r22
    ba3c:	d8800215 	stw	r2,8(sp)
    ba40:	000ac100 	call	ac10 <__mulsi3>
    ba44:	b80b883a 	mov	r5,r23
    ba48:	8009883a 	mov	r4,r16
    ba4c:	d8800415 	stw	r2,16(sp)
    ba50:	000ac100 	call	ac10 <__mulsi3>
    ba54:	da800317 	ldw	r10,12(sp)
    ba58:	d9c00217 	ldw	r7,8(sp)
    ba5c:	d9000017 	ldw	r4,0(sp)
    ba60:	502ed43a 	srli	r23,r10,16
    ba64:	11c5883a 	add	r2,r2,r7
    ba68:	24e5883a 	add	r18,r4,r19
    ba6c:	b885883a 	add	r2,r23,r2
    ba70:	d8c00517 	ldw	r3,20(sp)
    ba74:	d9800717 	ldw	r6,28(sp)
    ba78:	da000617 	ldw	r8,24(sp)
    ba7c:	da400417 	ldw	r9,16(sp)
    ba80:	11c0022e 	bgeu	r2,r7,ba8c <__muldf3+0x4f4>
    ba84:	01000074 	movhi	r4,1
    ba88:	4913883a 	add	r9,r9,r4
    ba8c:	100ed43a 	srli	r7,r2,16
    ba90:	1004943a 	slli	r2,r2,16
    ba94:	55ffffcc 	andi	r23,r10,65535
    ba98:	3a53883a 	add	r9,r7,r9
    ba9c:	8809883a 	mov	r4,r17
    baa0:	800b883a 	mov	r5,r16
    baa4:	d8c00515 	stw	r3,20(sp)
    baa8:	d9800715 	stw	r6,28(sp)
    baac:	da000615 	stw	r8,24(sp)
    bab0:	da400415 	stw	r9,16(sp)
    bab4:	15ef883a 	add	r23,r2,r23
    bab8:	000ac100 	call	ac10 <__mulsi3>
    babc:	8809883a 	mov	r4,r17
    bac0:	b00b883a 	mov	r5,r22
    bac4:	d8800215 	stw	r2,8(sp)
    bac8:	000ac100 	call	ac10 <__mulsi3>
    bacc:	b00b883a 	mov	r5,r22
    bad0:	a809883a 	mov	r4,r21
    bad4:	d8800315 	stw	r2,12(sp)
    bad8:	000ac100 	call	ac10 <__mulsi3>
    badc:	8009883a 	mov	r4,r16
    bae0:	a80b883a 	mov	r5,r21
    bae4:	1023883a 	mov	r17,r2
    bae8:	000ac100 	call	ac10 <__mulsi3>
    baec:	d9c00217 	ldw	r7,8(sp)
    baf0:	da800317 	ldw	r10,12(sp)
    baf4:	d8c00517 	ldw	r3,20(sp)
    baf8:	3808d43a 	srli	r4,r7,16
    bafc:	1285883a 	add	r2,r2,r10
    bb00:	d9800717 	ldw	r6,28(sp)
    bb04:	2085883a 	add	r2,r4,r2
    bb08:	da000617 	ldw	r8,24(sp)
    bb0c:	da400417 	ldw	r9,16(sp)
    bb10:	1280022e 	bgeu	r2,r10,bb1c <__muldf3+0x584>
    bb14:	01000074 	movhi	r4,1
    bb18:	8923883a 	add	r17,r17,r4
    bb1c:	1008943a 	slli	r4,r2,16
    bb20:	39ffffcc 	andi	r7,r7,65535
    bb24:	e4b9883a 	add	fp,fp,r18
    bb28:	21cf883a 	add	r7,r4,r7
    bb2c:	e4e7803a 	cmpltu	r19,fp,r19
    bb30:	3d0f883a 	add	r7,r7,r20
    bb34:	bf39883a 	add	fp,r23,fp
    bb38:	99c9883a 	add	r4,r19,r7
    bb3c:	e5ef803a 	cmpltu	r23,fp,r23
    bb40:	490b883a 	add	r5,r9,r4
    bb44:	1004d43a 	srli	r2,r2,16
    bb48:	b965883a 	add	r18,r23,r5
    bb4c:	24c9803a 	cmpltu	r4,r4,r19
    bb50:	3d29803a 	cmpltu	r20,r7,r20
    bb54:	a128b03a 	or	r20,r20,r4
    bb58:	95ef803a 	cmpltu	r23,r18,r23
    bb5c:	2a53803a 	cmpltu	r9,r5,r9
    bb60:	a0a9883a 	add	r20,r20,r2
    bb64:	4deeb03a 	or	r23,r9,r23
    bb68:	a5ef883a 	add	r23,r20,r23
    bb6c:	bc63883a 	add	r17,r23,r17
    bb70:	e004927a 	slli	r2,fp,9
    bb74:	d9000117 	ldw	r4,4(sp)
    bb78:	882e927a 	slli	r23,r17,9
    bb7c:	9022d5fa 	srli	r17,r18,23
    bb80:	e038d5fa 	srli	fp,fp,23
    bb84:	1104b03a 	or	r2,r2,r4
    bb88:	9024927a 	slli	r18,r18,9
    bb8c:	1004c03a 	cmpne	r2,r2,zero
    bb90:	bc62b03a 	or	r17,r23,r17
    bb94:	1738b03a 	or	fp,r2,fp
    bb98:	8880402c 	andhi	r2,r17,256
    bb9c:	e4a4b03a 	or	r18,fp,r18
    bba0:	10000726 	beq	r2,zero,bbc0 <__muldf3+0x628>
    bba4:	9006d07a 	srli	r3,r18,1
    bba8:	880497fa 	slli	r2,r17,31
    bbac:	9480004c 	andi	r18,r18,1
    bbb0:	8822d07a 	srli	r17,r17,1
    bbb4:	1ca4b03a 	or	r18,r3,r18
    bbb8:	14a4b03a 	or	r18,r2,r18
    bbbc:	4007883a 	mov	r3,r8
    bbc0:	1880ffc4 	addi	r2,r3,1023
    bbc4:	0080460e 	bge	zero,r2,bce0 <__muldf3+0x748>
    bbc8:	910001cc 	andi	r4,r18,7
    bbcc:	20000726 	beq	r4,zero,bbec <__muldf3+0x654>
    bbd0:	910003cc 	andi	r4,r18,15
    bbd4:	01400104 	movi	r5,4
    bbd8:	21400426 	beq	r4,r5,bbec <__muldf3+0x654>
    bbdc:	9149883a 	add	r4,r18,r5
    bbe0:	24a5803a 	cmpltu	r18,r4,r18
    bbe4:	8ca3883a 	add	r17,r17,r18
    bbe8:	2025883a 	mov	r18,r4
    bbec:	8900402c 	andhi	r4,r17,256
    bbf0:	20000426 	beq	r4,zero,bc04 <__muldf3+0x66c>
    bbf4:	18810004 	addi	r2,r3,1024
    bbf8:	00ffc034 	movhi	r3,65280
    bbfc:	18ffffc4 	addi	r3,r3,-1
    bc00:	88e2703a 	and	r17,r17,r3
    bc04:	00c1ff84 	movi	r3,2046
    bc08:	18bf1316 	blt	r3,r2,b858 <_gp+0xffff568c>
    bc0c:	882c977a 	slli	r22,r17,29
    bc10:	9024d0fa 	srli	r18,r18,3
    bc14:	8822927a 	slli	r17,r17,9
    bc18:	1081ffcc 	andi	r2,r2,2047
    bc1c:	b4acb03a 	or	r22,r22,r18
    bc20:	8820d33a 	srli	r16,r17,12
    bc24:	3027883a 	mov	r19,r6
    bc28:	003eba06 	br	b714 <_gp+0xffff5548>
    bc2c:	8080022c 	andhi	r2,r16,8
    bc30:	10000926 	beq	r2,zero,bc58 <__muldf3+0x6c0>
    bc34:	8880022c 	andhi	r2,r17,8
    bc38:	1000071e 	bne	r2,zero,bc58 <__muldf3+0x6c0>
    bc3c:	00800434 	movhi	r2,16
    bc40:	8c000234 	orhi	r16,r17,8
    bc44:	10bfffc4 	addi	r2,r2,-1
    bc48:	e027883a 	mov	r19,fp
    bc4c:	80a0703a 	and	r16,r16,r2
    bc50:	902d883a 	mov	r22,r18
    bc54:	003f1706 	br	b8b4 <_gp+0xffff56e8>
    bc58:	00800434 	movhi	r2,16
    bc5c:	84000234 	orhi	r16,r16,8
    bc60:	10bfffc4 	addi	r2,r2,-1
    bc64:	80a0703a 	and	r16,r16,r2
    bc68:	003f1206 	br	b8b4 <_gp+0xffff56e8>
    bc6c:	147ff604 	addi	r17,r2,-40
    bc70:	3462983a 	sll	r17,r6,r17
    bc74:	0025883a 	mov	r18,zero
    bc78:	003ef306 	br	b848 <_gp+0xffff567c>
    bc7c:	3009883a 	mov	r4,r6
    bc80:	d9400215 	stw	r5,8(sp)
    bc84:	d9800715 	stw	r6,28(sp)
    bc88:	da400415 	stw	r9,16(sp)
    bc8c:	da800315 	stw	r10,12(sp)
    bc90:	000c0bc0 	call	c0bc <__clzsi2>
    bc94:	10800804 	addi	r2,r2,32
    bc98:	da800317 	ldw	r10,12(sp)
    bc9c:	da400417 	ldw	r9,16(sp)
    bca0:	d9800717 	ldw	r6,28(sp)
    bca4:	d9400217 	ldw	r5,8(sp)
    bca8:	003edd06 	br	b820 <_gp+0xffff5654>
    bcac:	143ff604 	addi	r16,r2,-40
    bcb0:	ac20983a 	sll	r16,r21,r16
    bcb4:	002d883a 	mov	r22,zero
    bcb8:	003ec106 	br	b7c0 <_gp+0xffff55f4>
    bcbc:	d9800715 	stw	r6,28(sp)
    bcc0:	d9c00215 	stw	r7,8(sp)
    bcc4:	da400415 	stw	r9,16(sp)
    bcc8:	000c0bc0 	call	c0bc <__clzsi2>
    bccc:	10800804 	addi	r2,r2,32
    bcd0:	da400417 	ldw	r9,16(sp)
    bcd4:	d9c00217 	ldw	r7,8(sp)
    bcd8:	d9800717 	ldw	r6,28(sp)
    bcdc:	003eae06 	br	b798 <_gp+0xffff55cc>
    bce0:	00c00044 	movi	r3,1
    bce4:	1887c83a 	sub	r3,r3,r2
    bce8:	01000e04 	movi	r4,56
    bcec:	20fe8516 	blt	r4,r3,b704 <_gp+0xffff5538>
    bcf0:	010007c4 	movi	r4,31
    bcf4:	20c01b16 	blt	r4,r3,bd64 <__muldf3+0x7cc>
    bcf8:	00800804 	movi	r2,32
    bcfc:	10c5c83a 	sub	r2,r2,r3
    bd00:	888a983a 	sll	r5,r17,r2
    bd04:	90c8d83a 	srl	r4,r18,r3
    bd08:	9084983a 	sll	r2,r18,r2
    bd0c:	88e2d83a 	srl	r17,r17,r3
    bd10:	2906b03a 	or	r3,r5,r4
    bd14:	1004c03a 	cmpne	r2,r2,zero
    bd18:	1886b03a 	or	r3,r3,r2
    bd1c:	188001cc 	andi	r2,r3,7
    bd20:	10000726 	beq	r2,zero,bd40 <__muldf3+0x7a8>
    bd24:	188003cc 	andi	r2,r3,15
    bd28:	01000104 	movi	r4,4
    bd2c:	11000426 	beq	r2,r4,bd40 <__muldf3+0x7a8>
    bd30:	1805883a 	mov	r2,r3
    bd34:	10c00104 	addi	r3,r2,4
    bd38:	1885803a 	cmpltu	r2,r3,r2
    bd3c:	88a3883a 	add	r17,r17,r2
    bd40:	8880202c 	andhi	r2,r17,128
    bd44:	10001c26 	beq	r2,zero,bdb8 <__muldf3+0x820>
    bd48:	3027883a 	mov	r19,r6
    bd4c:	00800044 	movi	r2,1
    bd50:	0021883a 	mov	r16,zero
    bd54:	002d883a 	mov	r22,zero
    bd58:	003e6e06 	br	b714 <_gp+0xffff5548>
    bd5c:	4007883a 	mov	r3,r8
    bd60:	003f9706 	br	bbc0 <_gp+0xffff59f4>
    bd64:	017ff844 	movi	r5,-31
    bd68:	2885c83a 	sub	r2,r5,r2
    bd6c:	888ad83a 	srl	r5,r17,r2
    bd70:	00800804 	movi	r2,32
    bd74:	18801a26 	beq	r3,r2,bde0 <__muldf3+0x848>
    bd78:	01001004 	movi	r4,64
    bd7c:	20c7c83a 	sub	r3,r4,r3
    bd80:	88e2983a 	sll	r17,r17,r3
    bd84:	8ca4b03a 	or	r18,r17,r18
    bd88:	9004c03a 	cmpne	r2,r18,zero
    bd8c:	2884b03a 	or	r2,r5,r2
    bd90:	144001cc 	andi	r17,r2,7
    bd94:	88000d1e 	bne	r17,zero,bdcc <__muldf3+0x834>
    bd98:	0021883a 	mov	r16,zero
    bd9c:	102cd0fa 	srli	r22,r2,3
    bda0:	3027883a 	mov	r19,r6
    bda4:	0005883a 	mov	r2,zero
    bda8:	b46cb03a 	or	r22,r22,r17
    bdac:	003e5906 	br	b714 <_gp+0xffff5548>
    bdb0:	1007883a 	mov	r3,r2
    bdb4:	0023883a 	mov	r17,zero
    bdb8:	8820927a 	slli	r16,r17,9
    bdbc:	1805883a 	mov	r2,r3
    bdc0:	8822977a 	slli	r17,r17,29
    bdc4:	8020d33a 	srli	r16,r16,12
    bdc8:	003ff406 	br	bd9c <_gp+0xffff5bd0>
    bdcc:	10c003cc 	andi	r3,r2,15
    bdd0:	01000104 	movi	r4,4
    bdd4:	193ff626 	beq	r3,r4,bdb0 <_gp+0xffff5be4>
    bdd8:	0023883a 	mov	r17,zero
    bddc:	003fd506 	br	bd34 <_gp+0xffff5b68>
    bde0:	0023883a 	mov	r17,zero
    bde4:	003fe706 	br	bd84 <_gp+0xffff5bb8>
    bde8:	00800434 	movhi	r2,16
    bdec:	8c000234 	orhi	r16,r17,8
    bdf0:	10bfffc4 	addi	r2,r2,-1
    bdf4:	3027883a 	mov	r19,r6
    bdf8:	80a0703a 	and	r16,r16,r2
    bdfc:	902d883a 	mov	r22,r18
    be00:	003eac06 	br	b8b4 <_gp+0xffff56e8>

0000be04 <__extendsfdf2>:
    be04:	200ad5fa 	srli	r5,r4,23
    be08:	defffd04 	addi	sp,sp,-12
    be0c:	dc400115 	stw	r17,4(sp)
    be10:	29403fcc 	andi	r5,r5,255
    be14:	29800044 	addi	r6,r5,1
    be18:	04402034 	movhi	r17,128
    be1c:	dc000015 	stw	r16,0(sp)
    be20:	8c7fffc4 	addi	r17,r17,-1
    be24:	dfc00215 	stw	ra,8(sp)
    be28:	31803fcc 	andi	r6,r6,255
    be2c:	00800044 	movi	r2,1
    be30:	8922703a 	and	r17,r17,r4
    be34:	2020d7fa 	srli	r16,r4,31
    be38:	1180110e 	bge	r2,r6,be80 <__extendsfdf2+0x7c>
    be3c:	880cd0fa 	srli	r6,r17,3
    be40:	8822977a 	slli	r17,r17,29
    be44:	2940e004 	addi	r5,r5,896
    be48:	2941ffcc 	andi	r5,r5,2047
    be4c:	2804953a 	slli	r2,r5,20
    be50:	01400434 	movhi	r5,16
    be54:	800697fa 	slli	r3,r16,31
    be58:	297fffc4 	addi	r5,r5,-1
    be5c:	314a703a 	and	r5,r6,r5
    be60:	288ab03a 	or	r5,r5,r2
    be64:	28c6b03a 	or	r3,r5,r3
    be68:	8805883a 	mov	r2,r17
    be6c:	dfc00217 	ldw	ra,8(sp)
    be70:	dc400117 	ldw	r17,4(sp)
    be74:	dc000017 	ldw	r16,0(sp)
    be78:	dec00304 	addi	sp,sp,12
    be7c:	f800283a 	ret
    be80:	2800111e 	bne	r5,zero,bec8 <__extendsfdf2+0xc4>
    be84:	88001c26 	beq	r17,zero,bef8 <__extendsfdf2+0xf4>
    be88:	8809883a 	mov	r4,r17
    be8c:	000c0bc0 	call	c0bc <__clzsi2>
    be90:	00c00284 	movi	r3,10
    be94:	18801b16 	blt	r3,r2,bf04 <__extendsfdf2+0x100>
    be98:	018002c4 	movi	r6,11
    be9c:	308dc83a 	sub	r6,r6,r2
    bea0:	11000544 	addi	r4,r2,21
    bea4:	8986d83a 	srl	r3,r17,r6
    bea8:	8922983a 	sll	r17,r17,r4
    beac:	0180e244 	movi	r6,905
    beb0:	01400434 	movhi	r5,16
    beb4:	3085c83a 	sub	r2,r6,r2
    beb8:	297fffc4 	addi	r5,r5,-1
    bebc:	194c703a 	and	r6,r3,r5
    bec0:	1141ffcc 	andi	r5,r2,2047
    bec4:	003fe006 	br	be48 <_gp+0xffff5c7c>
    bec8:	88000826 	beq	r17,zero,beec <__extendsfdf2+0xe8>
    becc:	880cd0fa 	srli	r6,r17,3
    bed0:	00800434 	movhi	r2,16
    bed4:	10bfffc4 	addi	r2,r2,-1
    bed8:	31800234 	orhi	r6,r6,8
    bedc:	8822977a 	slli	r17,r17,29
    bee0:	308c703a 	and	r6,r6,r2
    bee4:	0141ffc4 	movi	r5,2047
    bee8:	003fd706 	br	be48 <_gp+0xffff5c7c>
    beec:	0141ffc4 	movi	r5,2047
    bef0:	000d883a 	mov	r6,zero
    bef4:	003fd406 	br	be48 <_gp+0xffff5c7c>
    bef8:	000b883a 	mov	r5,zero
    befc:	000d883a 	mov	r6,zero
    bf00:	003fd106 	br	be48 <_gp+0xffff5c7c>
    bf04:	11bffd44 	addi	r6,r2,-11
    bf08:	8986983a 	sll	r3,r17,r6
    bf0c:	0023883a 	mov	r17,zero
    bf10:	003fe606 	br	beac <_gp+0xffff5ce0>

0000bf14 <__truncdfsf2>:
    bf14:	2810d53a 	srli	r8,r5,20
    bf18:	01c00434 	movhi	r7,16
    bf1c:	39ffffc4 	addi	r7,r7,-1
    bf20:	29ce703a 	and	r7,r5,r7
    bf24:	4201ffcc 	andi	r8,r8,2047
    bf28:	380e90fa 	slli	r7,r7,3
    bf2c:	200cd77a 	srli	r6,r4,29
    bf30:	42400044 	addi	r9,r8,1
    bf34:	4a41ffcc 	andi	r9,r9,2047
    bf38:	00c00044 	movi	r3,1
    bf3c:	280ad7fa 	srli	r5,r5,31
    bf40:	31ceb03a 	or	r7,r6,r7
    bf44:	200490fa 	slli	r2,r4,3
    bf48:	1a40230e 	bge	r3,r9,bfd8 <__truncdfsf2+0xc4>
    bf4c:	40ff2004 	addi	r3,r8,-896
    bf50:	01803f84 	movi	r6,254
    bf54:	30c01516 	blt	r6,r3,bfac <__truncdfsf2+0x98>
    bf58:	00c0380e 	bge	zero,r3,c03c <__truncdfsf2+0x128>
    bf5c:	200c91ba 	slli	r6,r4,6
    bf60:	380e90fa 	slli	r7,r7,3
    bf64:	1004d77a 	srli	r2,r2,29
    bf68:	300cc03a 	cmpne	r6,r6,zero
    bf6c:	31ccb03a 	or	r6,r6,r7
    bf70:	308cb03a 	or	r6,r6,r2
    bf74:	308001cc 	andi	r2,r6,7
    bf78:	10000426 	beq	r2,zero,bf8c <__truncdfsf2+0x78>
    bf7c:	308003cc 	andi	r2,r6,15
    bf80:	01000104 	movi	r4,4
    bf84:	11000126 	beq	r2,r4,bf8c <__truncdfsf2+0x78>
    bf88:	31800104 	addi	r6,r6,4
    bf8c:	3081002c 	andhi	r2,r6,1024
    bf90:	10001626 	beq	r2,zero,bfec <__truncdfsf2+0xd8>
    bf94:	18c00044 	addi	r3,r3,1
    bf98:	00803fc4 	movi	r2,255
    bf9c:	18800326 	beq	r3,r2,bfac <__truncdfsf2+0x98>
    bfa0:	300c91ba 	slli	r6,r6,6
    bfa4:	300cd27a 	srli	r6,r6,9
    bfa8:	00000206 	br	bfb4 <__truncdfsf2+0xa0>
    bfac:	00ffffc4 	movi	r3,-1
    bfb0:	000d883a 	mov	r6,zero
    bfb4:	18c03fcc 	andi	r3,r3,255
    bfb8:	180895fa 	slli	r4,r3,23
    bfbc:	00c02034 	movhi	r3,128
    bfc0:	280a97fa 	slli	r5,r5,31
    bfc4:	18ffffc4 	addi	r3,r3,-1
    bfc8:	30c6703a 	and	r3,r6,r3
    bfcc:	1906b03a 	or	r3,r3,r4
    bfd0:	1944b03a 	or	r2,r3,r5
    bfd4:	f800283a 	ret
    bfd8:	40000b1e 	bne	r8,zero,c008 <__truncdfsf2+0xf4>
    bfdc:	388cb03a 	or	r6,r7,r2
    bfe0:	0007883a 	mov	r3,zero
    bfe4:	30000426 	beq	r6,zero,bff8 <__truncdfsf2+0xe4>
    bfe8:	01800144 	movi	r6,5
    bfec:	00803fc4 	movi	r2,255
    bff0:	300cd0fa 	srli	r6,r6,3
    bff4:	18800a26 	beq	r3,r2,c020 <__truncdfsf2+0x10c>
    bff8:	00802034 	movhi	r2,128
    bffc:	10bfffc4 	addi	r2,r2,-1
    c000:	308c703a 	and	r6,r6,r2
    c004:	003feb06 	br	bfb4 <_gp+0xffff5de8>
    c008:	3888b03a 	or	r4,r7,r2
    c00c:	203fe726 	beq	r4,zero,bfac <_gp+0xffff5de0>
    c010:	380c90fa 	slli	r6,r7,3
    c014:	00c03fc4 	movi	r3,255
    c018:	31808034 	orhi	r6,r6,512
    c01c:	003fd506 	br	bf74 <_gp+0xffff5da8>
    c020:	303fe226 	beq	r6,zero,bfac <_gp+0xffff5de0>
    c024:	00802034 	movhi	r2,128
    c028:	31801034 	orhi	r6,r6,64
    c02c:	10bfffc4 	addi	r2,r2,-1
    c030:	00ffffc4 	movi	r3,-1
    c034:	308c703a 	and	r6,r6,r2
    c038:	003fde06 	br	bfb4 <_gp+0xffff5de8>
    c03c:	013ffa44 	movi	r4,-23
    c040:	19000e16 	blt	r3,r4,c07c <__truncdfsf2+0x168>
    c044:	01000784 	movi	r4,30
    c048:	20c9c83a 	sub	r4,r4,r3
    c04c:	018007c4 	movi	r6,31
    c050:	39c02034 	orhi	r7,r7,128
    c054:	31000b16 	blt	r6,r4,c084 <__truncdfsf2+0x170>
    c058:	423f2084 	addi	r8,r8,-894
    c05c:	120c983a 	sll	r6,r2,r8
    c060:	3a0e983a 	sll	r7,r7,r8
    c064:	1104d83a 	srl	r2,r2,r4
    c068:	300cc03a 	cmpne	r6,r6,zero
    c06c:	31ceb03a 	or	r7,r6,r7
    c070:	388cb03a 	or	r6,r7,r2
    c074:	0007883a 	mov	r3,zero
    c078:	003fbe06 	br	bf74 <_gp+0xffff5da8>
    c07c:	0007883a 	mov	r3,zero
    c080:	003fd906 	br	bfe8 <_gp+0xffff5e1c>
    c084:	01bfff84 	movi	r6,-2
    c088:	30cdc83a 	sub	r6,r6,r3
    c08c:	00c00804 	movi	r3,32
    c090:	398cd83a 	srl	r6,r7,r6
    c094:	20c00726 	beq	r4,r3,c0b4 <__truncdfsf2+0x1a0>
    c098:	423f2884 	addi	r8,r8,-862
    c09c:	3a0e983a 	sll	r7,r7,r8
    c0a0:	3884b03a 	or	r2,r7,r2
    c0a4:	1004c03a 	cmpne	r2,r2,zero
    c0a8:	118cb03a 	or	r6,r2,r6
    c0ac:	0007883a 	mov	r3,zero
    c0b0:	003fb006 	br	bf74 <_gp+0xffff5da8>
    c0b4:	000f883a 	mov	r7,zero
    c0b8:	003ff906 	br	c0a0 <_gp+0xffff5ed4>

0000c0bc <__clzsi2>:
    c0bc:	00bfffd4 	movui	r2,65535
    c0c0:	11000536 	bltu	r2,r4,c0d8 <__clzsi2+0x1c>
    c0c4:	00803fc4 	movi	r2,255
    c0c8:	11000f36 	bltu	r2,r4,c108 <__clzsi2+0x4c>
    c0cc:	00800804 	movi	r2,32
    c0d0:	0007883a 	mov	r3,zero
    c0d4:	00000506 	br	c0ec <__clzsi2+0x30>
    c0d8:	00804034 	movhi	r2,256
    c0dc:	10bfffc4 	addi	r2,r2,-1
    c0e0:	11000c2e 	bgeu	r2,r4,c114 <__clzsi2+0x58>
    c0e4:	00800204 	movi	r2,8
    c0e8:	00c00604 	movi	r3,24
    c0ec:	20c8d83a 	srl	r4,r4,r3
    c0f0:	00c00074 	movhi	r3,1
    c0f4:	18f6c804 	addi	r3,r3,-9440
    c0f8:	1909883a 	add	r4,r3,r4
    c0fc:	20c00003 	ldbu	r3,0(r4)
    c100:	10c5c83a 	sub	r2,r2,r3
    c104:	f800283a 	ret
    c108:	00800604 	movi	r2,24
    c10c:	00c00204 	movi	r3,8
    c110:	003ff606 	br	c0ec <_gp+0xffff5f20>
    c114:	00800404 	movi	r2,16
    c118:	1007883a 	mov	r3,r2
    c11c:	003ff306 	br	c0ec <_gp+0xffff5f20>

0000c120 <malloc>:
    c120:	00800074 	movhi	r2,1
    c124:	10b87504 	addi	r2,r2,-7724
    c128:	200b883a 	mov	r5,r4
    c12c:	11000017 	ldw	r4,0(r2)
    c130:	000c2741 	jmpi	c274 <_malloc_r>

0000c134 <free>:
    c134:	00800074 	movhi	r2,1
    c138:	10b87504 	addi	r2,r2,-7724
    c13c:	200b883a 	mov	r5,r4
    c140:	11000017 	ldw	r4,0(r2)
    c144:	000c1901 	jmpi	c190 <_free_r>

0000c148 <memcpy>:
    c148:	2005883a 	mov	r2,r4
    c14c:	2007883a 	mov	r3,r4
    c150:	218d883a 	add	r6,r4,r6
    c154:	19800526 	beq	r3,r6,c16c <memcpy+0x24>
    c158:	29000003 	ldbu	r4,0(r5)
    c15c:	18c00044 	addi	r3,r3,1
    c160:	29400044 	addi	r5,r5,1
    c164:	193fffc5 	stb	r4,-1(r3)
    c168:	003ffa06 	br	c154 <_gp+0xffff5f88>
    c16c:	f800283a 	ret

0000c170 <memset>:
    c170:	2005883a 	mov	r2,r4
    c174:	2007883a 	mov	r3,r4
    c178:	218d883a 	add	r6,r4,r6
    c17c:	19800326 	beq	r3,r6,c18c <memset+0x1c>
    c180:	19400005 	stb	r5,0(r3)
    c184:	18c00044 	addi	r3,r3,1
    c188:	003ffc06 	br	c17c <_gp+0xffff5fb0>
    c18c:	f800283a 	ret

0000c190 <_free_r>:
    c190:	28003726 	beq	r5,zero,c270 <_free_r+0xe0>
    c194:	28ffff17 	ldw	r3,-4(r5)
    c198:	28bfff04 	addi	r2,r5,-4
    c19c:	1800010e 	bge	r3,zero,c1a4 <_free_r+0x14>
    c1a0:	10c5883a 	add	r2,r2,r3
    c1a4:	01400074 	movhi	r5,1
    c1a8:	29795304 	addi	r5,r5,-6836
    c1ac:	28c00017 	ldw	r3,0(r5)
    c1b0:	280d883a 	mov	r6,r5
    c1b4:	1800031e 	bne	r3,zero,c1c4 <_free_r+0x34>
    c1b8:	10000115 	stw	zero,4(r2)
    c1bc:	28800015 	stw	r2,0(r5)
    c1c0:	f800283a 	ret
    c1c4:	10c00c2e 	bgeu	r2,r3,c1f8 <_free_r+0x68>
    c1c8:	11000017 	ldw	r4,0(r2)
    c1cc:	110b883a 	add	r5,r2,r4
    c1d0:	1940041e 	bne	r3,r5,c1e4 <_free_r+0x54>
    c1d4:	19400017 	ldw	r5,0(r3)
    c1d8:	18c00117 	ldw	r3,4(r3)
    c1dc:	2909883a 	add	r4,r5,r4
    c1e0:	11000015 	stw	r4,0(r2)
    c1e4:	10c00115 	stw	r3,4(r2)
    c1e8:	30800015 	stw	r2,0(r6)
    c1ec:	f800283a 	ret
    c1f0:	11400336 	bltu	r2,r5,c200 <_free_r+0x70>
    c1f4:	2807883a 	mov	r3,r5
    c1f8:	19400117 	ldw	r5,4(r3)
    c1fc:	283ffc1e 	bne	r5,zero,c1f0 <_gp+0xffff6024>
    c200:	19c00017 	ldw	r7,0(r3)
    c204:	19cd883a 	add	r6,r3,r7
    c208:	30800a1e 	bne	r6,r2,c234 <_free_r+0xa4>
    c20c:	10800017 	ldw	r2,0(r2)
    c210:	3885883a 	add	r2,r7,r2
    c214:	18800015 	stw	r2,0(r3)
    c218:	1889883a 	add	r4,r3,r2
    c21c:	2900141e 	bne	r5,r4,c270 <_free_r+0xe0>
    c220:	29000017 	ldw	r4,0(r5)
    c224:	2085883a 	add	r2,r4,r2
    c228:	18800015 	stw	r2,0(r3)
    c22c:	28800117 	ldw	r2,4(r5)
    c230:	00000e06 	br	c26c <_free_r+0xdc>
    c234:	1180032e 	bgeu	r2,r6,c244 <_free_r+0xb4>
    c238:	00800304 	movi	r2,12
    c23c:	20800015 	stw	r2,0(r4)
    c240:	f800283a 	ret
    c244:	11000017 	ldw	r4,0(r2)
    c248:	110d883a 	add	r6,r2,r4
    c24c:	2980061e 	bne	r5,r6,c268 <_free_r+0xd8>
    c250:	29800017 	ldw	r6,0(r5)
    c254:	3109883a 	add	r4,r6,r4
    c258:	11000015 	stw	r4,0(r2)
    c25c:	29000117 	ldw	r4,4(r5)
    c260:	11000115 	stw	r4,4(r2)
    c264:	00000106 	br	c26c <_free_r+0xdc>
    c268:	11400115 	stw	r5,4(r2)
    c26c:	18800115 	stw	r2,4(r3)
    c270:	f800283a 	ret

0000c274 <_malloc_r>:
    c274:	defffb04 	addi	sp,sp,-20
    c278:	00bfff04 	movi	r2,-4
    c27c:	dc400115 	stw	r17,4(sp)
    c280:	2c4000c4 	addi	r17,r5,3
    c284:	88a2703a 	and	r17,r17,r2
    c288:	dc800215 	stw	r18,8(sp)
    c28c:	dfc00415 	stw	ra,16(sp)
    c290:	dcc00315 	stw	r19,12(sp)
    c294:	dc000015 	stw	r16,0(sp)
    c298:	8c400204 	addi	r17,r17,8
    c29c:	00800304 	movi	r2,12
    c2a0:	2025883a 	mov	r18,r4
    c2a4:	8880022e 	bgeu	r17,r2,c2b0 <_malloc_r+0x3c>
    c2a8:	1023883a 	mov	r17,r2
    c2ac:	00000506 	br	c2c4 <_malloc_r+0x50>
    c2b0:	8800040e 	bge	r17,zero,c2c4 <_malloc_r+0x50>
    c2b4:	00800304 	movi	r2,12
    c2b8:	90800015 	stw	r2,0(r18)
    c2bc:	0005883a 	mov	r2,zero
    c2c0:	00003b06 	br	c3b0 <_malloc_r+0x13c>
    c2c4:	897ffb36 	bltu	r17,r5,c2b4 <_gp+0xffff60e8>
    c2c8:	00800074 	movhi	r2,1
    c2cc:	10b95304 	addi	r2,r2,-6836
    c2d0:	10c00017 	ldw	r3,0(r2)
    c2d4:	1009883a 	mov	r4,r2
    c2d8:	1821883a 	mov	r16,r3
    c2dc:	80000926 	beq	r16,zero,c304 <_malloc_r+0x90>
    c2e0:	80800017 	ldw	r2,0(r16)
    c2e4:	1445c83a 	sub	r2,r2,r17
    c2e8:	10001516 	blt	r2,zero,c340 <_malloc_r+0xcc>
    c2ec:	014002c4 	movi	r5,11
    c2f0:	28800d2e 	bgeu	r5,r2,c328 <_malloc_r+0xb4>
    c2f4:	80800015 	stw	r2,0(r16)
    c2f8:	80a1883a 	add	r16,r16,r2
    c2fc:	84400015 	stw	r17,0(r16)
    c300:	8000221e 	bne	r16,zero,c38c <_malloc_r+0x118>
    c304:	04000074 	movhi	r16,1
    c308:	84395204 	addi	r16,r16,-6840
    c30c:	80800017 	ldw	r2,0(r16)
    c310:	10000e1e 	bne	r2,zero,c34c <_malloc_r+0xd8>
    c314:	000b883a 	mov	r5,zero
    c318:	9009883a 	mov	r4,r18
    c31c:	000c4540 	call	c454 <_sbrk_r>
    c320:	80800015 	stw	r2,0(r16)
    c324:	00000906 	br	c34c <_malloc_r+0xd8>
    c328:	80800117 	ldw	r2,4(r16)
    c32c:	1c00021e 	bne	r3,r16,c338 <_malloc_r+0xc4>
    c330:	20800015 	stw	r2,0(r4)
    c334:	00001506 	br	c38c <_malloc_r+0x118>
    c338:	18800115 	stw	r2,4(r3)
    c33c:	00001306 	br	c38c <_malloc_r+0x118>
    c340:	8007883a 	mov	r3,r16
    c344:	84000117 	ldw	r16,4(r16)
    c348:	003fe406 	br	c2dc <_gp+0xffff6110>
    c34c:	880b883a 	mov	r5,r17
    c350:	9009883a 	mov	r4,r18
    c354:	000c4540 	call	c454 <_sbrk_r>
    c358:	04ffffc4 	movi	r19,-1
    c35c:	14ffd526 	beq	r2,r19,c2b4 <_gp+0xffff60e8>
    c360:	140000c4 	addi	r16,r2,3
    c364:	00ffff04 	movi	r3,-4
    c368:	80e0703a 	and	r16,r16,r3
    c36c:	1400021e 	bne	r2,r16,c378 <_malloc_r+0x104>
    c370:	84400015 	stw	r17,0(r16)
    c374:	00000506 	br	c38c <_malloc_r+0x118>
    c378:	808bc83a 	sub	r5,r16,r2
    c37c:	9009883a 	mov	r4,r18
    c380:	000c4540 	call	c454 <_sbrk_r>
    c384:	14fffa1e 	bne	r2,r19,c370 <_gp+0xffff61a4>
    c388:	003fca06 	br	c2b4 <_gp+0xffff60e8>
    c38c:	810002c4 	addi	r4,r16,11
    c390:	00bffe04 	movi	r2,-8
    c394:	80c00104 	addi	r3,r16,4
    c398:	2084703a 	and	r2,r4,r2
    c39c:	10c7c83a 	sub	r3,r2,r3
    c3a0:	18000326 	beq	r3,zero,c3b0 <_malloc_r+0x13c>
    c3a4:	80e1883a 	add	r16,r16,r3
    c3a8:	00c7c83a 	sub	r3,zero,r3
    c3ac:	80c00015 	stw	r3,0(r16)
    c3b0:	dfc00417 	ldw	ra,16(sp)
    c3b4:	dcc00317 	ldw	r19,12(sp)
    c3b8:	dc800217 	ldw	r18,8(sp)
    c3bc:	dc400117 	ldw	r17,4(sp)
    c3c0:	dc000017 	ldw	r16,0(sp)
    c3c4:	dec00504 	addi	sp,sp,20
    c3c8:	f800283a 	ret

0000c3cc <_printf_r>:
    c3cc:	defffd04 	addi	sp,sp,-12
    c3d0:	dfc00015 	stw	ra,0(sp)
    c3d4:	d9800115 	stw	r6,4(sp)
    c3d8:	d9c00215 	stw	r7,8(sp)
    c3dc:	20c00217 	ldw	r3,8(r4)
    c3e0:	01800074 	movhi	r6,1
    c3e4:	31b48c04 	addi	r6,r6,-11728
    c3e8:	19800115 	stw	r6,4(r3)
    c3ec:	280d883a 	mov	r6,r5
    c3f0:	21400217 	ldw	r5,8(r4)
    c3f4:	d9c00104 	addi	r7,sp,4
    c3f8:	000cbf80 	call	cbf8 <___vfprintf_internal_r>
    c3fc:	dfc00017 	ldw	ra,0(sp)
    c400:	dec00304 	addi	sp,sp,12
    c404:	f800283a 	ret

0000c408 <printf>:
    c408:	defffc04 	addi	sp,sp,-16
    c40c:	dfc00015 	stw	ra,0(sp)
    c410:	d9400115 	stw	r5,4(sp)
    c414:	d9800215 	stw	r6,8(sp)
    c418:	d9c00315 	stw	r7,12(sp)
    c41c:	00800074 	movhi	r2,1
    c420:	10b87504 	addi	r2,r2,-7724
    c424:	10800017 	ldw	r2,0(r2)
    c428:	01400074 	movhi	r5,1
    c42c:	29748c04 	addi	r5,r5,-11728
    c430:	10c00217 	ldw	r3,8(r2)
    c434:	d9800104 	addi	r6,sp,4
    c438:	19400115 	stw	r5,4(r3)
    c43c:	200b883a 	mov	r5,r4
    c440:	11000217 	ldw	r4,8(r2)
    c444:	000d1240 	call	d124 <__vfprintf_internal>
    c448:	dfc00017 	ldw	ra,0(sp)
    c44c:	dec00404 	addi	sp,sp,16
    c450:	f800283a 	ret

0000c454 <_sbrk_r>:
    c454:	defffd04 	addi	sp,sp,-12
    c458:	dc000015 	stw	r16,0(sp)
    c45c:	04000074 	movhi	r16,1
    c460:	dc400115 	stw	r17,4(sp)
    c464:	84395404 	addi	r16,r16,-6832
    c468:	2023883a 	mov	r17,r4
    c46c:	2809883a 	mov	r4,r5
    c470:	dfc00215 	stw	ra,8(sp)
    c474:	80000015 	stw	zero,0(r16)
    c478:	000d5700 	call	d570 <sbrk>
    c47c:	00ffffc4 	movi	r3,-1
    c480:	10c0031e 	bne	r2,r3,c490 <_sbrk_r+0x3c>
    c484:	80c00017 	ldw	r3,0(r16)
    c488:	18000126 	beq	r3,zero,c490 <_sbrk_r+0x3c>
    c48c:	88c00015 	stw	r3,0(r17)
    c490:	dfc00217 	ldw	ra,8(sp)
    c494:	dc400117 	ldw	r17,4(sp)
    c498:	dc000017 	ldw	r16,0(sp)
    c49c:	dec00304 	addi	sp,sp,12
    c4a0:	f800283a 	ret

0000c4a4 <_sprintf_r>:
    c4a4:	defff704 	addi	sp,sp,-36
    c4a8:	dfc00715 	stw	ra,28(sp)
    c4ac:	d9c00815 	stw	r7,32(sp)
    c4b0:	00808204 	movi	r2,520
    c4b4:	d880000d 	sth	r2,0(sp)
    c4b8:	00a00034 	movhi	r2,32768
    c4bc:	10bfffc4 	addi	r2,r2,-1
    c4c0:	d8800515 	stw	r2,20(sp)
    c4c4:	d8800315 	stw	r2,12(sp)
    c4c8:	00bfffc4 	movi	r2,-1
    c4cc:	d880008d 	sth	r2,2(sp)
    c4d0:	00800074 	movhi	r2,1
    c4d4:	d9400415 	stw	r5,16(sp)
    c4d8:	d9400215 	stw	r5,8(sp)
    c4dc:	10b4ba04 	addi	r2,r2,-11544
    c4e0:	d9c00804 	addi	r7,sp,32
    c4e4:	d80b883a 	mov	r5,sp
    c4e8:	d8800115 	stw	r2,4(sp)
    c4ec:	d8000615 	stw	zero,24(sp)
    c4f0:	000c6440 	call	c644 <___svfprintf_internal_r>
    c4f4:	d8c00417 	ldw	r3,16(sp)
    c4f8:	18000005 	stb	zero,0(r3)
    c4fc:	dfc00717 	ldw	ra,28(sp)
    c500:	dec00904 	addi	sp,sp,36
    c504:	f800283a 	ret

0000c508 <sprintf>:
    c508:	defff604 	addi	sp,sp,-40
    c50c:	dfc00715 	stw	ra,28(sp)
    c510:	d9800815 	stw	r6,32(sp)
    c514:	d9c00915 	stw	r7,36(sp)
    c518:	00808204 	movi	r2,520
    c51c:	d880000d 	sth	r2,0(sp)
    c520:	00a00034 	movhi	r2,32768
    c524:	10bfffc4 	addi	r2,r2,-1
    c528:	d8800515 	stw	r2,20(sp)
    c52c:	d8800315 	stw	r2,12(sp)
    c530:	00bfffc4 	movi	r2,-1
    c534:	d880008d 	sth	r2,2(sp)
    c538:	00800074 	movhi	r2,1
    c53c:	10b4ba04 	addi	r2,r2,-11544
    c540:	d8800115 	stw	r2,4(sp)
    c544:	00800074 	movhi	r2,1
    c548:	10b87504 	addi	r2,r2,-7724
    c54c:	d9000415 	stw	r4,16(sp)
    c550:	d9000215 	stw	r4,8(sp)
    c554:	11000017 	ldw	r4,0(r2)
    c558:	280d883a 	mov	r6,r5
    c55c:	d9c00804 	addi	r7,sp,32
    c560:	d80b883a 	mov	r5,sp
    c564:	d8000615 	stw	zero,24(sp)
    c568:	000c6440 	call	c644 <___svfprintf_internal_r>
    c56c:	d8c00417 	ldw	r3,16(sp)
    c570:	18000005 	stb	zero,0(r3)
    c574:	dfc00717 	ldw	ra,28(sp)
    c578:	dec00a04 	addi	sp,sp,40
    c57c:	f800283a 	ret

0000c580 <strcasecmp>:
    c580:	00800074 	movhi	r2,1
    c584:	10b87304 	addi	r2,r2,-7732
    c588:	11c00017 	ldw	r7,0(r2)
    c58c:	02000044 	movi	r8,1
    c590:	20800003 	ldbu	r2,0(r4)
    c594:	3887883a 	add	r3,r7,r2
    c598:	18c00043 	ldbu	r3,1(r3)
    c59c:	18c000cc 	andi	r3,r3,3
    c5a0:	1a00011e 	bne	r3,r8,c5a8 <strcasecmp+0x28>
    c5a4:	10800804 	addi	r2,r2,32
    c5a8:	28c00003 	ldbu	r3,0(r5)
    c5ac:	38cd883a 	add	r6,r7,r3
    c5b0:	31800043 	ldbu	r6,1(r6)
    c5b4:	318000cc 	andi	r6,r6,3
    c5b8:	3200011e 	bne	r6,r8,c5c0 <strcasecmp+0x40>
    c5bc:	18c00804 	addi	r3,r3,32
    c5c0:	10c5c83a 	sub	r2,r2,r3
    c5c4:	1000031e 	bne	r2,zero,c5d4 <strcasecmp+0x54>
    c5c8:	21000044 	addi	r4,r4,1
    c5cc:	29400044 	addi	r5,r5,1
    c5d0:	183fef1e 	bne	r3,zero,c590 <_gp+0xffff63c4>
    c5d4:	f800283a 	ret

0000c5d8 <print_repeat>:
    c5d8:	defffb04 	addi	sp,sp,-20
    c5dc:	dc800315 	stw	r18,12(sp)
    c5e0:	dc400215 	stw	r17,8(sp)
    c5e4:	dc000115 	stw	r16,4(sp)
    c5e8:	dfc00415 	stw	ra,16(sp)
    c5ec:	2025883a 	mov	r18,r4
    c5f0:	2823883a 	mov	r17,r5
    c5f4:	d9800005 	stb	r6,0(sp)
    c5f8:	3821883a 	mov	r16,r7
    c5fc:	04000a0e 	bge	zero,r16,c628 <print_repeat+0x50>
    c600:	88800117 	ldw	r2,4(r17)
    c604:	01c00044 	movi	r7,1
    c608:	d80d883a 	mov	r6,sp
    c60c:	880b883a 	mov	r5,r17
    c610:	9009883a 	mov	r4,r18
    c614:	103ee83a 	callr	r2
    c618:	843fffc4 	addi	r16,r16,-1
    c61c:	103ff726 	beq	r2,zero,c5fc <_gp+0xffff6430>
    c620:	00bfffc4 	movi	r2,-1
    c624:	00000106 	br	c62c <print_repeat+0x54>
    c628:	0005883a 	mov	r2,zero
    c62c:	dfc00417 	ldw	ra,16(sp)
    c630:	dc800317 	ldw	r18,12(sp)
    c634:	dc400217 	ldw	r17,8(sp)
    c638:	dc000117 	ldw	r16,4(sp)
    c63c:	dec00504 	addi	sp,sp,20
    c640:	f800283a 	ret

0000c644 <___svfprintf_internal_r>:
    c644:	deffe504 	addi	sp,sp,-108
    c648:	d8c00804 	addi	r3,sp,32
    c64c:	ddc01815 	stw	r23,96(sp)
    c650:	dd801715 	stw	r22,92(sp)
    c654:	dd401615 	stw	r21,88(sp)
    c658:	dd001515 	stw	r20,84(sp)
    c65c:	dcc01415 	stw	r19,80(sp)
    c660:	dc801315 	stw	r18,76(sp)
    c664:	dc401215 	stw	r17,72(sp)
    c668:	dc001115 	stw	r16,68(sp)
    c66c:	dfc01a15 	stw	ra,104(sp)
    c670:	df001915 	stw	fp,100(sp)
    c674:	2029883a 	mov	r20,r4
    c678:	2823883a 	mov	r17,r5
    c67c:	382d883a 	mov	r22,r7
    c680:	d9800f15 	stw	r6,60(sp)
    c684:	0021883a 	mov	r16,zero
    c688:	d8000e15 	stw	zero,56(sp)
    c68c:	d8000a15 	stw	zero,40(sp)
    c690:	002b883a 	mov	r21,zero
    c694:	0027883a 	mov	r19,zero
    c698:	0025883a 	mov	r18,zero
    c69c:	d8000c15 	stw	zero,48(sp)
    c6a0:	d8000b15 	stw	zero,44(sp)
    c6a4:	002f883a 	mov	r23,zero
    c6a8:	d8c00915 	stw	r3,36(sp)
    c6ac:	d8c00f17 	ldw	r3,60(sp)
    c6b0:	19000003 	ldbu	r4,0(r3)
    c6b4:	20803fcc 	andi	r2,r4,255
    c6b8:	1080201c 	xori	r2,r2,128
    c6bc:	10bfe004 	addi	r2,r2,-128
    c6c0:	10011e26 	beq	r2,zero,cb3c <___svfprintf_internal_r+0x4f8>
    c6c4:	00c00044 	movi	r3,1
    c6c8:	b8c01426 	beq	r23,r3,c71c <___svfprintf_internal_r+0xd8>
    c6cc:	1dc00216 	blt	r3,r23,c6d8 <___svfprintf_internal_r+0x94>
    c6d0:	b8000626 	beq	r23,zero,c6ec <___svfprintf_internal_r+0xa8>
    c6d4:	00011506 	br	cb2c <___svfprintf_internal_r+0x4e8>
    c6d8:	01400084 	movi	r5,2
    c6dc:	b9401d26 	beq	r23,r5,c754 <___svfprintf_internal_r+0x110>
    c6e0:	014000c4 	movi	r5,3
    c6e4:	b9402b26 	beq	r23,r5,c794 <___svfprintf_internal_r+0x150>
    c6e8:	00011006 	br	cb2c <___svfprintf_internal_r+0x4e8>
    c6ec:	01400944 	movi	r5,37
    c6f0:	1140fc26 	beq	r2,r5,cae4 <___svfprintf_internal_r+0x4a0>
    c6f4:	88800117 	ldw	r2,4(r17)
    c6f8:	d9000005 	stb	r4,0(sp)
    c6fc:	01c00044 	movi	r7,1
    c700:	d80d883a 	mov	r6,sp
    c704:	880b883a 	mov	r5,r17
    c708:	a009883a 	mov	r4,r20
    c70c:	103ee83a 	callr	r2
    c710:	1000d81e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c714:	84000044 	addi	r16,r16,1
    c718:	00010406 	br	cb2c <___svfprintf_internal_r+0x4e8>
    c71c:	01400c04 	movi	r5,48
    c720:	1140fa26 	beq	r2,r5,cb0c <___svfprintf_internal_r+0x4c8>
    c724:	01400944 	movi	r5,37
    c728:	11400a1e 	bne	r2,r5,c754 <___svfprintf_internal_r+0x110>
    c72c:	d8800005 	stb	r2,0(sp)
    c730:	88800117 	ldw	r2,4(r17)
    c734:	b80f883a 	mov	r7,r23
    c738:	d80d883a 	mov	r6,sp
    c73c:	880b883a 	mov	r5,r17
    c740:	a009883a 	mov	r4,r20
    c744:	103ee83a 	callr	r2
    c748:	1000ca1e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c74c:	84000044 	addi	r16,r16,1
    c750:	0000f506 	br	cb28 <___svfprintf_internal_r+0x4e4>
    c754:	25fff404 	addi	r23,r4,-48
    c758:	bdc03fcc 	andi	r23,r23,255
    c75c:	00c00244 	movi	r3,9
    c760:	1dc00936 	bltu	r3,r23,c788 <___svfprintf_internal_r+0x144>
    c764:	00bfffc4 	movi	r2,-1
    c768:	90800426 	beq	r18,r2,c77c <___svfprintf_internal_r+0x138>
    c76c:	01400284 	movi	r5,10
    c770:	9009883a 	mov	r4,r18
    c774:	000ac100 	call	ac10 <__mulsi3>
    c778:	00000106 	br	c780 <___svfprintf_internal_r+0x13c>
    c77c:	0005883a 	mov	r2,zero
    c780:	b8a5883a 	add	r18,r23,r2
    c784:	0000e206 	br	cb10 <___svfprintf_internal_r+0x4cc>
    c788:	01400b84 	movi	r5,46
    c78c:	1140e426 	beq	r2,r5,cb20 <___svfprintf_internal_r+0x4dc>
    c790:	05c00084 	movi	r23,2
    c794:	213ff404 	addi	r4,r4,-48
    c798:	27003fcc 	andi	fp,r4,255
    c79c:	00c00244 	movi	r3,9
    c7a0:	1f000936 	bltu	r3,fp,c7c8 <___svfprintf_internal_r+0x184>
    c7a4:	00bfffc4 	movi	r2,-1
    c7a8:	98800426 	beq	r19,r2,c7bc <___svfprintf_internal_r+0x178>
    c7ac:	01400284 	movi	r5,10
    c7b0:	9809883a 	mov	r4,r19
    c7b4:	000ac100 	call	ac10 <__mulsi3>
    c7b8:	00000106 	br	c7c0 <___svfprintf_internal_r+0x17c>
    c7bc:	0005883a 	mov	r2,zero
    c7c0:	e0a7883a 	add	r19,fp,r2
    c7c4:	0000d906 	br	cb2c <___svfprintf_internal_r+0x4e8>
    c7c8:	00c01b04 	movi	r3,108
    c7cc:	10c0d226 	beq	r2,r3,cb18 <___svfprintf_internal_r+0x4d4>
    c7d0:	013fffc4 	movi	r4,-1
    c7d4:	99000226 	beq	r19,r4,c7e0 <___svfprintf_internal_r+0x19c>
    c7d8:	d8000b15 	stw	zero,44(sp)
    c7dc:	00000106 	br	c7e4 <___svfprintf_internal_r+0x1a0>
    c7e0:	04c00044 	movi	r19,1
    c7e4:	01001a44 	movi	r4,105
    c7e8:	11001626 	beq	r2,r4,c844 <___svfprintf_internal_r+0x200>
    c7ec:	20800916 	blt	r4,r2,c814 <___svfprintf_internal_r+0x1d0>
    c7f0:	010018c4 	movi	r4,99
    c7f4:	11008826 	beq	r2,r4,ca18 <___svfprintf_internal_r+0x3d4>
    c7f8:	01001904 	movi	r4,100
    c7fc:	11001126 	beq	r2,r4,c844 <___svfprintf_internal_r+0x200>
    c800:	01001604 	movi	r4,88
    c804:	1100c81e 	bne	r2,r4,cb28 <___svfprintf_internal_r+0x4e4>
    c808:	00c00044 	movi	r3,1
    c80c:	d8c00e15 	stw	r3,56(sp)
    c810:	00001506 	br	c868 <___svfprintf_internal_r+0x224>
    c814:	01001cc4 	movi	r4,115
    c818:	11009826 	beq	r2,r4,ca7c <___svfprintf_internal_r+0x438>
    c81c:	20800416 	blt	r4,r2,c830 <___svfprintf_internal_r+0x1ec>
    c820:	01001bc4 	movi	r4,111
    c824:	1100c01e 	bne	r2,r4,cb28 <___svfprintf_internal_r+0x4e4>
    c828:	05400204 	movi	r21,8
    c82c:	00000f06 	br	c86c <___svfprintf_internal_r+0x228>
    c830:	01001d44 	movi	r4,117
    c834:	11000d26 	beq	r2,r4,c86c <___svfprintf_internal_r+0x228>
    c838:	01001e04 	movi	r4,120
    c83c:	11000a26 	beq	r2,r4,c868 <___svfprintf_internal_r+0x224>
    c840:	0000b906 	br	cb28 <___svfprintf_internal_r+0x4e4>
    c844:	d8c00a17 	ldw	r3,40(sp)
    c848:	b7000104 	addi	fp,r22,4
    c84c:	18000726 	beq	r3,zero,c86c <___svfprintf_internal_r+0x228>
    c850:	df000d15 	stw	fp,52(sp)
    c854:	b5c00017 	ldw	r23,0(r22)
    c858:	b800080e 	bge	r23,zero,c87c <___svfprintf_internal_r+0x238>
    c85c:	05efc83a 	sub	r23,zero,r23
    c860:	02400044 	movi	r9,1
    c864:	00000606 	br	c880 <___svfprintf_internal_r+0x23c>
    c868:	05400404 	movi	r21,16
    c86c:	b0c00104 	addi	r3,r22,4
    c870:	d8c00d15 	stw	r3,52(sp)
    c874:	b5c00017 	ldw	r23,0(r22)
    c878:	d8000a15 	stw	zero,40(sp)
    c87c:	0013883a 	mov	r9,zero
    c880:	d839883a 	mov	fp,sp
    c884:	b8001726 	beq	r23,zero,c8e4 <___svfprintf_internal_r+0x2a0>
    c888:	a80b883a 	mov	r5,r21
    c88c:	b809883a 	mov	r4,r23
    c890:	da401015 	stw	r9,64(sp)
    c894:	000ab540 	call	ab54 <__udivsi3>
    c898:	a80b883a 	mov	r5,r21
    c89c:	1009883a 	mov	r4,r2
    c8a0:	102d883a 	mov	r22,r2
    c8a4:	000ac100 	call	ac10 <__mulsi3>
    c8a8:	b885c83a 	sub	r2,r23,r2
    c8ac:	00c00244 	movi	r3,9
    c8b0:	da401017 	ldw	r9,64(sp)
    c8b4:	18800216 	blt	r3,r2,c8c0 <___svfprintf_internal_r+0x27c>
    c8b8:	10800c04 	addi	r2,r2,48
    c8bc:	00000506 	br	c8d4 <___svfprintf_internal_r+0x290>
    c8c0:	d8c00e17 	ldw	r3,56(sp)
    c8c4:	18000226 	beq	r3,zero,c8d0 <___svfprintf_internal_r+0x28c>
    c8c8:	10800dc4 	addi	r2,r2,55
    c8cc:	00000106 	br	c8d4 <___svfprintf_internal_r+0x290>
    c8d0:	108015c4 	addi	r2,r2,87
    c8d4:	e0800005 	stb	r2,0(fp)
    c8d8:	b02f883a 	mov	r23,r22
    c8dc:	e7000044 	addi	fp,fp,1
    c8e0:	003fe806 	br	c884 <_gp+0xffff66b8>
    c8e4:	e6efc83a 	sub	r23,fp,sp
    c8e8:	9dc5c83a 	sub	r2,r19,r23
    c8ec:	0080090e 	bge	zero,r2,c914 <___svfprintf_internal_r+0x2d0>
    c8f0:	e085883a 	add	r2,fp,r2
    c8f4:	01400c04 	movi	r5,48
    c8f8:	d8c00917 	ldw	r3,36(sp)
    c8fc:	e009883a 	mov	r4,fp
    c900:	e0c0032e 	bgeu	fp,r3,c910 <___svfprintf_internal_r+0x2cc>
    c904:	e7000044 	addi	fp,fp,1
    c908:	21400005 	stb	r5,0(r4)
    c90c:	e0bffa1e 	bne	fp,r2,c8f8 <_gp+0xffff672c>
    c910:	e6efc83a 	sub	r23,fp,sp
    c914:	d8c00b17 	ldw	r3,44(sp)
    c918:	4dd1883a 	add	r8,r9,r23
    c91c:	922dc83a 	sub	r22,r18,r8
    c920:	18001626 	beq	r3,zero,c97c <___svfprintf_internal_r+0x338>
    c924:	48000a26 	beq	r9,zero,c950 <___svfprintf_internal_r+0x30c>
    c928:	00800b44 	movi	r2,45
    c92c:	d8800805 	stb	r2,32(sp)
    c930:	88800117 	ldw	r2,4(r17)
    c934:	01c00044 	movi	r7,1
    c938:	d9800804 	addi	r6,sp,32
    c93c:	880b883a 	mov	r5,r17
    c940:	a009883a 	mov	r4,r20
    c944:	103ee83a 	callr	r2
    c948:	10004a1e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c94c:	84000044 	addi	r16,r16,1
    c950:	0580070e 	bge	zero,r22,c970 <___svfprintf_internal_r+0x32c>
    c954:	b00f883a 	mov	r7,r22
    c958:	01800c04 	movi	r6,48
    c95c:	880b883a 	mov	r5,r17
    c960:	a009883a 	mov	r4,r20
    c964:	000c5d80 	call	c5d8 <print_repeat>
    c968:	1000421e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c96c:	85a1883a 	add	r16,r16,r22
    c970:	e02d883a 	mov	r22,fp
    c974:	bf2fc83a 	sub	r23,r23,fp
    c978:	00002006 	br	c9fc <___svfprintf_internal_r+0x3b8>
    c97c:	0580090e 	bge	zero,r22,c9a4 <___svfprintf_internal_r+0x360>
    c980:	b00f883a 	mov	r7,r22
    c984:	01800804 	movi	r6,32
    c988:	880b883a 	mov	r5,r17
    c98c:	a009883a 	mov	r4,r20
    c990:	da401015 	stw	r9,64(sp)
    c994:	000c5d80 	call	c5d8 <print_repeat>
    c998:	da401017 	ldw	r9,64(sp)
    c99c:	1000351e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c9a0:	85a1883a 	add	r16,r16,r22
    c9a4:	483ff226 	beq	r9,zero,c970 <_gp+0xffff67a4>
    c9a8:	00800b44 	movi	r2,45
    c9ac:	d8800805 	stb	r2,32(sp)
    c9b0:	88800117 	ldw	r2,4(r17)
    c9b4:	01c00044 	movi	r7,1
    c9b8:	d9800804 	addi	r6,sp,32
    c9bc:	880b883a 	mov	r5,r17
    c9c0:	a009883a 	mov	r4,r20
    c9c4:	103ee83a 	callr	r2
    c9c8:	10002a1e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c9cc:	84000044 	addi	r16,r16,1
    c9d0:	003fe706 	br	c970 <_gp+0xffff67a4>
    c9d4:	b5bfffc4 	addi	r22,r22,-1
    c9d8:	b0800003 	ldbu	r2,0(r22)
    c9dc:	01c00044 	movi	r7,1
    c9e0:	d9800804 	addi	r6,sp,32
    c9e4:	d8800805 	stb	r2,32(sp)
    c9e8:	88800117 	ldw	r2,4(r17)
    c9ec:	880b883a 	mov	r5,r17
    c9f0:	a009883a 	mov	r4,r20
    c9f4:	103ee83a 	callr	r2
    c9f8:	10001e1e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    c9fc:	8585c83a 	sub	r2,r16,r22
    ca00:	b5c9883a 	add	r4,r22,r23
    ca04:	e085883a 	add	r2,fp,r2
    ca08:	013ff216 	blt	zero,r4,c9d4 <_gp+0xffff6808>
    ca0c:	1021883a 	mov	r16,r2
    ca10:	dd800d17 	ldw	r22,52(sp)
    ca14:	00004406 	br	cb28 <___svfprintf_internal_r+0x4e4>
    ca18:	00800044 	movi	r2,1
    ca1c:	1480080e 	bge	r2,r18,ca40 <___svfprintf_internal_r+0x3fc>
    ca20:	95ffffc4 	addi	r23,r18,-1
    ca24:	b80f883a 	mov	r7,r23
    ca28:	01800804 	movi	r6,32
    ca2c:	880b883a 	mov	r5,r17
    ca30:	a009883a 	mov	r4,r20
    ca34:	000c5d80 	call	c5d8 <print_repeat>
    ca38:	10000e1e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    ca3c:	85e1883a 	add	r16,r16,r23
    ca40:	b0800017 	ldw	r2,0(r22)
    ca44:	01c00044 	movi	r7,1
    ca48:	d80d883a 	mov	r6,sp
    ca4c:	d8800005 	stb	r2,0(sp)
    ca50:	88800117 	ldw	r2,4(r17)
    ca54:	880b883a 	mov	r5,r17
    ca58:	a009883a 	mov	r4,r20
    ca5c:	b5c00104 	addi	r23,r22,4
    ca60:	103ee83a 	callr	r2
    ca64:	1000031e 	bne	r2,zero,ca74 <___svfprintf_internal_r+0x430>
    ca68:	84000044 	addi	r16,r16,1
    ca6c:	b82d883a 	mov	r22,r23
    ca70:	00002d06 	br	cb28 <___svfprintf_internal_r+0x4e4>
    ca74:	00bfffc4 	movi	r2,-1
    ca78:	00003106 	br	cb40 <___svfprintf_internal_r+0x4fc>
    ca7c:	b5c00017 	ldw	r23,0(r22)
    ca80:	b7000104 	addi	fp,r22,4
    ca84:	b809883a 	mov	r4,r23
    ca88:	000d3f00 	call	d3f0 <strlen>
    ca8c:	9091c83a 	sub	r8,r18,r2
    ca90:	102d883a 	mov	r22,r2
    ca94:	0200090e 	bge	zero,r8,cabc <___svfprintf_internal_r+0x478>
    ca98:	400f883a 	mov	r7,r8
    ca9c:	01800804 	movi	r6,32
    caa0:	880b883a 	mov	r5,r17
    caa4:	a009883a 	mov	r4,r20
    caa8:	da001015 	stw	r8,64(sp)
    caac:	000c5d80 	call	c5d8 <print_repeat>
    cab0:	da001017 	ldw	r8,64(sp)
    cab4:	103fef1e 	bne	r2,zero,ca74 <_gp+0xffff68a8>
    cab8:	8221883a 	add	r16,r16,r8
    cabc:	88800117 	ldw	r2,4(r17)
    cac0:	b00f883a 	mov	r7,r22
    cac4:	b80d883a 	mov	r6,r23
    cac8:	880b883a 	mov	r5,r17
    cacc:	a009883a 	mov	r4,r20
    cad0:	103ee83a 	callr	r2
    cad4:	103fe71e 	bne	r2,zero,ca74 <_gp+0xffff68a8>
    cad8:	85a1883a 	add	r16,r16,r22
    cadc:	e02d883a 	mov	r22,fp
    cae0:	00001106 	br	cb28 <___svfprintf_internal_r+0x4e4>
    cae4:	00c00044 	movi	r3,1
    cae8:	04ffffc4 	movi	r19,-1
    caec:	d8000e15 	stw	zero,56(sp)
    caf0:	d8c00a15 	stw	r3,40(sp)
    caf4:	05400284 	movi	r21,10
    caf8:	9825883a 	mov	r18,r19
    cafc:	d8000c15 	stw	zero,48(sp)
    cb00:	d8000b15 	stw	zero,44(sp)
    cb04:	182f883a 	mov	r23,r3
    cb08:	00000806 	br	cb2c <___svfprintf_internal_r+0x4e8>
    cb0c:	ddc00b15 	stw	r23,44(sp)
    cb10:	05c00084 	movi	r23,2
    cb14:	00000506 	br	cb2c <___svfprintf_internal_r+0x4e8>
    cb18:	00c00044 	movi	r3,1
    cb1c:	d8c00c15 	stw	r3,48(sp)
    cb20:	05c000c4 	movi	r23,3
    cb24:	00000106 	br	cb2c <___svfprintf_internal_r+0x4e8>
    cb28:	002f883a 	mov	r23,zero
    cb2c:	d8c00f17 	ldw	r3,60(sp)
    cb30:	18c00044 	addi	r3,r3,1
    cb34:	d8c00f15 	stw	r3,60(sp)
    cb38:	003edc06 	br	c6ac <_gp+0xffff64e0>
    cb3c:	8005883a 	mov	r2,r16
    cb40:	dfc01a17 	ldw	ra,104(sp)
    cb44:	df001917 	ldw	fp,100(sp)
    cb48:	ddc01817 	ldw	r23,96(sp)
    cb4c:	dd801717 	ldw	r22,92(sp)
    cb50:	dd401617 	ldw	r21,88(sp)
    cb54:	dd001517 	ldw	r20,84(sp)
    cb58:	dcc01417 	ldw	r19,80(sp)
    cb5c:	dc801317 	ldw	r18,76(sp)
    cb60:	dc401217 	ldw	r17,72(sp)
    cb64:	dc001117 	ldw	r16,68(sp)
    cb68:	dec01b04 	addi	sp,sp,108
    cb6c:	f800283a 	ret

0000cb70 <__vfprintf_internal_unused>:
    cb70:	00800074 	movhi	r2,1
    cb74:	10b87504 	addi	r2,r2,-7724
    cb78:	300f883a 	mov	r7,r6
    cb7c:	280d883a 	mov	r6,r5
    cb80:	200b883a 	mov	r5,r4
    cb84:	11000017 	ldw	r4,0(r2)
    cb88:	000c6441 	jmpi	c644 <___svfprintf_internal_r>

0000cb8c <print_repeat>:
    cb8c:	defffb04 	addi	sp,sp,-20
    cb90:	dc800315 	stw	r18,12(sp)
    cb94:	dc400215 	stw	r17,8(sp)
    cb98:	dc000115 	stw	r16,4(sp)
    cb9c:	dfc00415 	stw	ra,16(sp)
    cba0:	2025883a 	mov	r18,r4
    cba4:	2823883a 	mov	r17,r5
    cba8:	d9800005 	stb	r6,0(sp)
    cbac:	3821883a 	mov	r16,r7
    cbb0:	04000a0e 	bge	zero,r16,cbdc <print_repeat+0x50>
    cbb4:	88800117 	ldw	r2,4(r17)
    cbb8:	01c00044 	movi	r7,1
    cbbc:	d80d883a 	mov	r6,sp
    cbc0:	880b883a 	mov	r5,r17
    cbc4:	9009883a 	mov	r4,r18
    cbc8:	103ee83a 	callr	r2
    cbcc:	843fffc4 	addi	r16,r16,-1
    cbd0:	103ff726 	beq	r2,zero,cbb0 <_gp+0xffff69e4>
    cbd4:	00bfffc4 	movi	r2,-1
    cbd8:	00000106 	br	cbe0 <print_repeat+0x54>
    cbdc:	0005883a 	mov	r2,zero
    cbe0:	dfc00417 	ldw	ra,16(sp)
    cbe4:	dc800317 	ldw	r18,12(sp)
    cbe8:	dc400217 	ldw	r17,8(sp)
    cbec:	dc000117 	ldw	r16,4(sp)
    cbf0:	dec00504 	addi	sp,sp,20
    cbf4:	f800283a 	ret

0000cbf8 <___vfprintf_internal_r>:
    cbf8:	deffe504 	addi	sp,sp,-108
    cbfc:	d8c00804 	addi	r3,sp,32
    cc00:	ddc01815 	stw	r23,96(sp)
    cc04:	dd801715 	stw	r22,92(sp)
    cc08:	dd401615 	stw	r21,88(sp)
    cc0c:	dd001515 	stw	r20,84(sp)
    cc10:	dcc01415 	stw	r19,80(sp)
    cc14:	dc801315 	stw	r18,76(sp)
    cc18:	dc401215 	stw	r17,72(sp)
    cc1c:	dc001115 	stw	r16,68(sp)
    cc20:	dfc01a15 	stw	ra,104(sp)
    cc24:	df001915 	stw	fp,100(sp)
    cc28:	2029883a 	mov	r20,r4
    cc2c:	2823883a 	mov	r17,r5
    cc30:	382d883a 	mov	r22,r7
    cc34:	d9800f15 	stw	r6,60(sp)
    cc38:	0021883a 	mov	r16,zero
    cc3c:	d8000e15 	stw	zero,56(sp)
    cc40:	d8000a15 	stw	zero,40(sp)
    cc44:	002b883a 	mov	r21,zero
    cc48:	0027883a 	mov	r19,zero
    cc4c:	0025883a 	mov	r18,zero
    cc50:	d8000c15 	stw	zero,48(sp)
    cc54:	d8000b15 	stw	zero,44(sp)
    cc58:	002f883a 	mov	r23,zero
    cc5c:	d8c00915 	stw	r3,36(sp)
    cc60:	d8c00f17 	ldw	r3,60(sp)
    cc64:	19000003 	ldbu	r4,0(r3)
    cc68:	20803fcc 	andi	r2,r4,255
    cc6c:	1080201c 	xori	r2,r2,128
    cc70:	10bfe004 	addi	r2,r2,-128
    cc74:	10011e26 	beq	r2,zero,d0f0 <___vfprintf_internal_r+0x4f8>
    cc78:	00c00044 	movi	r3,1
    cc7c:	b8c01426 	beq	r23,r3,ccd0 <___vfprintf_internal_r+0xd8>
    cc80:	1dc00216 	blt	r3,r23,cc8c <___vfprintf_internal_r+0x94>
    cc84:	b8000626 	beq	r23,zero,cca0 <___vfprintf_internal_r+0xa8>
    cc88:	00011506 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    cc8c:	01400084 	movi	r5,2
    cc90:	b9401d26 	beq	r23,r5,cd08 <___vfprintf_internal_r+0x110>
    cc94:	014000c4 	movi	r5,3
    cc98:	b9402b26 	beq	r23,r5,cd48 <___vfprintf_internal_r+0x150>
    cc9c:	00011006 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    cca0:	01400944 	movi	r5,37
    cca4:	1140fc26 	beq	r2,r5,d098 <___vfprintf_internal_r+0x4a0>
    cca8:	88800117 	ldw	r2,4(r17)
    ccac:	d9000005 	stb	r4,0(sp)
    ccb0:	01c00044 	movi	r7,1
    ccb4:	d80d883a 	mov	r6,sp
    ccb8:	880b883a 	mov	r5,r17
    ccbc:	a009883a 	mov	r4,r20
    ccc0:	103ee83a 	callr	r2
    ccc4:	1000d81e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    ccc8:	84000044 	addi	r16,r16,1
    cccc:	00010406 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    ccd0:	01400c04 	movi	r5,48
    ccd4:	1140fa26 	beq	r2,r5,d0c0 <___vfprintf_internal_r+0x4c8>
    ccd8:	01400944 	movi	r5,37
    ccdc:	11400a1e 	bne	r2,r5,cd08 <___vfprintf_internal_r+0x110>
    cce0:	d8800005 	stb	r2,0(sp)
    cce4:	88800117 	ldw	r2,4(r17)
    cce8:	b80f883a 	mov	r7,r23
    ccec:	d80d883a 	mov	r6,sp
    ccf0:	880b883a 	mov	r5,r17
    ccf4:	a009883a 	mov	r4,r20
    ccf8:	103ee83a 	callr	r2
    ccfc:	1000ca1e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cd00:	84000044 	addi	r16,r16,1
    cd04:	0000f506 	br	d0dc <___vfprintf_internal_r+0x4e4>
    cd08:	25fff404 	addi	r23,r4,-48
    cd0c:	bdc03fcc 	andi	r23,r23,255
    cd10:	00c00244 	movi	r3,9
    cd14:	1dc00936 	bltu	r3,r23,cd3c <___vfprintf_internal_r+0x144>
    cd18:	00bfffc4 	movi	r2,-1
    cd1c:	90800426 	beq	r18,r2,cd30 <___vfprintf_internal_r+0x138>
    cd20:	01400284 	movi	r5,10
    cd24:	9009883a 	mov	r4,r18
    cd28:	000ac100 	call	ac10 <__mulsi3>
    cd2c:	00000106 	br	cd34 <___vfprintf_internal_r+0x13c>
    cd30:	0005883a 	mov	r2,zero
    cd34:	b8a5883a 	add	r18,r23,r2
    cd38:	0000e206 	br	d0c4 <___vfprintf_internal_r+0x4cc>
    cd3c:	01400b84 	movi	r5,46
    cd40:	1140e426 	beq	r2,r5,d0d4 <___vfprintf_internal_r+0x4dc>
    cd44:	05c00084 	movi	r23,2
    cd48:	213ff404 	addi	r4,r4,-48
    cd4c:	27003fcc 	andi	fp,r4,255
    cd50:	00c00244 	movi	r3,9
    cd54:	1f000936 	bltu	r3,fp,cd7c <___vfprintf_internal_r+0x184>
    cd58:	00bfffc4 	movi	r2,-1
    cd5c:	98800426 	beq	r19,r2,cd70 <___vfprintf_internal_r+0x178>
    cd60:	01400284 	movi	r5,10
    cd64:	9809883a 	mov	r4,r19
    cd68:	000ac100 	call	ac10 <__mulsi3>
    cd6c:	00000106 	br	cd74 <___vfprintf_internal_r+0x17c>
    cd70:	0005883a 	mov	r2,zero
    cd74:	e0a7883a 	add	r19,fp,r2
    cd78:	0000d906 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    cd7c:	00c01b04 	movi	r3,108
    cd80:	10c0d226 	beq	r2,r3,d0cc <___vfprintf_internal_r+0x4d4>
    cd84:	013fffc4 	movi	r4,-1
    cd88:	99000226 	beq	r19,r4,cd94 <___vfprintf_internal_r+0x19c>
    cd8c:	d8000b15 	stw	zero,44(sp)
    cd90:	00000106 	br	cd98 <___vfprintf_internal_r+0x1a0>
    cd94:	04c00044 	movi	r19,1
    cd98:	01001a44 	movi	r4,105
    cd9c:	11001626 	beq	r2,r4,cdf8 <___vfprintf_internal_r+0x200>
    cda0:	20800916 	blt	r4,r2,cdc8 <___vfprintf_internal_r+0x1d0>
    cda4:	010018c4 	movi	r4,99
    cda8:	11008826 	beq	r2,r4,cfcc <___vfprintf_internal_r+0x3d4>
    cdac:	01001904 	movi	r4,100
    cdb0:	11001126 	beq	r2,r4,cdf8 <___vfprintf_internal_r+0x200>
    cdb4:	01001604 	movi	r4,88
    cdb8:	1100c81e 	bne	r2,r4,d0dc <___vfprintf_internal_r+0x4e4>
    cdbc:	00c00044 	movi	r3,1
    cdc0:	d8c00e15 	stw	r3,56(sp)
    cdc4:	00001506 	br	ce1c <___vfprintf_internal_r+0x224>
    cdc8:	01001cc4 	movi	r4,115
    cdcc:	11009826 	beq	r2,r4,d030 <___vfprintf_internal_r+0x438>
    cdd0:	20800416 	blt	r4,r2,cde4 <___vfprintf_internal_r+0x1ec>
    cdd4:	01001bc4 	movi	r4,111
    cdd8:	1100c01e 	bne	r2,r4,d0dc <___vfprintf_internal_r+0x4e4>
    cddc:	05400204 	movi	r21,8
    cde0:	00000f06 	br	ce20 <___vfprintf_internal_r+0x228>
    cde4:	01001d44 	movi	r4,117
    cde8:	11000d26 	beq	r2,r4,ce20 <___vfprintf_internal_r+0x228>
    cdec:	01001e04 	movi	r4,120
    cdf0:	11000a26 	beq	r2,r4,ce1c <___vfprintf_internal_r+0x224>
    cdf4:	0000b906 	br	d0dc <___vfprintf_internal_r+0x4e4>
    cdf8:	d8c00a17 	ldw	r3,40(sp)
    cdfc:	b7000104 	addi	fp,r22,4
    ce00:	18000726 	beq	r3,zero,ce20 <___vfprintf_internal_r+0x228>
    ce04:	df000d15 	stw	fp,52(sp)
    ce08:	b5c00017 	ldw	r23,0(r22)
    ce0c:	b800080e 	bge	r23,zero,ce30 <___vfprintf_internal_r+0x238>
    ce10:	05efc83a 	sub	r23,zero,r23
    ce14:	02400044 	movi	r9,1
    ce18:	00000606 	br	ce34 <___vfprintf_internal_r+0x23c>
    ce1c:	05400404 	movi	r21,16
    ce20:	b0c00104 	addi	r3,r22,4
    ce24:	d8c00d15 	stw	r3,52(sp)
    ce28:	b5c00017 	ldw	r23,0(r22)
    ce2c:	d8000a15 	stw	zero,40(sp)
    ce30:	0013883a 	mov	r9,zero
    ce34:	d839883a 	mov	fp,sp
    ce38:	b8001726 	beq	r23,zero,ce98 <___vfprintf_internal_r+0x2a0>
    ce3c:	a80b883a 	mov	r5,r21
    ce40:	b809883a 	mov	r4,r23
    ce44:	da401015 	stw	r9,64(sp)
    ce48:	000ab540 	call	ab54 <__udivsi3>
    ce4c:	a80b883a 	mov	r5,r21
    ce50:	1009883a 	mov	r4,r2
    ce54:	102d883a 	mov	r22,r2
    ce58:	000ac100 	call	ac10 <__mulsi3>
    ce5c:	b885c83a 	sub	r2,r23,r2
    ce60:	00c00244 	movi	r3,9
    ce64:	da401017 	ldw	r9,64(sp)
    ce68:	18800216 	blt	r3,r2,ce74 <___vfprintf_internal_r+0x27c>
    ce6c:	10800c04 	addi	r2,r2,48
    ce70:	00000506 	br	ce88 <___vfprintf_internal_r+0x290>
    ce74:	d8c00e17 	ldw	r3,56(sp)
    ce78:	18000226 	beq	r3,zero,ce84 <___vfprintf_internal_r+0x28c>
    ce7c:	10800dc4 	addi	r2,r2,55
    ce80:	00000106 	br	ce88 <___vfprintf_internal_r+0x290>
    ce84:	108015c4 	addi	r2,r2,87
    ce88:	e0800005 	stb	r2,0(fp)
    ce8c:	b02f883a 	mov	r23,r22
    ce90:	e7000044 	addi	fp,fp,1
    ce94:	003fe806 	br	ce38 <_gp+0xffff6c6c>
    ce98:	e6efc83a 	sub	r23,fp,sp
    ce9c:	9dc5c83a 	sub	r2,r19,r23
    cea0:	0080090e 	bge	zero,r2,cec8 <___vfprintf_internal_r+0x2d0>
    cea4:	e085883a 	add	r2,fp,r2
    cea8:	01400c04 	movi	r5,48
    ceac:	d8c00917 	ldw	r3,36(sp)
    ceb0:	e009883a 	mov	r4,fp
    ceb4:	e0c0032e 	bgeu	fp,r3,cec4 <___vfprintf_internal_r+0x2cc>
    ceb8:	e7000044 	addi	fp,fp,1
    cebc:	21400005 	stb	r5,0(r4)
    cec0:	e0bffa1e 	bne	fp,r2,ceac <_gp+0xffff6ce0>
    cec4:	e6efc83a 	sub	r23,fp,sp
    cec8:	d8c00b17 	ldw	r3,44(sp)
    cecc:	4dd1883a 	add	r8,r9,r23
    ced0:	922dc83a 	sub	r22,r18,r8
    ced4:	18001626 	beq	r3,zero,cf30 <___vfprintf_internal_r+0x338>
    ced8:	48000a26 	beq	r9,zero,cf04 <___vfprintf_internal_r+0x30c>
    cedc:	00800b44 	movi	r2,45
    cee0:	d8800805 	stb	r2,32(sp)
    cee4:	88800117 	ldw	r2,4(r17)
    cee8:	01c00044 	movi	r7,1
    ceec:	d9800804 	addi	r6,sp,32
    cef0:	880b883a 	mov	r5,r17
    cef4:	a009883a 	mov	r4,r20
    cef8:	103ee83a 	callr	r2
    cefc:	10004a1e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cf00:	84000044 	addi	r16,r16,1
    cf04:	0580070e 	bge	zero,r22,cf24 <___vfprintf_internal_r+0x32c>
    cf08:	b00f883a 	mov	r7,r22
    cf0c:	01800c04 	movi	r6,48
    cf10:	880b883a 	mov	r5,r17
    cf14:	a009883a 	mov	r4,r20
    cf18:	000cb8c0 	call	cb8c <print_repeat>
    cf1c:	1000421e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cf20:	85a1883a 	add	r16,r16,r22
    cf24:	e02d883a 	mov	r22,fp
    cf28:	bf2fc83a 	sub	r23,r23,fp
    cf2c:	00002006 	br	cfb0 <___vfprintf_internal_r+0x3b8>
    cf30:	0580090e 	bge	zero,r22,cf58 <___vfprintf_internal_r+0x360>
    cf34:	b00f883a 	mov	r7,r22
    cf38:	01800804 	movi	r6,32
    cf3c:	880b883a 	mov	r5,r17
    cf40:	a009883a 	mov	r4,r20
    cf44:	da401015 	stw	r9,64(sp)
    cf48:	000cb8c0 	call	cb8c <print_repeat>
    cf4c:	da401017 	ldw	r9,64(sp)
    cf50:	1000351e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cf54:	85a1883a 	add	r16,r16,r22
    cf58:	483ff226 	beq	r9,zero,cf24 <_gp+0xffff6d58>
    cf5c:	00800b44 	movi	r2,45
    cf60:	d8800805 	stb	r2,32(sp)
    cf64:	88800117 	ldw	r2,4(r17)
    cf68:	01c00044 	movi	r7,1
    cf6c:	d9800804 	addi	r6,sp,32
    cf70:	880b883a 	mov	r5,r17
    cf74:	a009883a 	mov	r4,r20
    cf78:	103ee83a 	callr	r2
    cf7c:	10002a1e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cf80:	84000044 	addi	r16,r16,1
    cf84:	003fe706 	br	cf24 <_gp+0xffff6d58>
    cf88:	b5bfffc4 	addi	r22,r22,-1
    cf8c:	b0800003 	ldbu	r2,0(r22)
    cf90:	01c00044 	movi	r7,1
    cf94:	d9800804 	addi	r6,sp,32
    cf98:	d8800805 	stb	r2,32(sp)
    cf9c:	88800117 	ldw	r2,4(r17)
    cfa0:	880b883a 	mov	r5,r17
    cfa4:	a009883a 	mov	r4,r20
    cfa8:	103ee83a 	callr	r2
    cfac:	10001e1e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cfb0:	8585c83a 	sub	r2,r16,r22
    cfb4:	b5c9883a 	add	r4,r22,r23
    cfb8:	e085883a 	add	r2,fp,r2
    cfbc:	013ff216 	blt	zero,r4,cf88 <_gp+0xffff6dbc>
    cfc0:	1021883a 	mov	r16,r2
    cfc4:	dd800d17 	ldw	r22,52(sp)
    cfc8:	00004406 	br	d0dc <___vfprintf_internal_r+0x4e4>
    cfcc:	00800044 	movi	r2,1
    cfd0:	1480080e 	bge	r2,r18,cff4 <___vfprintf_internal_r+0x3fc>
    cfd4:	95ffffc4 	addi	r23,r18,-1
    cfd8:	b80f883a 	mov	r7,r23
    cfdc:	01800804 	movi	r6,32
    cfe0:	880b883a 	mov	r5,r17
    cfe4:	a009883a 	mov	r4,r20
    cfe8:	000cb8c0 	call	cb8c <print_repeat>
    cfec:	10000e1e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    cff0:	85e1883a 	add	r16,r16,r23
    cff4:	b0800017 	ldw	r2,0(r22)
    cff8:	01c00044 	movi	r7,1
    cffc:	d80d883a 	mov	r6,sp
    d000:	d8800005 	stb	r2,0(sp)
    d004:	88800117 	ldw	r2,4(r17)
    d008:	880b883a 	mov	r5,r17
    d00c:	a009883a 	mov	r4,r20
    d010:	b5c00104 	addi	r23,r22,4
    d014:	103ee83a 	callr	r2
    d018:	1000031e 	bne	r2,zero,d028 <___vfprintf_internal_r+0x430>
    d01c:	84000044 	addi	r16,r16,1
    d020:	b82d883a 	mov	r22,r23
    d024:	00002d06 	br	d0dc <___vfprintf_internal_r+0x4e4>
    d028:	00bfffc4 	movi	r2,-1
    d02c:	00003106 	br	d0f4 <___vfprintf_internal_r+0x4fc>
    d030:	b5c00017 	ldw	r23,0(r22)
    d034:	b7000104 	addi	fp,r22,4
    d038:	b809883a 	mov	r4,r23
    d03c:	000d3f00 	call	d3f0 <strlen>
    d040:	9091c83a 	sub	r8,r18,r2
    d044:	102d883a 	mov	r22,r2
    d048:	0200090e 	bge	zero,r8,d070 <___vfprintf_internal_r+0x478>
    d04c:	400f883a 	mov	r7,r8
    d050:	01800804 	movi	r6,32
    d054:	880b883a 	mov	r5,r17
    d058:	a009883a 	mov	r4,r20
    d05c:	da001015 	stw	r8,64(sp)
    d060:	000cb8c0 	call	cb8c <print_repeat>
    d064:	da001017 	ldw	r8,64(sp)
    d068:	103fef1e 	bne	r2,zero,d028 <_gp+0xffff6e5c>
    d06c:	8221883a 	add	r16,r16,r8
    d070:	88800117 	ldw	r2,4(r17)
    d074:	b00f883a 	mov	r7,r22
    d078:	b80d883a 	mov	r6,r23
    d07c:	880b883a 	mov	r5,r17
    d080:	a009883a 	mov	r4,r20
    d084:	103ee83a 	callr	r2
    d088:	103fe71e 	bne	r2,zero,d028 <_gp+0xffff6e5c>
    d08c:	85a1883a 	add	r16,r16,r22
    d090:	e02d883a 	mov	r22,fp
    d094:	00001106 	br	d0dc <___vfprintf_internal_r+0x4e4>
    d098:	00c00044 	movi	r3,1
    d09c:	04ffffc4 	movi	r19,-1
    d0a0:	d8000e15 	stw	zero,56(sp)
    d0a4:	d8c00a15 	stw	r3,40(sp)
    d0a8:	05400284 	movi	r21,10
    d0ac:	9825883a 	mov	r18,r19
    d0b0:	d8000c15 	stw	zero,48(sp)
    d0b4:	d8000b15 	stw	zero,44(sp)
    d0b8:	182f883a 	mov	r23,r3
    d0bc:	00000806 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    d0c0:	ddc00b15 	stw	r23,44(sp)
    d0c4:	05c00084 	movi	r23,2
    d0c8:	00000506 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    d0cc:	00c00044 	movi	r3,1
    d0d0:	d8c00c15 	stw	r3,48(sp)
    d0d4:	05c000c4 	movi	r23,3
    d0d8:	00000106 	br	d0e0 <___vfprintf_internal_r+0x4e8>
    d0dc:	002f883a 	mov	r23,zero
    d0e0:	d8c00f17 	ldw	r3,60(sp)
    d0e4:	18c00044 	addi	r3,r3,1
    d0e8:	d8c00f15 	stw	r3,60(sp)
    d0ec:	003edc06 	br	cc60 <_gp+0xffff6a94>
    d0f0:	8005883a 	mov	r2,r16
    d0f4:	dfc01a17 	ldw	ra,104(sp)
    d0f8:	df001917 	ldw	fp,100(sp)
    d0fc:	ddc01817 	ldw	r23,96(sp)
    d100:	dd801717 	ldw	r22,92(sp)
    d104:	dd401617 	ldw	r21,88(sp)
    d108:	dd001517 	ldw	r20,84(sp)
    d10c:	dcc01417 	ldw	r19,80(sp)
    d110:	dc801317 	ldw	r18,76(sp)
    d114:	dc401217 	ldw	r17,72(sp)
    d118:	dc001117 	ldw	r16,68(sp)
    d11c:	dec01b04 	addi	sp,sp,108
    d120:	f800283a 	ret

0000d124 <__vfprintf_internal>:
    d124:	00800074 	movhi	r2,1
    d128:	10b87504 	addi	r2,r2,-7724
    d12c:	300f883a 	mov	r7,r6
    d130:	280d883a 	mov	r6,r5
    d134:	200b883a 	mov	r5,r4
    d138:	11000017 	ldw	r4,0(r2)
    d13c:	000cbf81 	jmpi	cbf8 <___vfprintf_internal_r>

0000d140 <_vsnprintf_r>:
    d140:	3000040e 	bge	r6,zero,d154 <_vsnprintf_r+0x14>
    d144:	008022c4 	movi	r2,139
    d148:	20800015 	stw	r2,0(r4)
    d14c:	00bfffc4 	movi	r2,-1
    d150:	f800283a 	ret
    d154:	defff604 	addi	sp,sp,-40
    d158:	00c08204 	movi	r3,520
    d15c:	dfc00915 	stw	ra,36(sp)
    d160:	dc400815 	stw	r17,32(sp)
    d164:	dc000715 	stw	r16,28(sp)
    d168:	d8c0000d 	sth	r3,0(sp)
    d16c:	d9400415 	stw	r5,16(sp)
    d170:	d9400215 	stw	r5,8(sp)
    d174:	3005883a 	mov	r2,r6
    d178:	30000226 	beq	r6,zero,d184 <_vsnprintf_r+0x44>
    d17c:	30ffffc4 	addi	r3,r6,-1
    d180:	00000106 	br	d188 <_vsnprintf_r+0x48>
    d184:	0007883a 	mov	r3,zero
    d188:	1021883a 	mov	r16,r2
    d18c:	00bfffc4 	movi	r2,-1
    d190:	d880008d 	sth	r2,2(sp)
    d194:	00800074 	movhi	r2,1
    d198:	10b4ba04 	addi	r2,r2,-11544
    d19c:	d8800115 	stw	r2,4(sp)
    d1a0:	00800074 	movhi	r2,1
    d1a4:	10b87504 	addi	r2,r2,-7724
    d1a8:	380d883a 	mov	r6,r7
    d1ac:	2023883a 	mov	r17,r4
    d1b0:	d9c00a17 	ldw	r7,40(sp)
    d1b4:	11000017 	ldw	r4,0(r2)
    d1b8:	d80b883a 	mov	r5,sp
    d1bc:	d8c00515 	stw	r3,20(sp)
    d1c0:	d8c00315 	stw	r3,12(sp)
    d1c4:	d8000615 	stw	zero,24(sp)
    d1c8:	000c6440 	call	c644 <___svfprintf_internal_r>
    d1cc:	00ffffc4 	movi	r3,-1
    d1d0:	10c0020e 	bge	r2,r3,d1dc <_vsnprintf_r+0x9c>
    d1d4:	00c022c4 	movi	r3,139
    d1d8:	88c00015 	stw	r3,0(r17)
    d1dc:	80000226 	beq	r16,zero,d1e8 <_vsnprintf_r+0xa8>
    d1e0:	d8c00417 	ldw	r3,16(sp)
    d1e4:	18000005 	stb	zero,0(r3)
    d1e8:	dfc00917 	ldw	ra,36(sp)
    d1ec:	dc400817 	ldw	r17,32(sp)
    d1f0:	dc000717 	ldw	r16,28(sp)
    d1f4:	dec00a04 	addi	sp,sp,40
    d1f8:	f800283a 	ret

0000d1fc <vsnprintf>:
    d1fc:	defffe04 	addi	sp,sp,-8
    d200:	00800074 	movhi	r2,1
    d204:	d9c00015 	stw	r7,0(sp)
    d208:	10b87504 	addi	r2,r2,-7724
    d20c:	300f883a 	mov	r7,r6
    d210:	280d883a 	mov	r6,r5
    d214:	200b883a 	mov	r5,r4
    d218:	11000017 	ldw	r4,0(r2)
    d21c:	dfc00115 	stw	ra,4(sp)
    d220:	000d1400 	call	d140 <_vsnprintf_r>
    d224:	dfc00117 	ldw	ra,4(sp)
    d228:	dec00204 	addi	sp,sp,8
    d22c:	f800283a 	ret

0000d230 <__sfvwrite_small_dev>:
    d230:	2880000b 	ldhu	r2,0(r5)
    d234:	1080020c 	andi	r2,r2,8
    d238:	10002126 	beq	r2,zero,d2c0 <__sfvwrite_small_dev+0x90>
    d23c:	2880008f 	ldh	r2,2(r5)
    d240:	defffa04 	addi	sp,sp,-24
    d244:	dc000015 	stw	r16,0(sp)
    d248:	dfc00515 	stw	ra,20(sp)
    d24c:	dd000415 	stw	r20,16(sp)
    d250:	dcc00315 	stw	r19,12(sp)
    d254:	dc800215 	stw	r18,8(sp)
    d258:	dc400115 	stw	r17,4(sp)
    d25c:	2821883a 	mov	r16,r5
    d260:	10001216 	blt	r2,zero,d2ac <__sfvwrite_small_dev+0x7c>
    d264:	2027883a 	mov	r19,r4
    d268:	3025883a 	mov	r18,r6
    d26c:	3823883a 	mov	r17,r7
    d270:	05010004 	movi	r20,1024
    d274:	04400b0e 	bge	zero,r17,d2a4 <__sfvwrite_small_dev+0x74>
    d278:	880f883a 	mov	r7,r17
    d27c:	a440010e 	bge	r20,r17,d284 <__sfvwrite_small_dev+0x54>
    d280:	01c10004 	movi	r7,1024
    d284:	8140008f 	ldh	r5,2(r16)
    d288:	900d883a 	mov	r6,r18
    d28c:	9809883a 	mov	r4,r19
    d290:	000d40c0 	call	d40c <_write_r>
    d294:	0080050e 	bge	zero,r2,d2ac <__sfvwrite_small_dev+0x7c>
    d298:	88a3c83a 	sub	r17,r17,r2
    d29c:	90a5883a 	add	r18,r18,r2
    d2a0:	003ff406 	br	d274 <_gp+0xffff70a8>
    d2a4:	0005883a 	mov	r2,zero
    d2a8:	00000706 	br	d2c8 <__sfvwrite_small_dev+0x98>
    d2ac:	8080000b 	ldhu	r2,0(r16)
    d2b0:	10801014 	ori	r2,r2,64
    d2b4:	8080000d 	sth	r2,0(r16)
    d2b8:	00bfffc4 	movi	r2,-1
    d2bc:	00000206 	br	d2c8 <__sfvwrite_small_dev+0x98>
    d2c0:	00bfffc4 	movi	r2,-1
    d2c4:	f800283a 	ret
    d2c8:	dfc00517 	ldw	ra,20(sp)
    d2cc:	dd000417 	ldw	r20,16(sp)
    d2d0:	dcc00317 	ldw	r19,12(sp)
    d2d4:	dc800217 	ldw	r18,8(sp)
    d2d8:	dc400117 	ldw	r17,4(sp)
    d2dc:	dc000017 	ldw	r16,0(sp)
    d2e0:	dec00604 	addi	sp,sp,24
    d2e4:	f800283a 	ret

0000d2e8 <__sfvwrite_small_str>:
    d2e8:	2880000b 	ldhu	r2,0(r5)
    d2ec:	10c0020c 	andi	r3,r2,8
    d2f0:	18002026 	beq	r3,zero,d374 <__sfvwrite_small_str+0x8c>
    d2f4:	28c0008f 	ldh	r3,2(r5)
    d2f8:	defffd04 	addi	sp,sp,-12
    d2fc:	dc000015 	stw	r16,0(sp)
    d300:	dfc00215 	stw	ra,8(sp)
    d304:	dc400115 	stw	r17,4(sp)
    d308:	2821883a 	mov	r16,r5
    d30c:	1800150e 	bge	r3,zero,d364 <__sfvwrite_small_str+0x7c>
    d310:	10c0800c 	andi	r3,r2,512
    d314:	18001326 	beq	r3,zero,d364 <__sfvwrite_small_str+0x7c>
    d318:	2c400517 	ldw	r17,20(r5)
    d31c:	89c0030e 	bge	r17,r7,d32c <__sfvwrite_small_str+0x44>
    d320:	10c0200c 	andi	r3,r2,128
    d324:	18000326 	beq	r3,zero,d334 <__sfvwrite_small_str+0x4c>
    d328:	00000e06 	br	d364 <__sfvwrite_small_str+0x7c>
    d32c:	3c40010e 	bge	r7,r17,d334 <__sfvwrite_small_str+0x4c>
    d330:	3823883a 	mov	r17,r7
    d334:	81000417 	ldw	r4,16(r16)
    d338:	300b883a 	mov	r5,r6
    d33c:	880d883a 	mov	r6,r17
    d340:	000d3900 	call	d390 <memmove>
    d344:	80800517 	ldw	r2,20(r16)
    d348:	1445c83a 	sub	r2,r2,r17
    d34c:	80800515 	stw	r2,20(r16)
    d350:	80800417 	ldw	r2,16(r16)
    d354:	1463883a 	add	r17,r2,r17
    d358:	84400415 	stw	r17,16(r16)
    d35c:	0005883a 	mov	r2,zero
    d360:	00000606 	br	d37c <__sfvwrite_small_str+0x94>
    d364:	10801014 	ori	r2,r2,64
    d368:	8080000d 	sth	r2,0(r16)
    d36c:	00bfffc4 	movi	r2,-1
    d370:	00000206 	br	d37c <__sfvwrite_small_str+0x94>
    d374:	00bfffc4 	movi	r2,-1
    d378:	f800283a 	ret
    d37c:	dfc00217 	ldw	ra,8(sp)
    d380:	dc400117 	ldw	r17,4(sp)
    d384:	dc000017 	ldw	r16,0(sp)
    d388:	dec00304 	addi	sp,sp,12
    d38c:	f800283a 	ret

0000d390 <memmove>:
    d390:	2005883a 	mov	r2,r4
    d394:	218f883a 	add	r7,r4,r6
    d398:	29000236 	bltu	r5,r4,d3a4 <memmove+0x14>
    d39c:	1007883a 	mov	r3,r2
    d3a0:	00000c06 	br	d3d4 <memmove+0x44>
    d3a4:	2987883a 	add	r3,r5,r6
    d3a8:	20fffc2e 	bgeu	r4,r3,d39c <_gp+0xffff71d0>
    d3ac:	380b883a 	mov	r5,r7
    d3b0:	30cdc83a 	sub	r6,r6,r3
    d3b4:	1989883a 	add	r4,r3,r6
    d3b8:	20000526 	beq	r4,zero,d3d0 <memmove+0x40>
    d3bc:	18ffffc4 	addi	r3,r3,-1
    d3c0:	19000003 	ldbu	r4,0(r3)
    d3c4:	297fffc4 	addi	r5,r5,-1
    d3c8:	29000005 	stb	r4,0(r5)
    d3cc:	003ff906 	br	d3b4 <_gp+0xffff71e8>
    d3d0:	f800283a 	ret
    d3d4:	19c00526 	beq	r3,r7,d3ec <memmove+0x5c>
    d3d8:	29000003 	ldbu	r4,0(r5)
    d3dc:	18c00044 	addi	r3,r3,1
    d3e0:	29400044 	addi	r5,r5,1
    d3e4:	193fffc5 	stb	r4,-1(r3)
    d3e8:	003ffa06 	br	d3d4 <_gp+0xffff7208>
    d3ec:	f800283a 	ret

0000d3f0 <strlen>:
    d3f0:	2005883a 	mov	r2,r4
    d3f4:	10c00007 	ldb	r3,0(r2)
    d3f8:	18000226 	beq	r3,zero,d404 <strlen+0x14>
    d3fc:	10800044 	addi	r2,r2,1
    d400:	003ffc06 	br	d3f4 <_gp+0xffff7228>
    d404:	1105c83a 	sub	r2,r2,r4
    d408:	f800283a 	ret

0000d40c <_write_r>:
    d40c:	defffd04 	addi	sp,sp,-12
    d410:	dc000015 	stw	r16,0(sp)
    d414:	04000074 	movhi	r16,1
    d418:	dc400115 	stw	r17,4(sp)
    d41c:	84395404 	addi	r16,r16,-6832
    d420:	2023883a 	mov	r17,r4
    d424:	2809883a 	mov	r4,r5
    d428:	300b883a 	mov	r5,r6
    d42c:	380d883a 	mov	r6,r7
    d430:	dfc00215 	stw	ra,8(sp)
    d434:	80000015 	stw	zero,0(r16)
    d438:	000d6ac0 	call	d6ac <write>
    d43c:	00ffffc4 	movi	r3,-1
    d440:	10c0031e 	bne	r2,r3,d450 <_write_r+0x44>
    d444:	80c00017 	ldw	r3,0(r16)
    d448:	18000126 	beq	r3,zero,d450 <_write_r+0x44>
    d44c:	88c00015 	stw	r3,0(r17)
    d450:	dfc00217 	ldw	ra,8(sp)
    d454:	dc400117 	ldw	r17,4(sp)
    d458:	dc000017 	ldw	r16,0(sp)
    d45c:	dec00304 	addi	sp,sp,12
    d460:	f800283a 	ret

0000d464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d464:	deffff04 	addi	sp,sp,-4
    d468:	01000074 	movhi	r4,1
    d46c:	01400074 	movhi	r5,1
    d470:	dfc00015 	stw	ra,0(sp)
    d474:	2137a904 	addi	r4,r4,-8540
    d478:	29787b04 	addi	r5,r5,-7700

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    d47c:	2140061e 	bne	r4,r5,d498 <alt_load+0x34>
    d480:	01000074 	movhi	r4,1
    d484:	01400074 	movhi	r5,1
    d488:	21200804 	addi	r4,r4,-32736
    d48c:	29600804 	addi	r5,r5,-32736
    d490:	2140121e 	bne	r4,r5,d4dc <alt_load+0x78>
    d494:	00000b06 	br	d4c4 <alt_load+0x60>
    d498:	00c00074 	movhi	r3,1
    d49c:	18f87b04 	addi	r3,r3,-7700
    d4a0:	1907c83a 	sub	r3,r3,r4
    d4a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    d4a8:	10fff526 	beq	r2,r3,d480 <_gp+0xffff72b4>
    {
      *to++ = *from++;
    d4ac:	114f883a 	add	r7,r2,r5
    d4b0:	39c00017 	ldw	r7,0(r7)
    d4b4:	110d883a 	add	r6,r2,r4
    d4b8:	10800104 	addi	r2,r2,4
    d4bc:	31c00015 	stw	r7,0(r6)
    d4c0:	003ff906 	br	d4a8 <_gp+0xffff72dc>
    d4c4:	01000074 	movhi	r4,1
    d4c8:	01400074 	movhi	r5,1
    d4cc:	2135ff04 	addi	r4,r4,-10244
    d4d0:	2975ff04 	addi	r5,r5,-10244

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    d4d4:	2140101e 	bne	r4,r5,d518 <alt_load+0xb4>
    d4d8:	00000b06 	br	d508 <alt_load+0xa4>
    d4dc:	00c00074 	movhi	r3,1
    d4e0:	18e00804 	addi	r3,r3,-32736
    d4e4:	1907c83a 	sub	r3,r3,r4
    d4e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    d4ec:	10fff526 	beq	r2,r3,d4c4 <_gp+0xffff72f8>
    {
      *to++ = *from++;
    d4f0:	114f883a 	add	r7,r2,r5
    d4f4:	39c00017 	ldw	r7,0(r7)
    d4f8:	110d883a 	add	r6,r2,r4
    d4fc:	10800104 	addi	r2,r2,4
    d500:	31c00015 	stw	r7,0(r6)
    d504:	003ff906 	br	d4ec <_gp+0xffff7320>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d508:	000d7ec0 	call	d7ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    d50c:	dfc00017 	ldw	ra,0(sp)
    d510:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    d514:	000d7f01 	jmpi	d7f0 <alt_icache_flush_all>
    d518:	00c00074 	movhi	r3,1
    d51c:	18f7a904 	addi	r3,r3,-8540
    d520:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    d524:	0005883a 	mov	r2,zero
  {
    while( to != end )
    d528:	18bff726 	beq	r3,r2,d508 <_gp+0xffff733c>
    {
      *to++ = *from++;
    d52c:	114f883a 	add	r7,r2,r5
    d530:	39c00017 	ldw	r7,0(r7)
    d534:	110d883a 	add	r6,r2,r4
    d538:	10800104 	addi	r2,r2,4
    d53c:	31c00015 	stw	r7,0(r6)
    d540:	003ff906 	br	d528 <_gp+0xffff735c>

0000d544 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d544:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d548:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d54c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d550:	000d70c0 	call	d70c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d554:	000d72c0 	call	d72c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    d558:	d1a0e217 	ldw	r6,-31864(gp)
    d55c:	d160e317 	ldw	r5,-31860(gp)
    d560:	d120e417 	ldw	r4,-31856(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    d564:	dfc00017 	ldw	ra,0(sp)
    d568:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    d56c:	00080e41 	jmpi	80e4 <main>

0000d570 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d570:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d574:	00bfff84 	movi	r2,-2
    d578:	2884703a 	and	r2,r5,r2
    d57c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d580:	d0a00317 	ldw	r2,-32756(gp)
    d584:	00ffff04 	movi	r3,-4
    d588:	108000c4 	addi	r2,r2,3
    d58c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d590:	00c00074 	movhi	r3,1
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d594:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d598:	1109883a 	add	r4,r2,r4
    d59c:	18c00004 	addi	r3,r3,0
    d5a0:	1900032e 	bgeu	r3,r4,d5b0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5a4:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d5a8:	00bfffc4 	movi	r2,-1
    d5ac:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    d5b0:	d1200315 	stw	r4,-32756(gp)
    d5b4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    d5b8:	f800283a 	ret

0000d5bc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5bc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5c0:	00bfff84 	movi	r2,-2
    d5c4:	1884703a 	and	r2,r3,r2
    d5c8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d5cc:	21400117 	ldw	r5,4(r4)
    d5d0:	20800017 	ldw	r2,0(r4)
    d5d4:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    d5d8:	21400117 	ldw	r5,4(r4)
    d5dc:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d5e0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    d5e4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5e8:	1801703a 	wrctl	status,r3
    d5ec:	f800283a 	ret

0000d5f0 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d5f0:	d0a0e517 	ldw	r2,-31852(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d5f4:	defffb04 	addi	sp,sp,-20
    d5f8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d5fc:	d4200417 	ldw	r16,-32752(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d600:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d604:	dc800215 	stw	r18,8(sp)
    d608:	dc400115 	stw	r17,4(sp)
    d60c:	dfc00415 	stw	ra,16(sp)
    d610:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d614:	d0a0e515 	stw	r2,-31852(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d618:	d4600404 	addi	r17,gp,-32752
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    d61c:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d620:	84401a26 	beq	r16,r17,d68c <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d624:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    d628:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d62c:	10000326 	beq	r2,zero,d63c <alt_tick+0x4c>
    d630:	d0a0e517 	ldw	r2,-31852(gp)
    d634:	1000011e 	bne	r2,zero,d63c <alt_tick+0x4c>
    {
      alarm->rollover = 0;
    d638:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d63c:	d0e0e517 	ldw	r3,-31852(gp)
    d640:	80800217 	ldw	r2,8(r16)
    d644:	18800f36 	bltu	r3,r2,d684 <alt_tick+0x94>
    d648:	80800403 	ldbu	r2,16(r16)
    d64c:	10000d1e 	bne	r2,zero,d684 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
    d650:	80800317 	ldw	r2,12(r16)
    d654:	81000517 	ldw	r4,20(r16)
    d658:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d65c:	1000031e 	bne	r2,zero,d66c <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
    d660:	8009883a 	mov	r4,r16
    d664:	000d5bc0 	call	d5bc <alt_alarm_stop>
    d668:	00000606 	br	d684 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
    d66c:	80c00217 	ldw	r3,8(r16)
    d670:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d674:	d0e0e517 	ldw	r3,-31852(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    d678:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d67c:	10c0012e 	bgeu	r2,r3,d684 <alt_tick+0x94>
        {
          alarm->rollover = 1;
    d680:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d684:	9821883a 	mov	r16,r19
    d688:	003fe506 	br	d620 <_gp+0xffff7454>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    d68c:	dfc00417 	ldw	ra,16(sp)
    d690:	dcc00317 	ldw	r19,12(sp)
    d694:	dc800217 	ldw	r18,8(sp)
    d698:	dc400117 	ldw	r17,4(sp)
    d69c:	dc000017 	ldw	r16,0(sp)
    d6a0:	dec00504 	addi	sp,sp,20
    d6a4:	f800283a 	ret

0000d6a8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    d6a8:	000d7641 	jmpi	d764 <alt_busy_sleep>

0000d6ac <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    d6ac:	00800044 	movi	r2,1
    d6b0:	20800226 	beq	r4,r2,d6bc <write+0x10>
    d6b4:	00800084 	movi	r2,2
    d6b8:	2080041e 	bne	r4,r2,d6cc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    d6bc:	01000074 	movhi	r4,1
    d6c0:	000f883a 	mov	r7,zero
    d6c4:	21387904 	addi	r4,r4,-7708
    d6c8:	000d7301 	jmpi	d730 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    d6cc:	d0a00717 	ldw	r2,-32740(gp)
    d6d0:	10000926 	beq	r2,zero,d6f8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d6d4:	deffff04 	addi	sp,sp,-4
    d6d8:	dfc00015 	stw	ra,0(sp)
    d6dc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    d6e0:	00c01444 	movi	r3,81
    d6e4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    d6e8:	00bfffc4 	movi	r2,-1
    d6ec:	dfc00017 	ldw	ra,0(sp)
    d6f0:	dec00104 	addi	sp,sp,4
    d6f4:	f800283a 	ret
    d6f8:	d0a0e104 	addi	r2,gp,-31868
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    d6fc:	00c01444 	movi	r3,81
    d700:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    d704:	00bfffc4 	movi	r2,-1
    d708:	f800283a 	ret

0000d70c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d70c:	deffff04 	addi	sp,sp,-4
    d710:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    d714:	000d7f40 	call	d7f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d718:	00800044 	movi	r2,1
    d71c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d720:	dfc00017 	ldw	ra,0(sp)
    d724:	dec00104 	addi	sp,sp,4
    d728:	f800283a 	ret

0000d72c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d72c:	f800283a 	ret

0000d730 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    d730:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d734:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    d738:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    d73c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    d740:	2980072e 	bgeu	r5,r6,d760 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    d744:	38c00037 	ldwio	r3,0(r7)
    d748:	18ffffec 	andhi	r3,r3,65535
    d74c:	183ffc26 	beq	r3,zero,d740 <_gp+0xffff7574>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    d750:	28c00007 	ldb	r3,0(r5)
    d754:	20c00035 	stwio	r3,0(r4)
    d758:	29400044 	addi	r5,r5,1
    d75c:	003ff806 	br	d740 <_gp+0xffff7574>

  return count;
}
    d760:	f800283a 	ret

0000d764 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    d764:	0141c734 	movhi	r5,1820
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    d768:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    d76c:	295c71c4 	addi	r5,r5,29127
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    d770:	dc000015 	stw	r16,0(sp)
    d774:	dfc00115 	stw	ra,4(sp)
    d778:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    d77c:	000ab540 	call	ab54 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    d780:	10001026 	beq	r2,zero,d7c4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    d784:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    d788:	013e3934 	movhi	r4,63716
    d78c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    d790:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    d794:	21238e44 	addi	r4,r4,-29127
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    d798:	297fffc4 	addi	r5,r5,-1
    d79c:	283ffe1e 	bne	r5,zero,d798 <_gp+0xffff75cc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    d7a0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    d7a4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    d7a8:	18bffb16 	blt	r3,r2,d798 <_gp+0xffff75cc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d7ac:	01400484 	movi	r5,18
    d7b0:	8009883a 	mov	r4,r16
    d7b4:	000ac100 	call	ac10 <__mulsi3>
    d7b8:	10bfffc4 	addi	r2,r2,-1
    d7bc:	103ffe1e 	bne	r2,zero,d7b8 <_gp+0xffff75ec>
    d7c0:	00000506 	br	d7d8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d7c4:	01400484 	movi	r5,18
    d7c8:	8009883a 	mov	r4,r16
    d7cc:	000ac100 	call	ac10 <__mulsi3>
    d7d0:	10bfffc4 	addi	r2,r2,-1
    d7d4:	00bffe16 	blt	zero,r2,d7d0 <_gp+0xffff7604>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	dfc00117 	ldw	ra,4(sp)
    d7e0:	dc000017 	ldw	r16,0(sp)
    d7e4:	dec00204 	addi	sp,sp,8
    d7e8:	f800283a 	ret

0000d7ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d7ec:	f800283a 	ret

0000d7f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d7f0:	f800283a 	ret

0000d7f4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    d7f4:	000170fa 	wrctl	ienable,zero
    d7f8:	f800283a 	ret
