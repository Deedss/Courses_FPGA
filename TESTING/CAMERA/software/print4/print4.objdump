
print4.elf:     file format elf32-littlenios2
print4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000004f4 memsz 0x000004f4 flags r-x
    LOAD off    0x00001514 vaddr 0x00002514 paddr 0x00002518 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000151c vaddr 0x0000251c paddr 0x0000251c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001518  2**0
                  CONTENTS
  2 .text         000004dc  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000024fc  000024fc  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00002514  00002518  00001514  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000251c  0000251c  0000151c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002528  00002528  00001518  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001540  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000010d8  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000091e  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a89  00000000  00000000  0000311e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000260  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000815  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006ea  00000000  00000000  0000461d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00004d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005cea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00005ced  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005cf9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005cfa  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00005cfb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005d06  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005d11  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00005d1c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c40  00000000  00000000  00005d5e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050ab1  00000000  00000000  0000a99e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
000024fc l    d  .rodata	00000000 .rodata
00002514 l    d  .rwdata	00000000 .rwdata
0000251c l    d  .bss	00000000 .bss
00002528 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../print4_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000021ac g     F .text	0000002c alt_main
00002518 g       *ABS*	00000000 __flash_rwdata_start
000021d8 g     F .text	00000038 alt_putstr
000022fc g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002520 g     O .bss	00000004 alt_argv
0000a514 g       *ABS*	00000000 _gp
00002210 g     F .text	00000004 usleep
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002418 g     F .text	00000064 .hidden __udivsi3
00002528 g       *ABS*	00000000 __bss_end
000022f4 g     F .text	00000004 alt_dcache_flush_all
00002518 g       *ABS*	00000000 __ram_rwdata_end
00002514 g       *ABS*	00000000 __ram_rodata_end
00002514 g     O .rwdata	00000004 jtag_uart_0
0000247c g     F .text	00000058 .hidden __umodsi3
00002528 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002238 g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
00002234 g     F .text	00000004 alt_sys_init
000024d4 g     F .text	00000028 .hidden __mulsi3
00002514 g       *ABS*	00000000 __ram_rwdata_start
000024fc g       *ABS*	00000000 __ram_rodata_start
0000226c g     F .text	00000088 alt_busy_sleep
00002528 g       *ABS*	00000000 __alt_stack_base
0000251c g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000070 main
0000251c g     O .bss	00000004 alt_envp
00002320 g     F .text	00000084 .hidden __divsi3
000024fc g       *ABS*	00000000 __flash_rodata_start
00002214 g     F .text	00000020 alt_irq_init
00002524 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002518 g       *ABS*	00000000 _edata
00002528 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000023a4 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002304 g     F .text	0000001c strlen
000022f8 g     F .text	00000004 alt_icache_flush_all
000020cc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a94514 	ori	gp,gp,42260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10894714 	ori	r2,r2,9500

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c94a14 	ori	r3,r3,9512

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7b30>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00020cc0 	call	20cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021ac0 	call	21ac <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7b44>

0000205c <main>:
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    205c:	01000034 	movhi	r4,0
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
    2060:	defff704 	addi	sp,sp,-36
  alt_putstr("Hello from Nios II!\n");
    2064:	21093f04 	addi	r4,r4,9468
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
    2068:	dcc00315 	stw	r19,12(sp)
    206c:	dc800215 	stw	r18,8(sp)
    2070:	dc400115 	stw	r17,4(sp)
    2074:	dc000015 	stw	r16,0(sp)
    2078:	dfc00815 	stw	ra,32(sp)
    207c:	ddc00715 	stw	r23,28(sp)
    2080:	dd800615 	stw	r22,24(sp)
    2084:	dd400515 	stw	r21,20(sp)
    2088:	dd000415 	stw	r20,16(sp)
  int R, G, B;
  int SWITCHES;
  /* Event loop never exits. */
  while (1)
  {
    R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    208c:	04d41404 	movi	r19,20560
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    2090:	00021d80 	call	21d8 <alt_putstr>
  int SWITCHES;
  /* Event loop never exits. */
  while (1)
  {
    R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    2094:	04941004 	movi	r18,20544
    B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    2098:	04540c04 	movi	r17,20528
    SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    209c:	04140004 	movi	r16,20480
  int R, G, B;
  int SWITCHES;
  /* Event loop never exits. */
  while (1)
  {
    R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    20a0:	9dc00037 	ldwio	r23,0(r19)
    G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    20a4:	95800037 	ldwio	r22,0(r18)
    B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    20a8:	8d400037 	ldwio	r21,0(r17)
    SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    20ac:	85000037 	ldwio	r20,0(r16)

    usleep(1);
    20b0:	01000044 	movi	r4,1
    20b4:	00022100 	call	2210 <usleep>

    IOWR_ALTERA_AVALON_PIO_DATA(RED_BASE, R);
    20b8:	9dc00035 	stwio	r23,0(r19)
    IOWR_ALTERA_AVALON_PIO_DATA(GREEN_BASE, G);
    20bc:	95800035 	stwio	r22,0(r18)
    IOWR_ALTERA_AVALON_PIO_DATA(BLUE_BASE, B);
    20c0:	8d400035 	stwio	r21,0(r17)
    IOWR_ALTERA_AVALON_PIO_DATA(SW_BASE, SWITCHES);
    20c4:	85000035 	stwio	r20,0(r16)
    20c8:	003ff506 	br	20a0 <_gp+0xffff7b8c>

000020cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    20cc:	deffff04 	addi	sp,sp,-4
    20d0:	01000034 	movhi	r4,0
    20d4:	01400034 	movhi	r5,0
    20d8:	dfc00015 	stw	ra,0(sp)
    20dc:	21094504 	addi	r4,r4,9492
    20e0:	29494604 	addi	r5,r5,9496

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20e4:	2140061e 	bne	r4,r5,2100 <alt_load+0x34>
    20e8:	01000034 	movhi	r4,0
    20ec:	01400034 	movhi	r5,0
    20f0:	21080804 	addi	r4,r4,8224
    20f4:	29480804 	addi	r5,r5,8224
    20f8:	2140121e 	bne	r4,r5,2144 <alt_load+0x78>
    20fc:	00000b06 	br	212c <alt_load+0x60>
    2100:	00c00034 	movhi	r3,0
    2104:	18c94604 	addi	r3,r3,9496
    2108:	1907c83a 	sub	r3,r3,r4
    210c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2110:	10fff526 	beq	r2,r3,20e8 <_gp+0xffff7bd4>
    {
      *to++ = *from++;
    2114:	114f883a 	add	r7,r2,r5
    2118:	39c00017 	ldw	r7,0(r7)
    211c:	110d883a 	add	r6,r2,r4
    2120:	10800104 	addi	r2,r2,4
    2124:	31c00015 	stw	r7,0(r6)
    2128:	003ff906 	br	2110 <_gp+0xffff7bfc>
    212c:	01000034 	movhi	r4,0
    2130:	01400034 	movhi	r5,0
    2134:	21093f04 	addi	r4,r4,9468
    2138:	29493f04 	addi	r5,r5,9468

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    213c:	2140101e 	bne	r4,r5,2180 <alt_load+0xb4>
    2140:	00000b06 	br	2170 <alt_load+0xa4>
    2144:	00c00034 	movhi	r3,0
    2148:	18c80804 	addi	r3,r3,8224
    214c:	1907c83a 	sub	r3,r3,r4
    2150:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2154:	10fff526 	beq	r2,r3,212c <_gp+0xffff7c18>
    {
      *to++ = *from++;
    2158:	114f883a 	add	r7,r2,r5
    215c:	39c00017 	ldw	r7,0(r7)
    2160:	110d883a 	add	r6,r2,r4
    2164:	10800104 	addi	r2,r2,4
    2168:	31c00015 	stw	r7,0(r6)
    216c:	003ff906 	br	2154 <_gp+0xffff7c40>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2170:	00022f40 	call	22f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2174:	dfc00017 	ldw	ra,0(sp)
    2178:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    217c:	00022f81 	jmpi	22f8 <alt_icache_flush_all>
    2180:	00c00034 	movhi	r3,0
    2184:	18c94504 	addi	r3,r3,9492
    2188:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    218c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2190:	18bff726 	beq	r3,r2,2170 <_gp+0xffff7c5c>
    {
      *to++ = *from++;
    2194:	114f883a 	add	r7,r2,r5
    2198:	39c00017 	ldw	r7,0(r7)
    219c:	110d883a 	add	r6,r2,r4
    21a0:	10800104 	addi	r2,r2,4
    21a4:	31c00015 	stw	r7,0(r6)
    21a8:	003ff906 	br	2190 <_gp+0xffff7c7c>

000021ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21ac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21b0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    21b4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    21b8:	00022140 	call	2214 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    21bc:	00022340 	call	2234 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21c0:	d1a00217 	ldw	r6,-32760(gp)
    21c4:	d1600317 	ldw	r5,-32756(gp)
    21c8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    21cc:	dfc00017 	ldw	ra,0(sp)
    21d0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21d4:	000205c1 	jmpi	205c <main>

000021d8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    21d8:	defffe04 	addi	sp,sp,-8
    21dc:	dc000015 	stw	r16,0(sp)
    21e0:	dfc00115 	stw	ra,4(sp)
    21e4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    21e8:	00023040 	call	2304 <strlen>
    21ec:	01000034 	movhi	r4,0
    21f0:	000f883a 	mov	r7,zero
    21f4:	100d883a 	mov	r6,r2
    21f8:	800b883a 	mov	r5,r16
    21fc:	21094504 	addi	r4,r4,9492
#else
    return fputs(str, stdout);
#endif
#endif
}
    2200:	dfc00117 	ldw	ra,4(sp)
    2204:	dc000017 	ldw	r16,0(sp)
    2208:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    220c:	00022381 	jmpi	2238 <altera_avalon_jtag_uart_write>

00002210 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    2210:	000226c1 	jmpi	226c <alt_busy_sleep>

00002214 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2214:	deffff04 	addi	sp,sp,-4
    2218:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    221c:	00022fc0 	call	22fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2220:	00800044 	movi	r2,1
    2224:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2228:	dfc00017 	ldw	ra,0(sp)
    222c:	dec00104 	addi	sp,sp,4
    2230:	f800283a 	ret

00002234 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2234:	f800283a 	ret

00002238 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2238:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    223c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2240:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2244:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2248:	2980072e 	bgeu	r5,r6,2268 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    224c:	38c00037 	ldwio	r3,0(r7)
    2250:	18ffffec 	andhi	r3,r3,65535
    2254:	183ffc26 	beq	r3,zero,2248 <_gp+0xffff7d34>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2258:	28c00007 	ldb	r3,0(r5)
    225c:	20c00035 	stwio	r3,0(r4)
    2260:	29400044 	addi	r5,r5,1
    2264:	003ff806 	br	2248 <_gp+0xffff7d34>

  return count;
}
    2268:	f800283a 	ret

0000226c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    226c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2270:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2274:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2278:	dc000015 	stw	r16,0(sp)
    227c:	dfc00115 	stw	ra,4(sp)
    2280:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2284:	00024180 	call	2418 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2288:	10001026 	beq	r2,zero,22cc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    228c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2290:	013999b4 	movhi	r4,58982
    2294:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2298:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    229c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    22a0:	297fffc4 	addi	r5,r5,-1
    22a4:	283ffe1e 	bne	r5,zero,22a0 <_gp+0xffff7d8c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    22a8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    22ac:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    22b0:	18bffb16 	blt	r3,r2,22a0 <_gp+0xffff7d8c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    22b4:	01400144 	movi	r5,5
    22b8:	8009883a 	mov	r4,r16
    22bc:	00024d40 	call	24d4 <__mulsi3>
    22c0:	10bfffc4 	addi	r2,r2,-1
    22c4:	103ffe1e 	bne	r2,zero,22c0 <_gp+0xffff7dac>
    22c8:	00000506 	br	22e0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    22cc:	01400144 	movi	r5,5
    22d0:	8009883a 	mov	r4,r16
    22d4:	00024d40 	call	24d4 <__mulsi3>
    22d8:	10bfffc4 	addi	r2,r2,-1
    22dc:	00bffe16 	blt	zero,r2,22d8 <_gp+0xffff7dc4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    22e0:	0005883a 	mov	r2,zero
    22e4:	dfc00117 	ldw	ra,4(sp)
    22e8:	dc000017 	ldw	r16,0(sp)
    22ec:	dec00204 	addi	sp,sp,8
    22f0:	f800283a 	ret

000022f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    22f4:	f800283a 	ret

000022f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    22f8:	f800283a 	ret

000022fc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    22fc:	000170fa 	wrctl	ienable,zero
    2300:	f800283a 	ret

00002304 <strlen>:
    2304:	2005883a 	mov	r2,r4
    2308:	10c00007 	ldb	r3,0(r2)
    230c:	18000226 	beq	r3,zero,2318 <strlen+0x14>
    2310:	10800044 	addi	r2,r2,1
    2314:	003ffc06 	br	2308 <_gp+0xffff7df4>
    2318:	1105c83a 	sub	r2,r2,r4
    231c:	f800283a 	ret

00002320 <__divsi3>:
    2320:	20001b16 	blt	r4,zero,2390 <__divsi3+0x70>
    2324:	000f883a 	mov	r7,zero
    2328:	28001616 	blt	r5,zero,2384 <__divsi3+0x64>
    232c:	200d883a 	mov	r6,r4
    2330:	29001a2e 	bgeu	r5,r4,239c <__divsi3+0x7c>
    2334:	00800804 	movi	r2,32
    2338:	00c00044 	movi	r3,1
    233c:	00000106 	br	2344 <__divsi3+0x24>
    2340:	10000d26 	beq	r2,zero,2378 <__divsi3+0x58>
    2344:	294b883a 	add	r5,r5,r5
    2348:	10bfffc4 	addi	r2,r2,-1
    234c:	18c7883a 	add	r3,r3,r3
    2350:	293ffb36 	bltu	r5,r4,2340 <_gp+0xffff7e2c>
    2354:	0005883a 	mov	r2,zero
    2358:	18000726 	beq	r3,zero,2378 <__divsi3+0x58>
    235c:	0005883a 	mov	r2,zero
    2360:	31400236 	bltu	r6,r5,236c <__divsi3+0x4c>
    2364:	314dc83a 	sub	r6,r6,r5
    2368:	10c4b03a 	or	r2,r2,r3
    236c:	1806d07a 	srli	r3,r3,1
    2370:	280ad07a 	srli	r5,r5,1
    2374:	183ffa1e 	bne	r3,zero,2360 <_gp+0xffff7e4c>
    2378:	38000126 	beq	r7,zero,2380 <__divsi3+0x60>
    237c:	0085c83a 	sub	r2,zero,r2
    2380:	f800283a 	ret
    2384:	014bc83a 	sub	r5,zero,r5
    2388:	39c0005c 	xori	r7,r7,1
    238c:	003fe706 	br	232c <_gp+0xffff7e18>
    2390:	0109c83a 	sub	r4,zero,r4
    2394:	01c00044 	movi	r7,1
    2398:	003fe306 	br	2328 <_gp+0xffff7e14>
    239c:	00c00044 	movi	r3,1
    23a0:	003fee06 	br	235c <_gp+0xffff7e48>

000023a4 <__modsi3>:
    23a4:	20001716 	blt	r4,zero,2404 <__modsi3+0x60>
    23a8:	000f883a 	mov	r7,zero
    23ac:	2005883a 	mov	r2,r4
    23b0:	28001216 	blt	r5,zero,23fc <__modsi3+0x58>
    23b4:	2900162e 	bgeu	r5,r4,2410 <__modsi3+0x6c>
    23b8:	01800804 	movi	r6,32
    23bc:	00c00044 	movi	r3,1
    23c0:	00000106 	br	23c8 <__modsi3+0x24>
    23c4:	30000a26 	beq	r6,zero,23f0 <__modsi3+0x4c>
    23c8:	294b883a 	add	r5,r5,r5
    23cc:	31bfffc4 	addi	r6,r6,-1
    23d0:	18c7883a 	add	r3,r3,r3
    23d4:	293ffb36 	bltu	r5,r4,23c4 <_gp+0xffff7eb0>
    23d8:	18000526 	beq	r3,zero,23f0 <__modsi3+0x4c>
    23dc:	1806d07a 	srli	r3,r3,1
    23e0:	11400136 	bltu	r2,r5,23e8 <__modsi3+0x44>
    23e4:	1145c83a 	sub	r2,r2,r5
    23e8:	280ad07a 	srli	r5,r5,1
    23ec:	183ffb1e 	bne	r3,zero,23dc <_gp+0xffff7ec8>
    23f0:	38000126 	beq	r7,zero,23f8 <__modsi3+0x54>
    23f4:	0085c83a 	sub	r2,zero,r2
    23f8:	f800283a 	ret
    23fc:	014bc83a 	sub	r5,zero,r5
    2400:	003fec06 	br	23b4 <_gp+0xffff7ea0>
    2404:	0109c83a 	sub	r4,zero,r4
    2408:	01c00044 	movi	r7,1
    240c:	003fe706 	br	23ac <_gp+0xffff7e98>
    2410:	00c00044 	movi	r3,1
    2414:	003ff106 	br	23dc <_gp+0xffff7ec8>

00002418 <__udivsi3>:
    2418:	200d883a 	mov	r6,r4
    241c:	2900152e 	bgeu	r5,r4,2474 <__udivsi3+0x5c>
    2420:	28001416 	blt	r5,zero,2474 <__udivsi3+0x5c>
    2424:	00800804 	movi	r2,32
    2428:	00c00044 	movi	r3,1
    242c:	00000206 	br	2438 <__udivsi3+0x20>
    2430:	10000e26 	beq	r2,zero,246c <__udivsi3+0x54>
    2434:	28000516 	blt	r5,zero,244c <__udivsi3+0x34>
    2438:	294b883a 	add	r5,r5,r5
    243c:	10bfffc4 	addi	r2,r2,-1
    2440:	18c7883a 	add	r3,r3,r3
    2444:	293ffa36 	bltu	r5,r4,2430 <_gp+0xffff7f1c>
    2448:	18000826 	beq	r3,zero,246c <__udivsi3+0x54>
    244c:	0005883a 	mov	r2,zero
    2450:	31400236 	bltu	r6,r5,245c <__udivsi3+0x44>
    2454:	314dc83a 	sub	r6,r6,r5
    2458:	10c4b03a 	or	r2,r2,r3
    245c:	1806d07a 	srli	r3,r3,1
    2460:	280ad07a 	srli	r5,r5,1
    2464:	183ffa1e 	bne	r3,zero,2450 <_gp+0xffff7f3c>
    2468:	f800283a 	ret
    246c:	0005883a 	mov	r2,zero
    2470:	f800283a 	ret
    2474:	00c00044 	movi	r3,1
    2478:	003ff406 	br	244c <_gp+0xffff7f38>

0000247c <__umodsi3>:
    247c:	2005883a 	mov	r2,r4
    2480:	2900122e 	bgeu	r5,r4,24cc <__umodsi3+0x50>
    2484:	28001116 	blt	r5,zero,24cc <__umodsi3+0x50>
    2488:	01800804 	movi	r6,32
    248c:	00c00044 	movi	r3,1
    2490:	00000206 	br	249c <__umodsi3+0x20>
    2494:	30000c26 	beq	r6,zero,24c8 <__umodsi3+0x4c>
    2498:	28000516 	blt	r5,zero,24b0 <__umodsi3+0x34>
    249c:	294b883a 	add	r5,r5,r5
    24a0:	31bfffc4 	addi	r6,r6,-1
    24a4:	18c7883a 	add	r3,r3,r3
    24a8:	293ffa36 	bltu	r5,r4,2494 <_gp+0xffff7f80>
    24ac:	18000626 	beq	r3,zero,24c8 <__umodsi3+0x4c>
    24b0:	1806d07a 	srli	r3,r3,1
    24b4:	11400136 	bltu	r2,r5,24bc <__umodsi3+0x40>
    24b8:	1145c83a 	sub	r2,r2,r5
    24bc:	280ad07a 	srli	r5,r5,1
    24c0:	183ffb1e 	bne	r3,zero,24b0 <_gp+0xffff7f9c>
    24c4:	f800283a 	ret
    24c8:	f800283a 	ret
    24cc:	00c00044 	movi	r3,1
    24d0:	003ff706 	br	24b0 <_gp+0xffff7f9c>

000024d4 <__mulsi3>:
    24d4:	0005883a 	mov	r2,zero
    24d8:	20000726 	beq	r4,zero,24f8 <__mulsi3+0x24>
    24dc:	20c0004c 	andi	r3,r4,1
    24e0:	2008d07a 	srli	r4,r4,1
    24e4:	18000126 	beq	r3,zero,24ec <__mulsi3+0x18>
    24e8:	1145883a 	add	r2,r2,r5
    24ec:	294b883a 	add	r5,r5,r5
    24f0:	203ffa1e 	bne	r4,zero,24dc <_gp+0xffff7fc8>
    24f4:	f800283a 	ret
    24f8:	f800283a 	ret
