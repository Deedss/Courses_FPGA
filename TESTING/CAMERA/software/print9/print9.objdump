
print9.elf:     file format elf32-littlenios2
print9.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000264 memsz 0x00000264 flags r-x
    LOAD off    0x00001284 vaddr 0x00002284 paddr 0x00002288 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000128c vaddr 0x0000228c paddr 0x0000228c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001288  2**0
                  CONTENTS
  2 .text         0000024c  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000226c  0000226c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00002284  00002288  00001284  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000228c  0000228c  0000128c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002298  00002298  00001288  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b80  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000666  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000076e  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005e5  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  000034e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000043f6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000043f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004407  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004412  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c40  00000000  00000000  0000446a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00044cc3  00000000  00000000  000090aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
0000226c l    d  .rodata	00000000 .rodata
00002284 l    d  .rwdata	00000000 .rwdata
0000228c l    d  .bss	00000000 .bss
00002298 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../print9_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00002184 g     F .text	0000002c alt_main
00002288 g       *ABS*	00000000 __flash_rwdata_start
000021b0 g     F .text	00000038 alt_putstr
00002248 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002290 g     O .bss	00000004 alt_argv
0000a284 g       *ABS*	00000000 _gp
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002298 g       *ABS*	00000000 __bss_end
00002240 g     F .text	00000004 alt_dcache_flush_all
00002288 g       *ABS*	00000000 __ram_rwdata_end
00002284 g       *ABS*	00000000 __ram_rodata_end
00002284 g     O .rwdata	00000004 jtag_uart_0
00002298 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
0000220c g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
00002208 g     F .text	00000004 alt_sys_init
00002284 g       *ABS*	00000000 __ram_rwdata_start
0000226c g       *ABS*	00000000 __ram_rodata_start
00002298 g       *ABS*	00000000 __alt_stack_base
0000228c g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000048 main
0000228c g     O .bss	00000004 alt_envp
0000226c g       *ABS*	00000000 __flash_rodata_start
000021e8 g     F .text	00000020 alt_irq_init
00002294 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002288 g       *ABS*	00000000 _edata
00002298 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002250 g     F .text	0000001c strlen
00002244 g     F .text	00000004 alt_icache_flush_all
000020a4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8a114 	ori	gp,gp,41604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1088a314 	ori	r2,r2,8844

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c8a614 	ori	r3,r3,8856

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7dc0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00020a40 	call	20a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021840 	call	2184 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7dd4>

0000205c <main>:
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{
  alt_putstr("Hello from Nios II!\n");
    205c:	01000034 	movhi	r4,0
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{
    2060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    2064:	21089b04 	addi	r4,r4,8812
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{
    2068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    206c:	00021b00 	call	21b0 <alt_putstr>
  int R, G, B;
  int SWITCHES;
  /* Event loop never exits. */
  while (1)
  {
    R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    2070:	01540004 	movi	r5,20480
    G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    2074:	01140404 	movi	r4,20496
    B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    2078:	00d40804 	movi	r3,20512
    SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    207c:	00940c04 	movi	r2,20528
  int R, G, B;
  int SWITCHES;
  /* Event loop never exits. */
  while (1)
  {
    R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    2080:	2a400037 	ldwio	r9,0(r5)
    G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    2084:	22000037 	ldwio	r8,0(r4)
    B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    2088:	19c00037 	ldwio	r7,0(r3)
    SWITCHES = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);
    208c:	11800037 	ldwio	r6,0(r2)

    IOWR_ALTERA_AVALON_PIO_DATA(RED_BASE, R);
    2090:	2a400035 	stwio	r9,0(r5)
    IOWR_ALTERA_AVALON_PIO_DATA(GREEN_BASE, G);
    2094:	22000035 	stwio	r8,0(r4)
    IOWR_ALTERA_AVALON_PIO_DATA(BLUE_BASE, B);
    2098:	19c00035 	stwio	r7,0(r3)
    IOWR_ALTERA_AVALON_PIO_DATA(SW_BASE, SWITCHES);
    209c:	11800035 	stwio	r6,0(r2)
    20a0:	003ff706 	br	2080 <_gp+0xffff7dfc>

000020a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    20a4:	deffff04 	addi	sp,sp,-4
    20a8:	01000034 	movhi	r4,0
    20ac:	01400034 	movhi	r5,0
    20b0:	dfc00015 	stw	ra,0(sp)
    20b4:	2108a104 	addi	r4,r4,8836
    20b8:	2948a204 	addi	r5,r5,8840

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20bc:	2140061e 	bne	r4,r5,20d8 <alt_load+0x34>
    20c0:	01000034 	movhi	r4,0
    20c4:	01400034 	movhi	r5,0
    20c8:	21080804 	addi	r4,r4,8224
    20cc:	29480804 	addi	r5,r5,8224
    20d0:	2140121e 	bne	r4,r5,211c <alt_load+0x78>
    20d4:	00000b06 	br	2104 <alt_load+0x60>
    20d8:	00c00034 	movhi	r3,0
    20dc:	18c8a204 	addi	r3,r3,8840
    20e0:	1907c83a 	sub	r3,r3,r4
    20e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    20e8:	10fff526 	beq	r2,r3,20c0 <_gp+0xffff7e3c>
    {
      *to++ = *from++;
    20ec:	114f883a 	add	r7,r2,r5
    20f0:	39c00017 	ldw	r7,0(r7)
    20f4:	110d883a 	add	r6,r2,r4
    20f8:	10800104 	addi	r2,r2,4
    20fc:	31c00015 	stw	r7,0(r6)
    2100:	003ff906 	br	20e8 <_gp+0xffff7e64>
    2104:	01000034 	movhi	r4,0
    2108:	01400034 	movhi	r5,0
    210c:	21089b04 	addi	r4,r4,8812
    2110:	29489b04 	addi	r5,r5,8812

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2114:	2140101e 	bne	r4,r5,2158 <alt_load+0xb4>
    2118:	00000b06 	br	2148 <alt_load+0xa4>
    211c:	00c00034 	movhi	r3,0
    2120:	18c80804 	addi	r3,r3,8224
    2124:	1907c83a 	sub	r3,r3,r4
    2128:	0005883a 	mov	r2,zero
  {
    while( to != end )
    212c:	10fff526 	beq	r2,r3,2104 <_gp+0xffff7e80>
    {
      *to++ = *from++;
    2130:	114f883a 	add	r7,r2,r5
    2134:	39c00017 	ldw	r7,0(r7)
    2138:	110d883a 	add	r6,r2,r4
    213c:	10800104 	addi	r2,r2,4
    2140:	31c00015 	stw	r7,0(r6)
    2144:	003ff906 	br	212c <_gp+0xffff7ea8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2148:	00022400 	call	2240 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    214c:	dfc00017 	ldw	ra,0(sp)
    2150:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2154:	00022441 	jmpi	2244 <alt_icache_flush_all>
    2158:	00c00034 	movhi	r3,0
    215c:	18c8a104 	addi	r3,r3,8836
    2160:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2164:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2168:	18bff726 	beq	r3,r2,2148 <_gp+0xffff7ec4>
    {
      *to++ = *from++;
    216c:	114f883a 	add	r7,r2,r5
    2170:	39c00017 	ldw	r7,0(r7)
    2174:	110d883a 	add	r6,r2,r4
    2178:	10800104 	addi	r2,r2,4
    217c:	31c00015 	stw	r7,0(r6)
    2180:	003ff906 	br	2168 <_gp+0xffff7ee4>

00002184 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2184:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2188:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    218c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2190:	00021e80 	call	21e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2194:	00022080 	call	2208 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2198:	d1a00217 	ldw	r6,-32760(gp)
    219c:	d1600317 	ldw	r5,-32756(gp)
    21a0:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    21a4:	dfc00017 	ldw	ra,0(sp)
    21a8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21ac:	000205c1 	jmpi	205c <main>

000021b0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    21b0:	defffe04 	addi	sp,sp,-8
    21b4:	dc000015 	stw	r16,0(sp)
    21b8:	dfc00115 	stw	ra,4(sp)
    21bc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    21c0:	00022500 	call	2250 <strlen>
    21c4:	01000034 	movhi	r4,0
    21c8:	000f883a 	mov	r7,zero
    21cc:	100d883a 	mov	r6,r2
    21d0:	800b883a 	mov	r5,r16
    21d4:	2108a104 	addi	r4,r4,8836
#else
    return fputs(str, stdout);
#endif
#endif
}
    21d8:	dfc00117 	ldw	ra,4(sp)
    21dc:	dc000017 	ldw	r16,0(sp)
    21e0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    21e4:	000220c1 	jmpi	220c <altera_avalon_jtag_uart_write>

000021e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    21e8:	deffff04 	addi	sp,sp,-4
    21ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    21f0:	00022480 	call	2248 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    21f4:	00800044 	movi	r2,1
    21f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    21fc:	dfc00017 	ldw	ra,0(sp)
    2200:	dec00104 	addi	sp,sp,4
    2204:	f800283a 	ret

00002208 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2208:	f800283a 	ret

0000220c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    220c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2210:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2214:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2218:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    221c:	2980072e 	bgeu	r5,r6,223c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2220:	38c00037 	ldwio	r3,0(r7)
    2224:	18ffffec 	andhi	r3,r3,65535
    2228:	183ffc26 	beq	r3,zero,221c <_gp+0xffff7f98>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    222c:	28c00007 	ldb	r3,0(r5)
    2230:	20c00035 	stwio	r3,0(r4)
    2234:	29400044 	addi	r5,r5,1
    2238:	003ff806 	br	221c <_gp+0xffff7f98>

  return count;
}
    223c:	f800283a 	ret

00002240 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2240:	f800283a 	ret

00002244 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2244:	f800283a 	ret

00002248 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2248:	000170fa 	wrctl	ienable,zero
    224c:	f800283a 	ret

00002250 <strlen>:
    2250:	2005883a 	mov	r2,r4
    2254:	10c00007 	ldb	r3,0(r2)
    2258:	18000226 	beq	r3,zero,2264 <strlen+0x14>
    225c:	10800044 	addi	r2,r2,1
    2260:	003ffc06 	br	2254 <_gp+0xffff7fd0>
    2264:	1105c83a 	sub	r2,r2,r4
    2268:	f800283a 	ret
