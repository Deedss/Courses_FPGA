
print_rgb.elf:     file format elf32-littlenios2
print_rgb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000c5c memsz 0x00000c5c flags r-x
    LOAD off    0x00001c7c vaddr 0x00002c7c paddr 0x00002d6c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e5c vaddr 0x00002e5c paddr 0x00002e5c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001d6c  2**0
                  CONTENTS
  2 .text         00000c0c  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00002c2c  00002c2c  00001c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00002c7c  00002d6c  00001c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00002e5c  00002e5c  00001e5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002e6c  00002e6c  00001d6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00001d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003601  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012ea  00000000  00000000  00005639  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000160e  00000000  00000000  00006923  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000398  00000000  00000000  00007f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f99  00000000  00000000  000082cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001377  00000000  00000000  00009265  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b876  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000b879  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b885  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b886  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b887  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b892  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b89d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0000b8a8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  0000b8ac  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c40  00000000  00000000  0000b8ea  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f0d8  00000000  00000000  0001052a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
00002c2c l    d  .rodata	00000000 .rodata
00002c7c l    d  .rwdata	00000000 .rwdata
00002e5c l    d  .bss	00000000 .bss
00002e6c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../print_rgb_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002164 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002c7c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00002b00 g     F .text	0000002c alt_main
00002d6c g       *ABS*	00000000 __flash_rwdata_start
00002118 g     F .text	0000004c printf
00002b2c g     F .text	00000038 alt_putstr
00002c24 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002e5c g     O .bss	00000004 errno
00002e64 g     O .bss	00000004 alt_argv
0000ad5c g       *ABS*	00000000 _gp
000020dc g     F .text	0000003c _printf_r
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000293c g     F .text	00000064 .hidden __udivsi3
00002d5c g     O .rwdata	00000004 _global_impure_ptr
00002e6c g       *ABS*	00000000 __bss_end
00002c1c g     F .text	00000004 alt_dcache_flush_all
00002d6c g       *ABS*	00000000 __ram_rwdata_end
00002b64 g     F .text	00000060 write
00002c7c g       *ABS*	00000000 __ram_rodata_end
00002d64 g     O .rwdata	00000004 jtag_uart_0
000029a0 g     F .text	00000058 .hidden __umodsi3
00002e6c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002be8 g     F .text	00000034 altera_avalon_jtag_uart_write
000021d0 g     F .text	0000052c ___vfprintf_internal_r
00002020 g     F .text	0000003c _start
00002be4 g     F .text	00000004 alt_sys_init
000029f8 g     F .text	00000028 .hidden __mulsi3
00002c7c g       *ABS*	00000000 __ram_rwdata_start
00002c2c g       *ABS*	00000000 __ram_rodata_start
00002e6c g       *ABS*	00000000 __alt_stack_base
00002718 g     F .text	000000b8 __sfvwrite_small_dev
00002e5c g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000080 main
00002e60 g     O .bss	00000004 alt_envp
00002d68 g     O .rwdata	00000004 alt_errno
00002844 g     F .text	00000084 .hidden __divsi3
00002c2c g       *ABS*	00000000 __flash_rodata_start
00002bc4 g     F .text	00000020 alt_irq_init
000027ec g     F .text	00000058 _write_r
00002d60 g     O .rwdata	00000004 _impure_ptr
00002e68 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002d6c g       *ABS*	00000000 _edata
00002e6c g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
000028c8 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000027d0 g     F .text	0000001c strlen
00002c20 g     F .text	00000004 alt_icache_flush_all
000026fc g     F .text	0000001c __vfprintf_internal
00002a20 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6ab5714 	ori	gp,gp,44380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108b9714 	ori	r2,r2,11868

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18cb9b14 	ori	r3,r3,11884

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff72e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	0002a200 	call	2a20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	0002b000 	call	2b00 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff72fc>

0000205c <main>:
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    205c:	01000034 	movhi	r4,0
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
    2060:	defff804 	addi	sp,sp,-32
  alt_putstr("Hello from Nios II!\n");
    2064:	210b0b04 	addi	r4,r4,11308
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
    2068:	dd000615 	stw	r20,24(sp)
    206c:	dcc00515 	stw	r19,20(sp)
    2070:	dc800415 	stw	r18,16(sp)
    2074:	dfc00715 	stw	ra,28(sp)
    2078:	dc400315 	stw	r17,12(sp)
    207c:	dc000215 	stw	r16,8(sp)
  /* Event loop never exits. */
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
      for(HCount = 0; HCount < 800; HCount++){
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    2080:	04940804 	movi	r18,20512
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    2084:	0002b2c0 	call	2b2c <alt_putstr>
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
      for(HCount = 0; HCount < 800; HCount++){
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    2088:	04d40404 	movi	r19,20496
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    208c:	05140004 	movi	r20,20480
  int R, G, B;
  int HCount, VCount;
  /* Event loop never exits. */
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
    2090:	0023883a 	mov	r17,zero
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

int main()
{ 
    2094:	0021883a 	mov	r16,zero
  /* Event loop never exits. */
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
      for(HCount = 0; HCount < 800; HCount++){
	R = IORD_ALTERA_AVALON_PIO_DATA(RED_BASE);
    2098:	91c00037 	ldwio	r7,0(r18)
	G = IORD_ALTERA_AVALON_PIO_DATA(GREEN_BASE);
    209c:	98800037 	ldwio	r2,0(r19)
	B = IORD_ALTERA_AVALON_PIO_DATA(BLUE_BASE);
    20a0:	a0c00037 	ldwio	r3,0(r20)
	printf("Data at pixel:%i x %i is Red: %i, Green:%i, Blue:%i \n", HCount, VCount, R, G, B);
    20a4:	01000034 	movhi	r4,0
    20a8:	800b883a 	mov	r5,r16
    20ac:	d8c00115 	stw	r3,4(sp)
    20b0:	d8800015 	stw	r2,0(sp)
    20b4:	880d883a 	mov	r6,r17
    20b8:	210b1104 	addi	r4,r4,11332
    20bc:	00021180 	call	2118 <printf>
  int HCount, VCount;
  /* Event loop never exits. */
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
      for(HCount = 0; HCount < 800; HCount++){
    20c0:	84000044 	addi	r16,r16,1
    20c4:	0080c804 	movi	r2,800
    20c8:	80bff31e 	bne	r16,r2,2098 <_gp+0xffff733c>
  int R, G, B;
  int HCount, VCount;
  /* Event loop never exits. */
  while (1)
  {
    for(VCount = 0; VCount < 525; VCount++){
    20cc:	8c400044 	addi	r17,r17,1
    20d0:	00808344 	movi	r2,525
    20d4:	88bfef1e 	bne	r17,r2,2094 <_gp+0xffff7338>
    20d8:	003fed06 	br	2090 <_gp+0xffff7334>

000020dc <_printf_r>:
    20dc:	defffd04 	addi	sp,sp,-12
    20e0:	dfc00015 	stw	ra,0(sp)
    20e4:	d9800115 	stw	r6,4(sp)
    20e8:	d9c00215 	stw	r7,8(sp)
    20ec:	20c00217 	ldw	r3,8(r4)
    20f0:	01800034 	movhi	r6,0
    20f4:	3189c604 	addi	r6,r6,10008
    20f8:	19800115 	stw	r6,4(r3)
    20fc:	280d883a 	mov	r6,r5
    2100:	21400217 	ldw	r5,8(r4)
    2104:	d9c00104 	addi	r7,sp,4
    2108:	00021d00 	call	21d0 <___vfprintf_internal_r>
    210c:	dfc00017 	ldw	ra,0(sp)
    2110:	dec00304 	addi	sp,sp,12
    2114:	f800283a 	ret

00002118 <printf>:
    2118:	defffc04 	addi	sp,sp,-16
    211c:	dfc00015 	stw	ra,0(sp)
    2120:	d9400115 	stw	r5,4(sp)
    2124:	d9800215 	stw	r6,8(sp)
    2128:	d9c00315 	stw	r7,12(sp)
    212c:	00800034 	movhi	r2,0
    2130:	108b5804 	addi	r2,r2,11616
    2134:	10800017 	ldw	r2,0(r2)
    2138:	01400034 	movhi	r5,0
    213c:	2949c604 	addi	r5,r5,10008
    2140:	10c00217 	ldw	r3,8(r2)
    2144:	d9800104 	addi	r6,sp,4
    2148:	19400115 	stw	r5,4(r3)
    214c:	200b883a 	mov	r5,r4
    2150:	11000217 	ldw	r4,8(r2)
    2154:	00026fc0 	call	26fc <__vfprintf_internal>
    2158:	dfc00017 	ldw	ra,0(sp)
    215c:	dec00404 	addi	sp,sp,16
    2160:	f800283a 	ret

00002164 <print_repeat>:
    2164:	defffb04 	addi	sp,sp,-20
    2168:	dc800315 	stw	r18,12(sp)
    216c:	dc400215 	stw	r17,8(sp)
    2170:	dc000115 	stw	r16,4(sp)
    2174:	dfc00415 	stw	ra,16(sp)
    2178:	2025883a 	mov	r18,r4
    217c:	2823883a 	mov	r17,r5
    2180:	d9800005 	stb	r6,0(sp)
    2184:	3821883a 	mov	r16,r7
    2188:	04000a0e 	bge	zero,r16,21b4 <print_repeat+0x50>
    218c:	88800117 	ldw	r2,4(r17)
    2190:	01c00044 	movi	r7,1
    2194:	d80d883a 	mov	r6,sp
    2198:	880b883a 	mov	r5,r17
    219c:	9009883a 	mov	r4,r18
    21a0:	103ee83a 	callr	r2
    21a4:	843fffc4 	addi	r16,r16,-1
    21a8:	103ff726 	beq	r2,zero,2188 <_gp+0xffff742c>
    21ac:	00bfffc4 	movi	r2,-1
    21b0:	00000106 	br	21b8 <print_repeat+0x54>
    21b4:	0005883a 	mov	r2,zero
    21b8:	dfc00417 	ldw	ra,16(sp)
    21bc:	dc800317 	ldw	r18,12(sp)
    21c0:	dc400217 	ldw	r17,8(sp)
    21c4:	dc000117 	ldw	r16,4(sp)
    21c8:	dec00504 	addi	sp,sp,20
    21cc:	f800283a 	ret

000021d0 <___vfprintf_internal_r>:
    21d0:	deffe504 	addi	sp,sp,-108
    21d4:	d8c00804 	addi	r3,sp,32
    21d8:	ddc01815 	stw	r23,96(sp)
    21dc:	dd801715 	stw	r22,92(sp)
    21e0:	dd401615 	stw	r21,88(sp)
    21e4:	dd001515 	stw	r20,84(sp)
    21e8:	dcc01415 	stw	r19,80(sp)
    21ec:	dc801315 	stw	r18,76(sp)
    21f0:	dc401215 	stw	r17,72(sp)
    21f4:	dc001115 	stw	r16,68(sp)
    21f8:	dfc01a15 	stw	ra,104(sp)
    21fc:	df001915 	stw	fp,100(sp)
    2200:	2029883a 	mov	r20,r4
    2204:	2823883a 	mov	r17,r5
    2208:	382d883a 	mov	r22,r7
    220c:	d9800f15 	stw	r6,60(sp)
    2210:	0021883a 	mov	r16,zero
    2214:	d8000e15 	stw	zero,56(sp)
    2218:	d8000a15 	stw	zero,40(sp)
    221c:	002b883a 	mov	r21,zero
    2220:	0027883a 	mov	r19,zero
    2224:	0025883a 	mov	r18,zero
    2228:	d8000c15 	stw	zero,48(sp)
    222c:	d8000b15 	stw	zero,44(sp)
    2230:	002f883a 	mov	r23,zero
    2234:	d8c00915 	stw	r3,36(sp)
    2238:	d8c00f17 	ldw	r3,60(sp)
    223c:	19000003 	ldbu	r4,0(r3)
    2240:	20803fcc 	andi	r2,r4,255
    2244:	1080201c 	xori	r2,r2,128
    2248:	10bfe004 	addi	r2,r2,-128
    224c:	10011e26 	beq	r2,zero,26c8 <___vfprintf_internal_r+0x4f8>
    2250:	00c00044 	movi	r3,1
    2254:	b8c01426 	beq	r23,r3,22a8 <___vfprintf_internal_r+0xd8>
    2258:	1dc00216 	blt	r3,r23,2264 <___vfprintf_internal_r+0x94>
    225c:	b8000626 	beq	r23,zero,2278 <___vfprintf_internal_r+0xa8>
    2260:	00011506 	br	26b8 <___vfprintf_internal_r+0x4e8>
    2264:	01400084 	movi	r5,2
    2268:	b9401d26 	beq	r23,r5,22e0 <___vfprintf_internal_r+0x110>
    226c:	014000c4 	movi	r5,3
    2270:	b9402b26 	beq	r23,r5,2320 <___vfprintf_internal_r+0x150>
    2274:	00011006 	br	26b8 <___vfprintf_internal_r+0x4e8>
    2278:	01400944 	movi	r5,37
    227c:	1140fc26 	beq	r2,r5,2670 <___vfprintf_internal_r+0x4a0>
    2280:	88800117 	ldw	r2,4(r17)
    2284:	d9000005 	stb	r4,0(sp)
    2288:	01c00044 	movi	r7,1
    228c:	d80d883a 	mov	r6,sp
    2290:	880b883a 	mov	r5,r17
    2294:	a009883a 	mov	r4,r20
    2298:	103ee83a 	callr	r2
    229c:	1000d81e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    22a0:	84000044 	addi	r16,r16,1
    22a4:	00010406 	br	26b8 <___vfprintf_internal_r+0x4e8>
    22a8:	01400c04 	movi	r5,48
    22ac:	1140fa26 	beq	r2,r5,2698 <___vfprintf_internal_r+0x4c8>
    22b0:	01400944 	movi	r5,37
    22b4:	11400a1e 	bne	r2,r5,22e0 <___vfprintf_internal_r+0x110>
    22b8:	d8800005 	stb	r2,0(sp)
    22bc:	88800117 	ldw	r2,4(r17)
    22c0:	b80f883a 	mov	r7,r23
    22c4:	d80d883a 	mov	r6,sp
    22c8:	880b883a 	mov	r5,r17
    22cc:	a009883a 	mov	r4,r20
    22d0:	103ee83a 	callr	r2
    22d4:	1000ca1e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    22d8:	84000044 	addi	r16,r16,1
    22dc:	0000f506 	br	26b4 <___vfprintf_internal_r+0x4e4>
    22e0:	25fff404 	addi	r23,r4,-48
    22e4:	bdc03fcc 	andi	r23,r23,255
    22e8:	00c00244 	movi	r3,9
    22ec:	1dc00936 	bltu	r3,r23,2314 <___vfprintf_internal_r+0x144>
    22f0:	00bfffc4 	movi	r2,-1
    22f4:	90800426 	beq	r18,r2,2308 <___vfprintf_internal_r+0x138>
    22f8:	01400284 	movi	r5,10
    22fc:	9009883a 	mov	r4,r18
    2300:	00029f80 	call	29f8 <__mulsi3>
    2304:	00000106 	br	230c <___vfprintf_internal_r+0x13c>
    2308:	0005883a 	mov	r2,zero
    230c:	b8a5883a 	add	r18,r23,r2
    2310:	0000e206 	br	269c <___vfprintf_internal_r+0x4cc>
    2314:	01400b84 	movi	r5,46
    2318:	1140e426 	beq	r2,r5,26ac <___vfprintf_internal_r+0x4dc>
    231c:	05c00084 	movi	r23,2
    2320:	213ff404 	addi	r4,r4,-48
    2324:	27003fcc 	andi	fp,r4,255
    2328:	00c00244 	movi	r3,9
    232c:	1f000936 	bltu	r3,fp,2354 <___vfprintf_internal_r+0x184>
    2330:	00bfffc4 	movi	r2,-1
    2334:	98800426 	beq	r19,r2,2348 <___vfprintf_internal_r+0x178>
    2338:	01400284 	movi	r5,10
    233c:	9809883a 	mov	r4,r19
    2340:	00029f80 	call	29f8 <__mulsi3>
    2344:	00000106 	br	234c <___vfprintf_internal_r+0x17c>
    2348:	0005883a 	mov	r2,zero
    234c:	e0a7883a 	add	r19,fp,r2
    2350:	0000d906 	br	26b8 <___vfprintf_internal_r+0x4e8>
    2354:	00c01b04 	movi	r3,108
    2358:	10c0d226 	beq	r2,r3,26a4 <___vfprintf_internal_r+0x4d4>
    235c:	013fffc4 	movi	r4,-1
    2360:	99000226 	beq	r19,r4,236c <___vfprintf_internal_r+0x19c>
    2364:	d8000b15 	stw	zero,44(sp)
    2368:	00000106 	br	2370 <___vfprintf_internal_r+0x1a0>
    236c:	04c00044 	movi	r19,1
    2370:	01001a44 	movi	r4,105
    2374:	11001626 	beq	r2,r4,23d0 <___vfprintf_internal_r+0x200>
    2378:	20800916 	blt	r4,r2,23a0 <___vfprintf_internal_r+0x1d0>
    237c:	010018c4 	movi	r4,99
    2380:	11008826 	beq	r2,r4,25a4 <___vfprintf_internal_r+0x3d4>
    2384:	01001904 	movi	r4,100
    2388:	11001126 	beq	r2,r4,23d0 <___vfprintf_internal_r+0x200>
    238c:	01001604 	movi	r4,88
    2390:	1100c81e 	bne	r2,r4,26b4 <___vfprintf_internal_r+0x4e4>
    2394:	00c00044 	movi	r3,1
    2398:	d8c00e15 	stw	r3,56(sp)
    239c:	00001506 	br	23f4 <___vfprintf_internal_r+0x224>
    23a0:	01001cc4 	movi	r4,115
    23a4:	11009826 	beq	r2,r4,2608 <___vfprintf_internal_r+0x438>
    23a8:	20800416 	blt	r4,r2,23bc <___vfprintf_internal_r+0x1ec>
    23ac:	01001bc4 	movi	r4,111
    23b0:	1100c01e 	bne	r2,r4,26b4 <___vfprintf_internal_r+0x4e4>
    23b4:	05400204 	movi	r21,8
    23b8:	00000f06 	br	23f8 <___vfprintf_internal_r+0x228>
    23bc:	01001d44 	movi	r4,117
    23c0:	11000d26 	beq	r2,r4,23f8 <___vfprintf_internal_r+0x228>
    23c4:	01001e04 	movi	r4,120
    23c8:	11000a26 	beq	r2,r4,23f4 <___vfprintf_internal_r+0x224>
    23cc:	0000b906 	br	26b4 <___vfprintf_internal_r+0x4e4>
    23d0:	d8c00a17 	ldw	r3,40(sp)
    23d4:	b7000104 	addi	fp,r22,4
    23d8:	18000726 	beq	r3,zero,23f8 <___vfprintf_internal_r+0x228>
    23dc:	df000d15 	stw	fp,52(sp)
    23e0:	b5c00017 	ldw	r23,0(r22)
    23e4:	b800080e 	bge	r23,zero,2408 <___vfprintf_internal_r+0x238>
    23e8:	05efc83a 	sub	r23,zero,r23
    23ec:	02400044 	movi	r9,1
    23f0:	00000606 	br	240c <___vfprintf_internal_r+0x23c>
    23f4:	05400404 	movi	r21,16
    23f8:	b0c00104 	addi	r3,r22,4
    23fc:	d8c00d15 	stw	r3,52(sp)
    2400:	b5c00017 	ldw	r23,0(r22)
    2404:	d8000a15 	stw	zero,40(sp)
    2408:	0013883a 	mov	r9,zero
    240c:	d839883a 	mov	fp,sp
    2410:	b8001726 	beq	r23,zero,2470 <___vfprintf_internal_r+0x2a0>
    2414:	a80b883a 	mov	r5,r21
    2418:	b809883a 	mov	r4,r23
    241c:	da401015 	stw	r9,64(sp)
    2420:	000293c0 	call	293c <__udivsi3>
    2424:	a80b883a 	mov	r5,r21
    2428:	1009883a 	mov	r4,r2
    242c:	102d883a 	mov	r22,r2
    2430:	00029f80 	call	29f8 <__mulsi3>
    2434:	b885c83a 	sub	r2,r23,r2
    2438:	00c00244 	movi	r3,9
    243c:	da401017 	ldw	r9,64(sp)
    2440:	18800216 	blt	r3,r2,244c <___vfprintf_internal_r+0x27c>
    2444:	10800c04 	addi	r2,r2,48
    2448:	00000506 	br	2460 <___vfprintf_internal_r+0x290>
    244c:	d8c00e17 	ldw	r3,56(sp)
    2450:	18000226 	beq	r3,zero,245c <___vfprintf_internal_r+0x28c>
    2454:	10800dc4 	addi	r2,r2,55
    2458:	00000106 	br	2460 <___vfprintf_internal_r+0x290>
    245c:	108015c4 	addi	r2,r2,87
    2460:	e0800005 	stb	r2,0(fp)
    2464:	b02f883a 	mov	r23,r22
    2468:	e7000044 	addi	fp,fp,1
    246c:	003fe806 	br	2410 <_gp+0xffff76b4>
    2470:	e6efc83a 	sub	r23,fp,sp
    2474:	9dc5c83a 	sub	r2,r19,r23
    2478:	0080090e 	bge	zero,r2,24a0 <___vfprintf_internal_r+0x2d0>
    247c:	e085883a 	add	r2,fp,r2
    2480:	01400c04 	movi	r5,48
    2484:	d8c00917 	ldw	r3,36(sp)
    2488:	e009883a 	mov	r4,fp
    248c:	e0c0032e 	bgeu	fp,r3,249c <___vfprintf_internal_r+0x2cc>
    2490:	e7000044 	addi	fp,fp,1
    2494:	21400005 	stb	r5,0(r4)
    2498:	e0bffa1e 	bne	fp,r2,2484 <_gp+0xffff7728>
    249c:	e6efc83a 	sub	r23,fp,sp
    24a0:	d8c00b17 	ldw	r3,44(sp)
    24a4:	4dd1883a 	add	r8,r9,r23
    24a8:	922dc83a 	sub	r22,r18,r8
    24ac:	18001626 	beq	r3,zero,2508 <___vfprintf_internal_r+0x338>
    24b0:	48000a26 	beq	r9,zero,24dc <___vfprintf_internal_r+0x30c>
    24b4:	00800b44 	movi	r2,45
    24b8:	d8800805 	stb	r2,32(sp)
    24bc:	88800117 	ldw	r2,4(r17)
    24c0:	01c00044 	movi	r7,1
    24c4:	d9800804 	addi	r6,sp,32
    24c8:	880b883a 	mov	r5,r17
    24cc:	a009883a 	mov	r4,r20
    24d0:	103ee83a 	callr	r2
    24d4:	10004a1e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    24d8:	84000044 	addi	r16,r16,1
    24dc:	0580070e 	bge	zero,r22,24fc <___vfprintf_internal_r+0x32c>
    24e0:	b00f883a 	mov	r7,r22
    24e4:	01800c04 	movi	r6,48
    24e8:	880b883a 	mov	r5,r17
    24ec:	a009883a 	mov	r4,r20
    24f0:	00021640 	call	2164 <print_repeat>
    24f4:	1000421e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    24f8:	85a1883a 	add	r16,r16,r22
    24fc:	e02d883a 	mov	r22,fp
    2500:	bf2fc83a 	sub	r23,r23,fp
    2504:	00002006 	br	2588 <___vfprintf_internal_r+0x3b8>
    2508:	0580090e 	bge	zero,r22,2530 <___vfprintf_internal_r+0x360>
    250c:	b00f883a 	mov	r7,r22
    2510:	01800804 	movi	r6,32
    2514:	880b883a 	mov	r5,r17
    2518:	a009883a 	mov	r4,r20
    251c:	da401015 	stw	r9,64(sp)
    2520:	00021640 	call	2164 <print_repeat>
    2524:	da401017 	ldw	r9,64(sp)
    2528:	1000351e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    252c:	85a1883a 	add	r16,r16,r22
    2530:	483ff226 	beq	r9,zero,24fc <_gp+0xffff77a0>
    2534:	00800b44 	movi	r2,45
    2538:	d8800805 	stb	r2,32(sp)
    253c:	88800117 	ldw	r2,4(r17)
    2540:	01c00044 	movi	r7,1
    2544:	d9800804 	addi	r6,sp,32
    2548:	880b883a 	mov	r5,r17
    254c:	a009883a 	mov	r4,r20
    2550:	103ee83a 	callr	r2
    2554:	10002a1e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    2558:	84000044 	addi	r16,r16,1
    255c:	003fe706 	br	24fc <_gp+0xffff77a0>
    2560:	b5bfffc4 	addi	r22,r22,-1
    2564:	b0800003 	ldbu	r2,0(r22)
    2568:	01c00044 	movi	r7,1
    256c:	d9800804 	addi	r6,sp,32
    2570:	d8800805 	stb	r2,32(sp)
    2574:	88800117 	ldw	r2,4(r17)
    2578:	880b883a 	mov	r5,r17
    257c:	a009883a 	mov	r4,r20
    2580:	103ee83a 	callr	r2
    2584:	10001e1e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    2588:	8585c83a 	sub	r2,r16,r22
    258c:	b5c9883a 	add	r4,r22,r23
    2590:	e085883a 	add	r2,fp,r2
    2594:	013ff216 	blt	zero,r4,2560 <_gp+0xffff7804>
    2598:	1021883a 	mov	r16,r2
    259c:	dd800d17 	ldw	r22,52(sp)
    25a0:	00004406 	br	26b4 <___vfprintf_internal_r+0x4e4>
    25a4:	00800044 	movi	r2,1
    25a8:	1480080e 	bge	r2,r18,25cc <___vfprintf_internal_r+0x3fc>
    25ac:	95ffffc4 	addi	r23,r18,-1
    25b0:	b80f883a 	mov	r7,r23
    25b4:	01800804 	movi	r6,32
    25b8:	880b883a 	mov	r5,r17
    25bc:	a009883a 	mov	r4,r20
    25c0:	00021640 	call	2164 <print_repeat>
    25c4:	10000e1e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    25c8:	85e1883a 	add	r16,r16,r23
    25cc:	b0800017 	ldw	r2,0(r22)
    25d0:	01c00044 	movi	r7,1
    25d4:	d80d883a 	mov	r6,sp
    25d8:	d8800005 	stb	r2,0(sp)
    25dc:	88800117 	ldw	r2,4(r17)
    25e0:	880b883a 	mov	r5,r17
    25e4:	a009883a 	mov	r4,r20
    25e8:	b5c00104 	addi	r23,r22,4
    25ec:	103ee83a 	callr	r2
    25f0:	1000031e 	bne	r2,zero,2600 <___vfprintf_internal_r+0x430>
    25f4:	84000044 	addi	r16,r16,1
    25f8:	b82d883a 	mov	r22,r23
    25fc:	00002d06 	br	26b4 <___vfprintf_internal_r+0x4e4>
    2600:	00bfffc4 	movi	r2,-1
    2604:	00003106 	br	26cc <___vfprintf_internal_r+0x4fc>
    2608:	b5c00017 	ldw	r23,0(r22)
    260c:	b7000104 	addi	fp,r22,4
    2610:	b809883a 	mov	r4,r23
    2614:	00027d00 	call	27d0 <strlen>
    2618:	9091c83a 	sub	r8,r18,r2
    261c:	102d883a 	mov	r22,r2
    2620:	0200090e 	bge	zero,r8,2648 <___vfprintf_internal_r+0x478>
    2624:	400f883a 	mov	r7,r8
    2628:	01800804 	movi	r6,32
    262c:	880b883a 	mov	r5,r17
    2630:	a009883a 	mov	r4,r20
    2634:	da001015 	stw	r8,64(sp)
    2638:	00021640 	call	2164 <print_repeat>
    263c:	da001017 	ldw	r8,64(sp)
    2640:	103fef1e 	bne	r2,zero,2600 <_gp+0xffff78a4>
    2644:	8221883a 	add	r16,r16,r8
    2648:	88800117 	ldw	r2,4(r17)
    264c:	b00f883a 	mov	r7,r22
    2650:	b80d883a 	mov	r6,r23
    2654:	880b883a 	mov	r5,r17
    2658:	a009883a 	mov	r4,r20
    265c:	103ee83a 	callr	r2
    2660:	103fe71e 	bne	r2,zero,2600 <_gp+0xffff78a4>
    2664:	85a1883a 	add	r16,r16,r22
    2668:	e02d883a 	mov	r22,fp
    266c:	00001106 	br	26b4 <___vfprintf_internal_r+0x4e4>
    2670:	00c00044 	movi	r3,1
    2674:	04ffffc4 	movi	r19,-1
    2678:	d8000e15 	stw	zero,56(sp)
    267c:	d8c00a15 	stw	r3,40(sp)
    2680:	05400284 	movi	r21,10
    2684:	9825883a 	mov	r18,r19
    2688:	d8000c15 	stw	zero,48(sp)
    268c:	d8000b15 	stw	zero,44(sp)
    2690:	182f883a 	mov	r23,r3
    2694:	00000806 	br	26b8 <___vfprintf_internal_r+0x4e8>
    2698:	ddc00b15 	stw	r23,44(sp)
    269c:	05c00084 	movi	r23,2
    26a0:	00000506 	br	26b8 <___vfprintf_internal_r+0x4e8>
    26a4:	00c00044 	movi	r3,1
    26a8:	d8c00c15 	stw	r3,48(sp)
    26ac:	05c000c4 	movi	r23,3
    26b0:	00000106 	br	26b8 <___vfprintf_internal_r+0x4e8>
    26b4:	002f883a 	mov	r23,zero
    26b8:	d8c00f17 	ldw	r3,60(sp)
    26bc:	18c00044 	addi	r3,r3,1
    26c0:	d8c00f15 	stw	r3,60(sp)
    26c4:	003edc06 	br	2238 <_gp+0xffff74dc>
    26c8:	8005883a 	mov	r2,r16
    26cc:	dfc01a17 	ldw	ra,104(sp)
    26d0:	df001917 	ldw	fp,100(sp)
    26d4:	ddc01817 	ldw	r23,96(sp)
    26d8:	dd801717 	ldw	r22,92(sp)
    26dc:	dd401617 	ldw	r21,88(sp)
    26e0:	dd001517 	ldw	r20,84(sp)
    26e4:	dcc01417 	ldw	r19,80(sp)
    26e8:	dc801317 	ldw	r18,76(sp)
    26ec:	dc401217 	ldw	r17,72(sp)
    26f0:	dc001117 	ldw	r16,68(sp)
    26f4:	dec01b04 	addi	sp,sp,108
    26f8:	f800283a 	ret

000026fc <__vfprintf_internal>:
    26fc:	00800034 	movhi	r2,0
    2700:	108b5804 	addi	r2,r2,11616
    2704:	300f883a 	mov	r7,r6
    2708:	280d883a 	mov	r6,r5
    270c:	200b883a 	mov	r5,r4
    2710:	11000017 	ldw	r4,0(r2)
    2714:	00021d01 	jmpi	21d0 <___vfprintf_internal_r>

00002718 <__sfvwrite_small_dev>:
    2718:	2880000b 	ldhu	r2,0(r5)
    271c:	1080020c 	andi	r2,r2,8
    2720:	10002126 	beq	r2,zero,27a8 <__sfvwrite_small_dev+0x90>
    2724:	2880008f 	ldh	r2,2(r5)
    2728:	defffa04 	addi	sp,sp,-24
    272c:	dc000015 	stw	r16,0(sp)
    2730:	dfc00515 	stw	ra,20(sp)
    2734:	dd000415 	stw	r20,16(sp)
    2738:	dcc00315 	stw	r19,12(sp)
    273c:	dc800215 	stw	r18,8(sp)
    2740:	dc400115 	stw	r17,4(sp)
    2744:	2821883a 	mov	r16,r5
    2748:	10001216 	blt	r2,zero,2794 <__sfvwrite_small_dev+0x7c>
    274c:	2027883a 	mov	r19,r4
    2750:	3025883a 	mov	r18,r6
    2754:	3823883a 	mov	r17,r7
    2758:	05010004 	movi	r20,1024
    275c:	04400b0e 	bge	zero,r17,278c <__sfvwrite_small_dev+0x74>
    2760:	880f883a 	mov	r7,r17
    2764:	a440010e 	bge	r20,r17,276c <__sfvwrite_small_dev+0x54>
    2768:	01c10004 	movi	r7,1024
    276c:	8140008f 	ldh	r5,2(r16)
    2770:	900d883a 	mov	r6,r18
    2774:	9809883a 	mov	r4,r19
    2778:	00027ec0 	call	27ec <_write_r>
    277c:	0080050e 	bge	zero,r2,2794 <__sfvwrite_small_dev+0x7c>
    2780:	88a3c83a 	sub	r17,r17,r2
    2784:	90a5883a 	add	r18,r18,r2
    2788:	003ff406 	br	275c <_gp+0xffff7a00>
    278c:	0005883a 	mov	r2,zero
    2790:	00000706 	br	27b0 <__sfvwrite_small_dev+0x98>
    2794:	8080000b 	ldhu	r2,0(r16)
    2798:	10801014 	ori	r2,r2,64
    279c:	8080000d 	sth	r2,0(r16)
    27a0:	00bfffc4 	movi	r2,-1
    27a4:	00000206 	br	27b0 <__sfvwrite_small_dev+0x98>
    27a8:	00bfffc4 	movi	r2,-1
    27ac:	f800283a 	ret
    27b0:	dfc00517 	ldw	ra,20(sp)
    27b4:	dd000417 	ldw	r20,16(sp)
    27b8:	dcc00317 	ldw	r19,12(sp)
    27bc:	dc800217 	ldw	r18,8(sp)
    27c0:	dc400117 	ldw	r17,4(sp)
    27c4:	dc000017 	ldw	r16,0(sp)
    27c8:	dec00604 	addi	sp,sp,24
    27cc:	f800283a 	ret

000027d0 <strlen>:
    27d0:	2005883a 	mov	r2,r4
    27d4:	10c00007 	ldb	r3,0(r2)
    27d8:	18000226 	beq	r3,zero,27e4 <strlen+0x14>
    27dc:	10800044 	addi	r2,r2,1
    27e0:	003ffc06 	br	27d4 <_gp+0xffff7a78>
    27e4:	1105c83a 	sub	r2,r2,r4
    27e8:	f800283a 	ret

000027ec <_write_r>:
    27ec:	defffd04 	addi	sp,sp,-12
    27f0:	dc000015 	stw	r16,0(sp)
    27f4:	04000034 	movhi	r16,0
    27f8:	dc400115 	stw	r17,4(sp)
    27fc:	840b9704 	addi	r16,r16,11868
    2800:	2023883a 	mov	r17,r4
    2804:	2809883a 	mov	r4,r5
    2808:	300b883a 	mov	r5,r6
    280c:	380d883a 	mov	r6,r7
    2810:	dfc00215 	stw	ra,8(sp)
    2814:	80000015 	stw	zero,0(r16)
    2818:	0002b640 	call	2b64 <write>
    281c:	00ffffc4 	movi	r3,-1
    2820:	10c0031e 	bne	r2,r3,2830 <_write_r+0x44>
    2824:	80c00017 	ldw	r3,0(r16)
    2828:	18000126 	beq	r3,zero,2830 <_write_r+0x44>
    282c:	88c00015 	stw	r3,0(r17)
    2830:	dfc00217 	ldw	ra,8(sp)
    2834:	dc400117 	ldw	r17,4(sp)
    2838:	dc000017 	ldw	r16,0(sp)
    283c:	dec00304 	addi	sp,sp,12
    2840:	f800283a 	ret

00002844 <__divsi3>:
    2844:	20001b16 	blt	r4,zero,28b4 <__divsi3+0x70>
    2848:	000f883a 	mov	r7,zero
    284c:	28001616 	blt	r5,zero,28a8 <__divsi3+0x64>
    2850:	200d883a 	mov	r6,r4
    2854:	29001a2e 	bgeu	r5,r4,28c0 <__divsi3+0x7c>
    2858:	00800804 	movi	r2,32
    285c:	00c00044 	movi	r3,1
    2860:	00000106 	br	2868 <__divsi3+0x24>
    2864:	10000d26 	beq	r2,zero,289c <__divsi3+0x58>
    2868:	294b883a 	add	r5,r5,r5
    286c:	10bfffc4 	addi	r2,r2,-1
    2870:	18c7883a 	add	r3,r3,r3
    2874:	293ffb36 	bltu	r5,r4,2864 <_gp+0xffff7b08>
    2878:	0005883a 	mov	r2,zero
    287c:	18000726 	beq	r3,zero,289c <__divsi3+0x58>
    2880:	0005883a 	mov	r2,zero
    2884:	31400236 	bltu	r6,r5,2890 <__divsi3+0x4c>
    2888:	314dc83a 	sub	r6,r6,r5
    288c:	10c4b03a 	or	r2,r2,r3
    2890:	1806d07a 	srli	r3,r3,1
    2894:	280ad07a 	srli	r5,r5,1
    2898:	183ffa1e 	bne	r3,zero,2884 <_gp+0xffff7b28>
    289c:	38000126 	beq	r7,zero,28a4 <__divsi3+0x60>
    28a0:	0085c83a 	sub	r2,zero,r2
    28a4:	f800283a 	ret
    28a8:	014bc83a 	sub	r5,zero,r5
    28ac:	39c0005c 	xori	r7,r7,1
    28b0:	003fe706 	br	2850 <_gp+0xffff7af4>
    28b4:	0109c83a 	sub	r4,zero,r4
    28b8:	01c00044 	movi	r7,1
    28bc:	003fe306 	br	284c <_gp+0xffff7af0>
    28c0:	00c00044 	movi	r3,1
    28c4:	003fee06 	br	2880 <_gp+0xffff7b24>

000028c8 <__modsi3>:
    28c8:	20001716 	blt	r4,zero,2928 <__modsi3+0x60>
    28cc:	000f883a 	mov	r7,zero
    28d0:	2005883a 	mov	r2,r4
    28d4:	28001216 	blt	r5,zero,2920 <__modsi3+0x58>
    28d8:	2900162e 	bgeu	r5,r4,2934 <__modsi3+0x6c>
    28dc:	01800804 	movi	r6,32
    28e0:	00c00044 	movi	r3,1
    28e4:	00000106 	br	28ec <__modsi3+0x24>
    28e8:	30000a26 	beq	r6,zero,2914 <__modsi3+0x4c>
    28ec:	294b883a 	add	r5,r5,r5
    28f0:	31bfffc4 	addi	r6,r6,-1
    28f4:	18c7883a 	add	r3,r3,r3
    28f8:	293ffb36 	bltu	r5,r4,28e8 <_gp+0xffff7b8c>
    28fc:	18000526 	beq	r3,zero,2914 <__modsi3+0x4c>
    2900:	1806d07a 	srli	r3,r3,1
    2904:	11400136 	bltu	r2,r5,290c <__modsi3+0x44>
    2908:	1145c83a 	sub	r2,r2,r5
    290c:	280ad07a 	srli	r5,r5,1
    2910:	183ffb1e 	bne	r3,zero,2900 <_gp+0xffff7ba4>
    2914:	38000126 	beq	r7,zero,291c <__modsi3+0x54>
    2918:	0085c83a 	sub	r2,zero,r2
    291c:	f800283a 	ret
    2920:	014bc83a 	sub	r5,zero,r5
    2924:	003fec06 	br	28d8 <_gp+0xffff7b7c>
    2928:	0109c83a 	sub	r4,zero,r4
    292c:	01c00044 	movi	r7,1
    2930:	003fe706 	br	28d0 <_gp+0xffff7b74>
    2934:	00c00044 	movi	r3,1
    2938:	003ff106 	br	2900 <_gp+0xffff7ba4>

0000293c <__udivsi3>:
    293c:	200d883a 	mov	r6,r4
    2940:	2900152e 	bgeu	r5,r4,2998 <__udivsi3+0x5c>
    2944:	28001416 	blt	r5,zero,2998 <__udivsi3+0x5c>
    2948:	00800804 	movi	r2,32
    294c:	00c00044 	movi	r3,1
    2950:	00000206 	br	295c <__udivsi3+0x20>
    2954:	10000e26 	beq	r2,zero,2990 <__udivsi3+0x54>
    2958:	28000516 	blt	r5,zero,2970 <__udivsi3+0x34>
    295c:	294b883a 	add	r5,r5,r5
    2960:	10bfffc4 	addi	r2,r2,-1
    2964:	18c7883a 	add	r3,r3,r3
    2968:	293ffa36 	bltu	r5,r4,2954 <_gp+0xffff7bf8>
    296c:	18000826 	beq	r3,zero,2990 <__udivsi3+0x54>
    2970:	0005883a 	mov	r2,zero
    2974:	31400236 	bltu	r6,r5,2980 <__udivsi3+0x44>
    2978:	314dc83a 	sub	r6,r6,r5
    297c:	10c4b03a 	or	r2,r2,r3
    2980:	1806d07a 	srli	r3,r3,1
    2984:	280ad07a 	srli	r5,r5,1
    2988:	183ffa1e 	bne	r3,zero,2974 <_gp+0xffff7c18>
    298c:	f800283a 	ret
    2990:	0005883a 	mov	r2,zero
    2994:	f800283a 	ret
    2998:	00c00044 	movi	r3,1
    299c:	003ff406 	br	2970 <_gp+0xffff7c14>

000029a0 <__umodsi3>:
    29a0:	2005883a 	mov	r2,r4
    29a4:	2900122e 	bgeu	r5,r4,29f0 <__umodsi3+0x50>
    29a8:	28001116 	blt	r5,zero,29f0 <__umodsi3+0x50>
    29ac:	01800804 	movi	r6,32
    29b0:	00c00044 	movi	r3,1
    29b4:	00000206 	br	29c0 <__umodsi3+0x20>
    29b8:	30000c26 	beq	r6,zero,29ec <__umodsi3+0x4c>
    29bc:	28000516 	blt	r5,zero,29d4 <__umodsi3+0x34>
    29c0:	294b883a 	add	r5,r5,r5
    29c4:	31bfffc4 	addi	r6,r6,-1
    29c8:	18c7883a 	add	r3,r3,r3
    29cc:	293ffa36 	bltu	r5,r4,29b8 <_gp+0xffff7c5c>
    29d0:	18000626 	beq	r3,zero,29ec <__umodsi3+0x4c>
    29d4:	1806d07a 	srli	r3,r3,1
    29d8:	11400136 	bltu	r2,r5,29e0 <__umodsi3+0x40>
    29dc:	1145c83a 	sub	r2,r2,r5
    29e0:	280ad07a 	srli	r5,r5,1
    29e4:	183ffb1e 	bne	r3,zero,29d4 <_gp+0xffff7c78>
    29e8:	f800283a 	ret
    29ec:	f800283a 	ret
    29f0:	00c00044 	movi	r3,1
    29f4:	003ff706 	br	29d4 <_gp+0xffff7c78>

000029f8 <__mulsi3>:
    29f8:	0005883a 	mov	r2,zero
    29fc:	20000726 	beq	r4,zero,2a1c <__mulsi3+0x24>
    2a00:	20c0004c 	andi	r3,r4,1
    2a04:	2008d07a 	srli	r4,r4,1
    2a08:	18000126 	beq	r3,zero,2a10 <__mulsi3+0x18>
    2a0c:	1145883a 	add	r2,r2,r5
    2a10:	294b883a 	add	r5,r5,r5
    2a14:	203ffa1e 	bne	r4,zero,2a00 <_gp+0xffff7ca4>
    2a18:	f800283a 	ret
    2a1c:	f800283a 	ret

00002a20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2a20:	deffff04 	addi	sp,sp,-4
    2a24:	01000034 	movhi	r4,0
    2a28:	01400034 	movhi	r5,0
    2a2c:	dfc00015 	stw	ra,0(sp)
    2a30:	210b1f04 	addi	r4,r4,11388
    2a34:	294b5b04 	addi	r5,r5,11628

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2a38:	2140061e 	bne	r4,r5,2a54 <alt_load+0x34>
    2a3c:	01000034 	movhi	r4,0
    2a40:	01400034 	movhi	r5,0
    2a44:	21080804 	addi	r4,r4,8224
    2a48:	29480804 	addi	r5,r5,8224
    2a4c:	2140121e 	bne	r4,r5,2a98 <alt_load+0x78>
    2a50:	00000b06 	br	2a80 <alt_load+0x60>
    2a54:	00c00034 	movhi	r3,0
    2a58:	18cb5b04 	addi	r3,r3,11628
    2a5c:	1907c83a 	sub	r3,r3,r4
    2a60:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2a64:	10fff526 	beq	r2,r3,2a3c <_gp+0xffff7ce0>
    {
      *to++ = *from++;
    2a68:	114f883a 	add	r7,r2,r5
    2a6c:	39c00017 	ldw	r7,0(r7)
    2a70:	110d883a 	add	r6,r2,r4
    2a74:	10800104 	addi	r2,r2,4
    2a78:	31c00015 	stw	r7,0(r6)
    2a7c:	003ff906 	br	2a64 <_gp+0xffff7d08>
    2a80:	01000034 	movhi	r4,0
    2a84:	01400034 	movhi	r5,0
    2a88:	210b0b04 	addi	r4,r4,11308
    2a8c:	294b0b04 	addi	r5,r5,11308

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2a90:	2140101e 	bne	r4,r5,2ad4 <alt_load+0xb4>
    2a94:	00000b06 	br	2ac4 <alt_load+0xa4>
    2a98:	00c00034 	movhi	r3,0
    2a9c:	18c80804 	addi	r3,r3,8224
    2aa0:	1907c83a 	sub	r3,r3,r4
    2aa4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2aa8:	10fff526 	beq	r2,r3,2a80 <_gp+0xffff7d24>
    {
      *to++ = *from++;
    2aac:	114f883a 	add	r7,r2,r5
    2ab0:	39c00017 	ldw	r7,0(r7)
    2ab4:	110d883a 	add	r6,r2,r4
    2ab8:	10800104 	addi	r2,r2,4
    2abc:	31c00015 	stw	r7,0(r6)
    2ac0:	003ff906 	br	2aa8 <_gp+0xffff7d4c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2ac4:	0002c1c0 	call	2c1c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2ac8:	dfc00017 	ldw	ra,0(sp)
    2acc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2ad0:	0002c201 	jmpi	2c20 <alt_icache_flush_all>
    2ad4:	00c00034 	movhi	r3,0
    2ad8:	18cb1f04 	addi	r3,r3,11388
    2adc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2ae0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2ae4:	18bff726 	beq	r3,r2,2ac4 <_gp+0xffff7d68>
    {
      *to++ = *from++;
    2ae8:	114f883a 	add	r7,r2,r5
    2aec:	39c00017 	ldw	r7,0(r7)
    2af0:	110d883a 	add	r6,r2,r4
    2af4:	10800104 	addi	r2,r2,4
    2af8:	31c00015 	stw	r7,0(r6)
    2afc:	003ff906 	br	2ae4 <_gp+0xffff7d88>

00002b00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2b00:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2b04:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2b08:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2b0c:	0002bc40 	call	2bc4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2b10:	0002be40 	call	2be4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2b14:	d1a04117 	ldw	r6,-32508(gp)
    2b18:	d1604217 	ldw	r5,-32504(gp)
    2b1c:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2b20:	dfc00017 	ldw	ra,0(sp)
    2b24:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2b28:	000205c1 	jmpi	205c <main>

00002b2c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2b2c:	defffe04 	addi	sp,sp,-8
    2b30:	dc000015 	stw	r16,0(sp)
    2b34:	dfc00115 	stw	ra,4(sp)
    2b38:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2b3c:	00027d00 	call	27d0 <strlen>
    2b40:	01000034 	movhi	r4,0
    2b44:	000f883a 	mov	r7,zero
    2b48:	100d883a 	mov	r6,r2
    2b4c:	800b883a 	mov	r5,r16
    2b50:	210b5904 	addi	r4,r4,11620
#else
    return fputs(str, stdout);
#endif
#endif
}
    2b54:	dfc00117 	ldw	ra,4(sp)
    2b58:	dc000017 	ldw	r16,0(sp)
    2b5c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2b60:	0002be81 	jmpi	2be8 <altera_avalon_jtag_uart_write>

00002b64 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2b64:	00800044 	movi	r2,1
    2b68:	20800226 	beq	r4,r2,2b74 <write+0x10>
    2b6c:	00800084 	movi	r2,2
    2b70:	2080041e 	bne	r4,r2,2b84 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2b74:	01000034 	movhi	r4,0
    2b78:	000f883a 	mov	r7,zero
    2b7c:	210b5904 	addi	r4,r4,11620
    2b80:	0002be81 	jmpi	2be8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2b84:	d0a00317 	ldw	r2,-32756(gp)
    2b88:	10000926 	beq	r2,zero,2bb0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2b8c:	deffff04 	addi	sp,sp,-4
    2b90:	dfc00015 	stw	ra,0(sp)
    2b94:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2b98:	00c01444 	movi	r3,81
    2b9c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2ba0:	00bfffc4 	movi	r2,-1
    2ba4:	dfc00017 	ldw	ra,0(sp)
    2ba8:	dec00104 	addi	sp,sp,4
    2bac:	f800283a 	ret
    2bb0:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2bb4:	00c01444 	movi	r3,81
    2bb8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2bbc:	00bfffc4 	movi	r2,-1
    2bc0:	f800283a 	ret

00002bc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2bc4:	deffff04 	addi	sp,sp,-4
    2bc8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    2bcc:	0002c240 	call	2c24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2bd0:	00800044 	movi	r2,1
    2bd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2bd8:	dfc00017 	ldw	ra,0(sp)
    2bdc:	dec00104 	addi	sp,sp,4
    2be0:	f800283a 	ret

00002be4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2be4:	f800283a 	ret

00002be8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2be8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2bec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2bf0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2bf4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2bf8:	2980072e 	bgeu	r5,r6,2c18 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2bfc:	38c00037 	ldwio	r3,0(r7)
    2c00:	18ffffec 	andhi	r3,r3,65535
    2c04:	183ffc26 	beq	r3,zero,2bf8 <_gp+0xffff7e9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2c08:	28c00007 	ldb	r3,0(r5)
    2c0c:	20c00035 	stwio	r3,0(r4)
    2c10:	29400044 	addi	r5,r5,1
    2c14:	003ff806 	br	2bf8 <_gp+0xffff7e9c>

  return count;
}
    2c18:	f800283a 	ret

00002c1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2c1c:	f800283a 	ret

00002c20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2c20:	f800283a 	ret

00002c24 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2c24:	000170fa 	wrctl	ienable,zero
    2c28:	f800283a 	ret
